{
  "DOCUMENTATION.html": {
    "href": "DOCUMENTATION.html",
    "title": "CircuitTool Documentation | CircuitTool Documentation",
    "summary": "double power = LEDCalculator.CalculateLEDPower(12.0, 0.02); double batteryLife = BeginnerCalculators.BatteryLifeCalculator(2000, arduinoCurrent); double batteryHours = ESP32Tools.CalculateBatteryLife(3000, totalCurrent); double seriesR = CircuitCalculations.CalculateTotalResistance(resistors, true); double parallelR = CircuitCalculations.CalculateTotalResistance(resistors, false); CircuitTool Documentation CircuitTool is a comprehensive C# library for electrical engineering and electronics calculations. It provides a wide range of calculators and utilities for circuit analysis, power calculations, unit conversions, and more. This documentation covers the main features, usage examples, and API references for the library. Table of Contents Getting Started Core Calculators Advanced Calculators Microcontroller Tools Beginner Calculators Unit Conversion API Reference Contributing License Getting Started Installation Install via NuGet: dotnet add package CircuitTool Or via Package Manager Console: Install-Package CircuitTool Supported Frameworks .NET Framework 2.0+ .NET 6.0+ .NET Standard 2.0+ Core Calculators OhmsLawCalculator: Voltage, current, resistance calculations ResistorCalculator: Series/parallel resistor networks VoltageCalculator: Voltage drop, divider, and analysis PowerCalculator: Power, energy, and cost calculations CapacitorCalculator: Capacitance, reactance, energy, time constants InductorCalculator: Inductance, reactance, energy, resonance TransformerCalculator: Voltage/current/turns ratios, efficiency LEDCalculator: LED resistor, power, brightness calculations Advanced Calculators ACCircuitCalculator: Impedance, phase, RMS/peak/average, Q factor FilterCalculator: RC/RL filter design, cutoff, gain, phase ToleranceAnalysis: Component tolerance, Monte Carlo, worst-case PerformanceOptimizations: SIMD, caching, vectorized calculations Microcontroller Tools ArduinoTools: ADC conversions, servo, current calculations ESP32Tools: ADC, WiFi power, battery life, touch sensor Beginner Calculators BeginnerCalculators: Battery life, wire gauge, RC time, dB conversions Unit Conversion UnitConverter: Amps, volts, ohms, watts, prefixes, etc. API Reference See XML documentation in source code for detailed API usage and parameters. Example usage: using CircuitTool; double voltage = OhmsLawCalculator.Voltage(2.0, 5.0); // 10V Contributing Follow C# coding standards Add XML docs for public APIs Include unit tests for new features License MIT License. See LICENSE file for details."
  },
  "PROJECT_CODE_MAP.html": {
    "href": "PROJECT_CODE_MAP.html",
    "title": "CircuitTool Project Code Map | CircuitTool Documentation",
    "summary": "CircuitTool Project Code Map Project Overview CircuitTool is a comprehensive C# library for electrical engineering and electronics calculations, designed for embedded systems development and hardware design. Repository: CircuitTool Owner: jomardyan License: MIT License Version: 2.0.0 Target Frameworks: .NET 4.5, 4.6.2, 6.0, 8.0, Standard 2.0, 2.1 \uD83D\uDCC1 Project Structure CircuitTool/ ├── \uD83D\uDCC4 LICENSE # MIT License ├── \uD83D\uDCC4 README.md # Project documentation ├── \uD83D\uDCC4 CircuitTool.csproj # Main project file ├── \uD83D\uDCC4 CircuitTool.sln # Solution file ├── \uD83D\uDCC4 DOCUMENTATION.md # API documentation ├── \uD83D\uDCC4 REORGANIZATION_SUMMARY.md # Code reorganization history ├── \uD83D\uDCC4 COM_PORT_TOOLS_SUMMARY.md # COM port tools documentation ├── \uD83D\uDCC4 HARDWARE_ENHANCEMENT_SUMMARY.md # Hardware tools documentation ├── \uD83D\uDDBC️ icon.png/svg # Package icons ├── ⚙️ nuget.config # NuGet configuration ├── \uD83D\uDD27 publish.ps1/sh # Publishing scripts ├── \uD83C\uDFD7️ Properties/AssemblyInfo.cs # Assembly information ├── \uD83D\uDCC1 src/ # Source code (see detailed breakdown below) ├── \uD83D\uDCC1 tests/ # Unit tests ├── \uD83D\uDCC1 bin/ # Build output └── \uD83D\uDCC1 obj/ # Build artifacts \uD83C\uDFD7️ Source Code Architecture \uD83D\uDCC1 /src/ - Main Source Directory src/ ├── \uD83D\uDCC4 ACTypes.cs # AC circuit type definitions ├── \uD83D\uDCC4 CircuitBuilder.cs # Circuit construction utilities ├── \uD83D\uDCC4 CircuitCalculations.cs # Core circuit calculations ├── \uD83D\uDCC4 Utilities.cs # General utility functions ├── \uD83D\uDCC1 Calculators/ # Calculation modules (23 files) ├── \uD83D\uDCC1 Hardware/ # Hardware-specific tools (10 files) ├── \uD83D\uDCC1 Analysis/ # Analysis and simulation (5 files) ├── \uD83D\uDCC1 Performance/ # Performance optimization (6 files) ├── \uD83D\uDCC1 Documentation/ # Documentation and examples (4 files) ├── \uD83D\uDCC1 Math/ # Mathematical utilities (2 files) ├── \uD83D\uDCC1 Serialization/ # Import/export functionality (1 file) └── \uD83D\uDCC1 Units/ # Unit system management (3 files) \uD83E\uDDEE Calculators Module (23 Classes) Core Electrical Calculations OhmsLawCalculator.cs - Fundamental V=IR calculations PowerCalculator.cs - Power calculations (P=VI, P=I²R) VoltageCalculator.cs - Voltage analysis and calculations ResistorCalculator.cs - Resistor networks, parallel/series CapacitorCalculator.cs - Capacitance calculations and analysis InductorCalculator.cs - Inductance calculations and analysis Advanced Circuit Analysis ACCircuitCalculator.cs - AC circuit analysis and impedance FilterCalculator.cs - Filter design (low-pass, high-pass, band-pass) TransformerCalculator.cs - Transformer calculations and design PowerFactorCalculator.cs - Power factor correction calculations AdvancedCalculators.cs - Complex circuit analysis Specialized Applications LEDCalculator.cs - LED current limiting and power calculations AntennaCalculator.cs - Antenna design and analysis BeginnerCalculators.cs - Simplified calculations for learning PhysicsCircuitCalculators.cs - Physics-based circuit modeling System-Level Calculations EnergyCalculator.cs - Energy consumption and efficiency EnergyConsumptionCalculator.cs - Power usage analysis ElectricityBillCalculator.cs - Cost analysis and billing VoltageDropCalculator.cs - Voltage drop in conductors VoltageDividerCalculator.cs - Voltage divider networks WattsVoltsAmpsOhmsCalculator.cs - Multi-parameter calculations Utilities UnitConverter.cs - Unit conversion between systems ComponentCalculator.cs - General component calculations \uD83D\uDD27 Hardware Module (10 Classes) Platform-Specific Tools ArduinoTools.cs - Arduino-specific calculations and utilities ESP32Tools.cs - ESP32 development and configuration tools RaspberryPiTools.cs - Raspberry Pi GPIO and hardware tools Communication & Protocols ComPortTools.cs - COM port management and serial communication CommunicationProtocolTools.cs - I2C, SPI, UART protocol analysis HardwareDebuggingTools.cs - Hardware troubleshooting and diagnostics Hardware Design MotorControlCalculator.cs - Motor control system design SensorInterfaceCalculator.cs - Sensor interface and calibration PCBDesignCalculator.cs - PCB layout and design calculations PowerSupplyCalculator.cs - Power supply design and analysis \uD83D\uDCCA Analysis Module (5 Classes) Power & Thermal Analysis AdvancedPowerAnalysis.cs - Complex power system analysis ThermalCalculator.cs - Thermal management and heat dissipation Signal & EMC Analysis SignalIntegrityCalculator.cs - Signal quality and integrity analysis EMCCalculator.cs - Electromagnetic compatibility calculations ToleranceAnalysis.cs - Component tolerance and variation analysis ⚡ Performance Module (6 Classes) Optimization & Caching Performance.cs - Performance monitoring and metrics PerformanceMonitor.cs - Real-time performance tracking CalculationCache.cs - Calculation result caching system VectorizedCalculations.cs - SIMD and vectorized operations Bulk Operations BulkOperations.cs - Batch processing for large datasets AsyncCalculations.cs - Asynchronous calculation support \uD83D\uDCDA Documentation Module (4 Classes) Educational Resources DocumentationExamples.cs - Code examples and tutorials InteractiveTutorials.cs - Step-by-step learning modules UseCaseTemplates.cs - Common use case templates Examples.cs - Practical application examples \uD83D\uDD22 Math Module (2 Classes) Advanced Mathematics MatrixOperations.cs - Matrix calculations for circuit analysis FourierTransform.cs - FFT and frequency domain analysis \uD83D\uDCBE Serialization Module (1 Class) Data Management CircuitSerialization.cs - Circuit data import/export functionality \uD83D\uDCCF Units Module (3 Classes) Unit Management Unit system classes - Comprehensive unit conversion and management \uD83E\uDDEA Tests Module (30+ Test Classes) Comprehensive Test Coverage tests/ ├── Calculator Tests (15+ files) # Unit tests for all calculators ├── Hardware Tests (5+ files) # Hardware module tests ├── Advanced Features Tests (5+ files) # Complex functionality tests ├── Performance Tests (3+ files) # Performance and optimization tests └── Documentation Tests (2+ files) # Example and tutorial tests \uD83D\uDCE6 Dependencies & Packages NuGet Package References <!-- Core Dependencies --> <PackageReference Include=\"System.IO.Ports\" Version=\"8.0.0\" /> <!-- COM port support --> <PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" /> <!-- JSON serialization --> <PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" /> <!-- Vectorization --> <PackageReference Include=\"System.ValueTuple\" Version=\"4.5.0\" /> <!-- Tuple support --> <PackageReference Include=\"Microsoft.Bcl.Async\" Version=\"1.0.168\" /> <!-- Async support --> <!-- Development Tools --> <PackageReference Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" /> <!-- Source linking --> Framework Compatibility Matrix Component .NET 4.5 .NET 4.6.2 .NET 6.0+ .NET Standard 2.0+ Core Calculators ✅ ✅ ✅ ✅ Hardware Tools ⚠️ Limited ✅ ✅ ✅ COM Port Tools ⚠️ Limited ✅ ✅ ✅ Performance Features ✅ ✅ ✅ ✅ Analysis Tools ✅ ✅ ✅ ✅ \uD83D\uDD17 Inter-Module Dependencies Dependency Flow ┌─────────────────┐ ┌─────────────────┐ │ Calculators │────│ Units │ │ (23 classes) │ │ (3 classes) │ └─────────────────┘ └─────────────────┘ │ │ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ │ Hardware │────│ Math │ │ (10 classes) │ │ (2 classes) │ └─────────────────┘ └─────────────────┘ │ │ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ │ Analysis │────│ Performance │ │ (5 classes) │ │ (6 classes) │ └─────────────────┘ └─────────────────┘ │ │ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ │ Documentation │────│ Serialization │ │ (4 classes) │ │ (1 class) │ └─────────────────┘ └─────────────────┘ Core Shared Components UnitConverter - Used by all calculation modules Utilities - Common helper functions across modules CircuitCalculations - Base calculation methods Performance - Optimization used throughout \uD83D\uDE80 Key Features by Module \uD83E\uDDEE Calculators Basic: Ohm's Law, Power, Voltage, Current calculations Components: Resistors, Capacitors, Inductors, Transformers AC Analysis: Impedance, Phase, Frequency response Specialized: LEDs, Antennas, Filters, Power Factor \uD83D\uDD27 Hardware Platforms: Arduino, ESP32, Raspberry Pi support Communication: I2C, SPI, UART, COM port tools Design: PCB layout, Power supplies, Motor control Debug: Hardware troubleshooting, Diagnostics \uD83D\uDCCA Analysis Power: Advanced power analysis and optimization Signal: Signal integrity and EMC compliance Thermal: Heat management and thermal analysis Tolerance: Component variation analysis ⚡ Performance Optimization: Vectorized calculations, Caching Monitoring: Real-time performance tracking Async: Asynchronous calculation support Bulk: Large dataset processing \uD83C\uDFAF Usage Patterns Typical Usage Flow Import CircuitTool namespace Configure units and parameters Calculate using appropriate module Analyze results with analysis tools Generate code or documentation Export results via serialization Example Integration Points using CircuitTool; // Basic calculation var voltage = OhmsLawCalculator.CalculateVoltage(current: 2.0, resistance: 100); // Hardware-specific var gpioCode = ArduinoTools.GenerateGPIOCode(pin: 13, mode: \"OUTPUT\"); // Protocol analysis var i2cSettings = CommunicationProtocolTools.CalculateI2CPullUpResistors(config); // Performance monitoring using (var monitor = new PerformanceMonitor()) { // Calculations with monitoring } \uD83D\uDCC8 Project Evolution Recent Enhancements ✅ Code Reorganization - Modular structure with logical grouping ✅ Hardware Tools - Comprehensive embedded systems support ✅ COM Port Tools - Complete serial communication framework ✅ Protocol Analysis - I2C, SPI, UART optimization tools ✅ Debug Tools - Hardware troubleshooting and diagnostics Technical Achievements 54 Classes across 8 logical modules 30+ Test Classes with comprehensive coverage Cross-Framework compatibility (.NET 4.5 - 8.0) Performance Optimized with vectorization and caching Industry Standards compliance (IPC, IEEE) This code map provides a complete overview of the CircuitTool project architecture, showing how all components work together to provide a comprehensive electrical engineering calculation library."
  },
  "README.html": {
    "href": "README.html",
    "title": "\uD83D\uDD0C CircuitTool | CircuitTool Documentation",
    "summary": "\uD83D\uDD0C CircuitTool A modern C# library for electrical engineering and electronics calculations. CircuitTool provides utilities for circuit analysis, power calculations, unit conversions, and more. Quick Install dotnet add package CircuitTool Documentation See the full documentation and usage examples in DOCUMENTATION.md. License MIT License. See LICENSE for details. LED Circuit Calculations using CircuitTool; // Calculate resistor value for LED double resistorValue = LEDCalculator.CalculateResistorValue(9.0, 2.0, 0.02); // 9V supply, 2V LED, 20mA = 350Ω // Calculate LED power consumption double ledPower = LEDCalculator.CalculateLEDPower(5.0, 0.02); // 5V, 20mA = 0.1W // Calculate brightness from PWM duty cycle double brightness = LEDCalculator.CalculateBrightness(75); // 75% duty cycle = 0.75 brightness // Calculate resistor for series LEDs double seriesResistor = LEDCalculator.CalculateSeriesResistor(12.0, 3.3, 3, 0.02); // 12V, 3x 3.3V LEDs, 20mA Voltage Analysis using CircuitTool; // Calculate voltage drop in a conductor double voltageDrop = VoltageDropCalculator.CalculateVoltageDrop(5.0, 0.1, 100); // 5A, 0.1Ω/km, 100m = 0.05V // Calculate conductor resistance double resistance = VoltageDropCalculator.CalculateConductorResistance(0.05, 5.0, 100); // 0.05V drop, 5A, 100m = 0.1Ω/km // Calculate maximum current for allowed voltage drop double maxCurrent = VoltageDropCalculator.CalculateMaxCurrent(0.1, 0.1, 100); // 0.1V max drop, 0.1Ω/km, 100m = 10A // Calculate voltage divider output double outputVoltage = VoltageDividerCalculator.CalculateOutputVoltage(12, 1000, 2000); // 12V, 1kΩ, 2kΩ = 8V // Calculate required resistor for voltage divider double requiredR2 = VoltageDividerCalculator.CalculateR2(12, 8, 1000); // 12V in, 8V out, 1kΩ R1 = 2kΩ // Calculate input voltage from voltage divider double inputVoltage = VoltageDividerCalculator.CalculateInputVoltage(8, 1000, 2000); // 8V out, 1kΩ, 2kΩ = 12V Power Analysis using CircuitTool; // Calculate watts from voltage and current double watts = WattsVoltsAmpsOhmsCalculator.CalculateWatts(12, 2); // 12V, 2A = 24W // Calculate volts from watts and current double volts = WattsVoltsAmpsOhmsCalculator.CalculateVolts(24, 2); // 24W, 2A = 12V // Calculate amps from watts and voltage double amps = WattsVoltsAmpsOhmsCalculator.CalculateAmps(24, 12); // 24W, 12V = 2A // Calculate ohms from voltage and current double ohms = WattsVoltsAmpsOhmsCalculator.CalculateOhms(12, 2); // 12V, 2A = 6Ω // Calculate watts from voltage and resistance double wattsFromVR = WattsVoltsAmpsOhmsCalculator.CalculateWattsFromVoltageAndResistance(12, 6); // 12V, 6Ω = 24W // Calculate watts from current and resistance double wattsFromIR = WattsVoltsAmpsOhmsCalculator.CalculateWattsFromCurrentAndResistance(2, 6); // 2A, 6Ω = 24W Arduino Tools using CircuitTool; // Convert Arduino analog reading to voltage double voltage = ArduinoTools.AnalogToVoltage(512); // 512 reading = 2.5V (on 5V Arduino) // Convert voltage to analog reading int analogReading = ArduinoTools.VoltageToAnalog(3.3); // 3.3V = 675 reading // Calculate servo pulse width for specific angle double pulseWidth = ArduinoTools.ServoAngleToPulseWidth(90); // 90° = 1500μs pulse // Calculate current consumption double current = ArduinoTools.CalculateCurrentConsumption(20, 5, 2, 50); // CPU + pins + external = total mA ESP32 Tools using CircuitTool; // Convert ESP32 analog reading to voltage double voltage = ESP32Tools.AnalogToVoltage(2048); // 2048 reading = 1.65V (on 3.3V ESP32) // Calculate WiFi power consumption double wifiPower = ESP32Tools.CalculateWiFiPowerConsumption(WiFiMode.Active); // 80mA // Calculate total ESP32 current consumption double totalCurrent = ESP32Tools.CalculateTotalCurrentConsumption(240, WiFiMode.Active, true, 20); // Calculate battery life double batteryLife = ESP32Tools.CalculateBatteryLife(2000, 50); // 2000mAh battery, 50mA load = 32 hours // Calculate touch sensor threshold int touchThreshold = ESP32Tools.CalculateTouchThreshold(1000, 0.3); // 1000 baseline, 30% sensitivity Advanced Circuit Analysis using CircuitTool; // Calculate total resistance in series double seriesResistance = CircuitCalculations.CalculateTotalResistance(new double[] { 10, 20, 30 }, true); // Calculate total resistance in parallel double parallelResistance = CircuitCalculations.CalculateTotalResistance(new double[] { 10, 20, 30 }, false); // Calculate power double power = CircuitCalculations.CalculatePower(230, 5); // 230V × 5A = 1150W // Calculate energy double energy = CircuitCalculations.CalculateEnergy(1150, 2); // 1150W × 2h = 2300Wh Capacitor Calculations using CircuitTool; // Calculate capacitive reactance double reactance = CapacitorCalculator.CalculateCapacitiveReactance(0.000001, 1000); // 1μF at 1kHz = 159.15Ω // Calculate energy stored in capacitor double energy = CapacitorCalculator.CalculateEnergyStored(0.000001, 12); // 1μF at 12V = 72μJ // Calculate RC time constant double timeConstant = CapacitorCalculator.CalculateTimeConstant(1000, 0.000001); // 1kΩ, 1μF = 1ms // Calculate total capacitance in series double seriesCapacitance = CapacitorCalculator.CalculateSeriesCapacitance(new double[] { 0.000001, 0.000002 }); // 1μF, 2μF in series = 0.67μF // Calculate total capacitance in parallel double parallelCapacitance = CapacitorCalculator.CalculateParallelCapacitance(new double[] { 0.000001, 0.000002 }); // 1μF, 2μF in parallel = 3μF // Calculate charging voltage double voltage = CapacitorCalculator.CalculateChargingVoltage(12, 0.001, 0.001); // 12V source, t=1ms, τ=1ms = 7.59V // Calculate discharging voltage double dischargingVoltage = CapacitorCalculator.CalculateDischargingVoltage(12, 0.001, 0.001); // 12V initial, t=1ms, τ=1ms = 4.41V Inductor Calculations using CircuitTool; // Calculate inductive reactance double reactance = InductorCalculator.CalculateInductiveReactance(0.001, 1000); // 1mH at 1kHz = 6.28Ω // Calculate energy stored in inductor double energy = InductorCalculator.CalculateEnergyStored(0.001, 2); // 1mH with 2A = 2mJ // Calculate RL time constant double timeConstant = InductorCalculator.CalculateTimeConstant(0.001, 100); // 1mH, 100Ω = 10μs // Calculate total inductance in series double seriesInductance = InductorCalculator.CalculateSeriesInductance(new double[] { 0.001, 0.002 }); // 1mH, 2mH in series = 3mH // Calculate total inductance in parallel double parallelInductance = InductorCalculator.CalculateParallelInductance(new double[] { 0.001, 0.002 }); // 1mH, 2mH in parallel = 0.67mH // Calculate current buildup double current = InductorCalculator.CalculateCurrentBuildup(2, 0.001, 0.00001); // 2A final, t=10μs, τ=10μs = 1.26A // Calculate resonant frequency double frequency = InductorCalculator.CalculateResonantFrequency(0.001, 0.000001); // 1mH, 1μF = 5.03kHz Transformer Calculations using CircuitTool; // Calculate secondary voltage double secondaryVoltage = TransformerCalculator.CalculateSecondaryVoltage(120, 10, 1); // 120V primary, 10:1 ratio = 12V // Calculate secondary current double secondaryCurrent = TransformerCalculator.CalculateSecondaryCurrent(2, 10, 1); // 2A primary, 10:1 ratio = 20A // Calculate turns ratio double turnsRatio = TransformerCalculator.CalculateTurnsRatio(120, 12); // 120V to 12V = 10:1 // Calculate voltage ratio double voltageRatio = TransformerCalculator.CalculateVoltageRatio(240, 120); // 240V to 120V = 2:1 // Calculate efficiency double efficiency = TransformerCalculator.CalculateEfficiency(1000, 1100); // 1000W out, 1100W in = 90.9% // Calculate power loss double powerLoss = TransformerCalculator.CalculatePowerLoss(1100, 1000); // 1100W in, 1000W out = 100W loss // Calculate voltage regulation double regulation = TransformerCalculator.CalculateVoltageRegulation(120, 115); // 120V no-load, 115V load = 4.35% // Calculate apparent power double apparentPower = TransformerCalculator.CalculateApparentPower(120, 10); // 120V, 10A = 1200VA AC Circuit Analysis using CircuitTool; // Calculate impedance double impedance = ACCircuitCalculator.CalculateImpedance(50, 30); // 50Ω resistance, 30Ω reactance = 58.31Ω // Calculate phase angle double phaseAngle = ACCircuitCalculator.CalculatePhaseAngle(50, 30); // 50Ω R, 30Ω X = 30.96° // Calculate power factor double powerFactor = ACCircuitCalculator.CalculatePowerFactor(30.96); // 30.96° phase angle = 0.857 // Calculate RMS from peak double rms = ACCircuitCalculator.CalculateRMS(170); // 170V peak = 120.21V RMS // Calculate peak from RMS double peak = ACCircuitCalculator.CalculatePeak(120); // 120V RMS = 169.74V peak // Calculate average from peak double average = ACCircuitCalculator.CalculateAverage(170); // 170V peak = 108.13V average // Calculate form factor double formFactor = ACCircuitCalculator.CalculateFormFactor(120, 108); // 120V RMS, 108V avg = 1.11 // Calculate crest factor double crestFactor = ACCircuitCalculator.CalculateCrestFactor(170, 120); // 170V peak, 120V RMS = 1.42 // Calculate Q factor double qFactor = ACCircuitCalculator.CalculateQFactor(30, 5); // 30Ω reactance, 5Ω resistance = 6 // Calculate bandwidth double bandwidth = ACCircuitCalculator.CalculateBandwidth(1000, 6); // 1kHz resonant, Q=6 = 166.67Hz Filter Calculations using CircuitTool; // Calculate RC low-pass filter cutoff frequency double cutoffFreq = FilterCalculator.CalculateRCLowPassCutoff(1000, 0.000001); // 1kΩ, 1μF = 159.15Hz // Calculate RC high-pass filter cutoff frequency double highPassCutoff = FilterCalculator.CalculateRCHighPassCutoff(1000, 0.000001); // 1kΩ, 1μF = 159.15Hz // Calculate RL low-pass filter cutoff frequency double rlCutoff = FilterCalculator.CalculateRLLowPassCutoff(100, 0.001); // 100Ω, 1mH = 15.92kHz // Calculate RL high-pass filter cutoff frequency double rlHighPass = FilterCalculator.CalculateRLHighPassCutoff(100, 0.001); // 100Ω, 1mH = 15.92kHz // Calculate filter gain in dB double gain = FilterCalculator.CalculateFilterGain(1000, 159.15); // 1kHz signal, 159.15Hz cutoff = -15.97dB // Calculate filter phase shift double phaseShift = FilterCalculator.CalculateFilterPhaseShift(1000, 159.15); // 1kHz signal, 159.15Hz cutoff = -80.96° // Calculate magnitude response double magnitude = FilterCalculator.CalculateMagnitudeResponse(1000, 159.15); // 1kHz signal, 159.15Hz cutoff = 0.158 // Calculate required resistor for RC filter double resistor = FilterCalculator.CalculateRequiredResistor(159.15, 0.000001); // 159.15Hz cutoff, 1μF = 1kΩ // Calculate required capacitor for RC filter double capacitor = FilterCalculator.CalculateRequiredCapacitor(159.15, 1000); // 159.15Hz cutoff, 1kΩ = 1μF Beginner Calculator Examples using CircuitTool; // Calculate battery life double hours = BeginnerCalculators.BatteryLifeCalculator(1000, 50); // 1000mAh, 50mA = 20 hours // Determine wire gauge int awgGauge = BeginnerCalculators.WireGaugeCalculator(3.0); // 3A = AWG 20 // Calculate RC time constant capacitor value double capacitor = BeginnerCalculators.RCTimeConstantCapacitor(1000, 0.001); // 1kΩ, 1ms = 1μF // Calculate RC oscillator frequency double frequency = BeginnerCalculators.RCOscillatorFrequency(1000, 0.000001); // 1kΩ, 1μF = ~455Hz // Convert power ratio to decibels double db = BeginnerCalculators.PowerRatioToDecibels(10); // 10x power = 10dB // Convert voltage ratio to decibels double dbVoltage = BeginnerCalculators.VoltageRatioToDecibels(2); // 2x voltage = 6.02dB // Calculate transformer turns ratio double turnsRatio = BeginnerCalculators.TransformerTurnsRatio(120, 12); // 120V to 12V = 0.1 ratio Power and Energy Calculations using CircuitTool; // Power factor calculations double apparentPower = PowerFactorCalculator.ApparentPower(1000, 0.8); // 1000W real, 0.8 PF = 1250VA double reactivePower = PowerFactorCalculator.ReactivePower(1000, 0.8); // 1000W real, 0.8 PF = 750VAR // Energy consumption calculations double monthlyCost = EnergyConsumptionCalculator.MonthlyCost(5000, 0.12); // 5kWh, $0.12/kWh = $600/month double carbonFootprint = EnergyConsumptionCalculator.CarbonFootprint(1000, 0.5); // 1kWh, 0.5kg/kWh = 0.5kg CO2 Unit Conversions using CircuitTool; // Convert between electrical units double milliamps = UnitConverter.AmperesToMilliamps(0.5); // 0.5A = 500mA double kilovolts = UnitConverter.VoltsToKilovolts(5000); // 5000V = 5kV double megaohms = UnitConverter.OhmsToMegaohms(2000000); // 2MΩ = 2000000Ω Package Distribution CircuitTool is available on multiple package registries: NuGet.org Package URL: https://www.nuget.org/packages/CircuitTool Installation: dotnet add package CircuitTool GitHub Packages Package URL: https://github.com/jomardyan/CircuitTool/packages Registry URL: https://nuget.pkg.github.com/jomardyan/index.json Installation: Requires GitHub authentication (see installation section above) Contributing We welcome contributions! Please feel free to submit pull requests or open issues for bugs and feature requests. Development Guidelines Follow C# coding standards and conventions Add XML documentation for all public methods Include unit tests for new functionality Update the README.md with usage examples License This project is licensed under the MIT License - see the LICENSE file for details. Changelog Version 2.0.0 (Current) Modern C# Features: Records for calculation results, pattern matching, init-only and required properties API Redesign: More consistent naming, better separation of concerns, immutable calculation objects Dependency Injection Support: Service-based architecture, configurable calculation engines, plugin system Integration Enhancements: Extension methods for popular UI frameworks, scientific computing integration, plugin system Web API Version: REST API, GraphQL support, real-time calculation updates Mobile Support: Xamarin/MAUI optimizations, touch-friendly APIs, offline calculation support Performance & Quality: SIMD/vectorized calculations, improved static analysis, enhanced documentation Previous changelog entries omitted for brevity. See https://github.com/jomardyan/CircuitTool/releases for full history. Support For questions, issues, or feature requests, please visit the GitHub repository or open an issue."
  },
  "docs/api/CircuitTool.ACCircuitCalculator.html": {
    "href": "docs/api/CircuitTool.ACCircuitCalculator.html",
    "title": "Class ACCircuitCalculator | CircuitTool Documentation",
    "summary": "Class ACCircuitCalculator Provides calculations for AC circuit analysis and characteristics. Inheritance object ACCircuitCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ACCircuitCalculator Methods | Edit this page View Source Bandwidth(double, double) Calculates the bandwidth of a resonant circuit using BW = f0 / Q. Declaration public static double Bandwidth(double resonantFrequency, double qualityFactor) Parameters Type Name Description double resonantFrequency Resonant frequency in hertz (Hz). double qualityFactor Quality factor (unitless). Returns Type Description double Bandwidth in hertz (Hz). | Edit this page View Source CrestFactor(double, double) Calculates the crest factor of a waveform (Crest Factor = Peak / RMS). Declaration public static double CrestFactor(double peakValue, double rmsValue) Parameters Type Name Description double peakValue Peak value. double rmsValue RMS value. Returns Type Description double Crest factor (unitless). | Edit this page View Source FormFactor(double, double) Calculates the form factor of a waveform (Form Factor = RMS / Average). Declaration public static double FormFactor(double rmsValue, double averageValue) Parameters Type Name Description double rmsValue RMS value. double averageValue Average value. Returns Type Description double Form factor (unitless). | Edit this page View Source ImpedanceMagnitude(double, double, double) Calculates the impedance magnitude of an RLC circuit using Z = √(R² + (XL - XC)²). Declaration public static double ImpedanceMagnitude(double resistance, double inductiveReactance, double capacitiveReactance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductiveReactance Inductive reactance in ohms (Ω). double capacitiveReactance Capacitive reactance in ohms (Ω). Returns Type Description double Impedance magnitude in ohms (Ω). | Edit this page View Source PeakToAverage(double) Calculates the average value of a sinusoidal waveform (Average = 2 × Peak / π). Declaration public static double PeakToAverage(double peakValue) Parameters Type Name Description double peakValue Peak value. Returns Type Description double Average value. | Edit this page View Source PeakToPeakToPeak(double) Calculates the peak-to-peak value from peak value (Peak-to-Peak = 2 × Peak). Declaration public static double PeakToPeakToPeak(double peakValue) Parameters Type Name Description double peakValue Peak value. Returns Type Description double Peak-to-peak value. | Edit this page View Source PeakToRMS(double) Calculates the RMS value from peak value (RMS = Peak / √2). Declaration public static double PeakToRMS(double peakValue) Parameters Type Name Description double peakValue Peak value. Returns Type Description double RMS value. | Edit this page View Source PhaseAngle(double, double, double) Calculates the phase angle of an RLC circuit using φ = arctan((XL - XC) / R). Declaration public static double PhaseAngle(double resistance, double inductiveReactance, double capacitiveReactance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductiveReactance Inductive reactance in ohms (Ω). double capacitiveReactance Capacitive reactance in ohms (Ω). Returns Type Description double Phase angle in degrees. | Edit this page View Source PowerFactor(double, double) Calculates the power factor using cos(φ) = R / Z. Declaration public static double PowerFactor(double resistance, double impedanceMagnitude) Parameters Type Name Description double resistance Resistance in ohms (Ω). double impedanceMagnitude Impedance magnitude in ohms (Ω). Returns Type Description double Power factor (unitless, between 0 and 1). | Edit this page View Source QualityFactor(double, double) Calculates the quality factor (Q) of a resonant circuit using Q = XL / R. Declaration public static double QualityFactor(double inductiveReactance, double resistance) Parameters Type Name Description double inductiveReactance Inductive reactance in ohms (Ω). double resistance Resistance in ohms (Ω). Returns Type Description double Quality factor (unitless). | Edit this page View Source RMSToPeak(double) Calculates the peak value from RMS value (Peak = RMS × √2). Declaration public static double RMSToPeak(double rmsValue) Parameters Type Name Description double rmsValue RMS value. Returns Type Description double Peak value."
  },
  "docs/api/CircuitTool.ACCurrent.html": {
    "href": "docs/api/CircuitTool.ACCurrent.html",
    "title": "Struct ACCurrent | CircuitTool Documentation",
    "summary": "Struct ACCurrent Represents an AC current with magnitude and phase Implements IEquatable<ACCurrent> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool Assembly: .dll Syntax public readonly struct ACCurrent : IEquatable<ACCurrent> Constructors | Edit this page View Source ACCurrent(double, double) Creates a new AC current from magnitude and phase Declaration public ACCurrent(double magnitude, double phase) Parameters Type Name Description double magnitude RMS magnitude in amperes double phase Phase angle in radians | Edit this page View Source ACCurrent(Complex) Creates a new AC current from a complex number Declaration public ACCurrent(Complex complex) Parameters Type Name Description Complex complex Complex representation Properties | Edit this page View Source Complex Gets the complex number representation Declaration public Complex Complex { get; } Property Value Type Description Complex | Edit this page View Source Imaginary Gets the imaginary component Declaration public double Imaginary { get; } Property Value Type Description double | Edit this page View Source Magnitude Gets the RMS magnitude in amperes Declaration public double Magnitude { get; } Property Value Type Description double | Edit this page View Source Peak Gets the peak current (magnitude * √2) Declaration public double Peak { get; } Property Value Type Description double | Edit this page View Source Phase Gets the phase angle in radians Declaration public double Phase { get; } Property Value Type Description double | Edit this page View Source PhaseDegrees Gets the phase angle in degrees Declaration public double PhaseDegrees { get; } Property Value Type Description double | Edit this page View Source Real Gets the real component Declaration public double Real { get; } Property Value Type Description double Methods | Edit this page View Source Equals(ACCurrent) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ACCurrent other) Parameters Type Name Description ACCurrent other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(string) Declaration public string ToString(string format) Parameters Type Name Description string format Returns Type Description string Operators | Edit this page View Source operator +(ACCurrent, ACCurrent) Declaration public static ACCurrent operator +(ACCurrent left, ACCurrent right) Parameters Type Name Description ACCurrent left ACCurrent right Returns Type Description ACCurrent | Edit this page View Source operator /(ACCurrent, Complex) Declaration public static ACCurrent operator /(ACCurrent current, Complex scalar) Parameters Type Name Description ACCurrent current Complex scalar Returns Type Description ACCurrent | Edit this page View Source operator ==(ACCurrent, ACCurrent) Declaration public static bool operator ==(ACCurrent left, ACCurrent right) Parameters Type Name Description ACCurrent left ACCurrent right Returns Type Description bool | Edit this page View Source operator !=(ACCurrent, ACCurrent) Declaration public static bool operator !=(ACCurrent left, ACCurrent right) Parameters Type Name Description ACCurrent left ACCurrent right Returns Type Description bool | Edit this page View Source operator *(ACCurrent, Complex) Declaration public static ACCurrent operator *(ACCurrent current, Complex scalar) Parameters Type Name Description ACCurrent current Complex scalar Returns Type Description ACCurrent | Edit this page View Source operator *(Complex, ACCurrent) Declaration public static ACCurrent operator *(Complex scalar, ACCurrent current) Parameters Type Name Description Complex scalar ACCurrent current Returns Type Description ACCurrent | Edit this page View Source operator -(ACCurrent, ACCurrent) Declaration public static ACCurrent operator -(ACCurrent left, ACCurrent right) Parameters Type Name Description ACCurrent left ACCurrent right Returns Type Description ACCurrent Implements IEquatable<T>"
  },
  "docs/api/CircuitTool.ACVoltage.html": {
    "href": "docs/api/CircuitTool.ACVoltage.html",
    "title": "Struct ACVoltage | CircuitTool Documentation",
    "summary": "Struct ACVoltage Represents an AC voltage with magnitude and phase Implements IEquatable<ACVoltage> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool Assembly: .dll Syntax public readonly struct ACVoltage : IEquatable<ACVoltage> Constructors | Edit this page View Source ACVoltage(double, double) Creates a new AC voltage from magnitude and phase Declaration public ACVoltage(double magnitude, double phase) Parameters Type Name Description double magnitude RMS magnitude in volts double phase Phase angle in radians | Edit this page View Source ACVoltage(Complex) Creates a new AC voltage from a complex number Declaration public ACVoltage(Complex complex) Parameters Type Name Description Complex complex Complex representation Properties | Edit this page View Source Complex Gets the complex number representation Declaration public Complex Complex { get; } Property Value Type Description Complex | Edit this page View Source Imaginary Gets the imaginary component Declaration public double Imaginary { get; } Property Value Type Description double | Edit this page View Source Magnitude Gets the RMS magnitude in volts Declaration public double Magnitude { get; } Property Value Type Description double | Edit this page View Source Peak Gets the peak voltage (magnitude * √2) Declaration public double Peak { get; } Property Value Type Description double | Edit this page View Source PeakToPeak Gets the peak-to-peak voltage (peak * 2) Declaration public double PeakToPeak { get; } Property Value Type Description double | Edit this page View Source Phase Gets the phase angle in radians Declaration public double Phase { get; } Property Value Type Description double | Edit this page View Source PhaseDegrees Gets the phase angle in degrees Declaration public double PhaseDegrees { get; } Property Value Type Description double | Edit this page View Source Real Gets the real component Declaration public double Real { get; } Property Value Type Description double Methods | Edit this page View Source Equals(ACVoltage) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ACVoltage other) Parameters Type Name Description ACVoltage other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(string) Declaration public string ToString(string format) Parameters Type Name Description string format Returns Type Description string Operators | Edit this page View Source operator +(ACVoltage, ACVoltage) Declaration public static ACVoltage operator +(ACVoltage left, ACVoltage right) Parameters Type Name Description ACVoltage left ACVoltage right Returns Type Description ACVoltage | Edit this page View Source operator /(ACVoltage, Complex) Declaration public static ACVoltage operator /(ACVoltage voltage, Complex scalar) Parameters Type Name Description ACVoltage voltage Complex scalar Returns Type Description ACVoltage | Edit this page View Source operator ==(ACVoltage, ACVoltage) Declaration public static bool operator ==(ACVoltage left, ACVoltage right) Parameters Type Name Description ACVoltage left ACVoltage right Returns Type Description bool | Edit this page View Source operator !=(ACVoltage, ACVoltage) Declaration public static bool operator !=(ACVoltage left, ACVoltage right) Parameters Type Name Description ACVoltage left ACVoltage right Returns Type Description bool | Edit this page View Source operator *(ACVoltage, Complex) Declaration public static ACVoltage operator *(ACVoltage voltage, Complex scalar) Parameters Type Name Description ACVoltage voltage Complex scalar Returns Type Description ACVoltage | Edit this page View Source operator *(Complex, ACVoltage) Declaration public static ACVoltage operator *(Complex scalar, ACVoltage voltage) Parameters Type Name Description Complex scalar ACVoltage voltage Returns Type Description ACVoltage | Edit this page View Source operator -(ACVoltage, ACVoltage) Declaration public static ACVoltage operator -(ACVoltage left, ACVoltage right) Parameters Type Name Description ACVoltage left ACVoltage right Returns Type Description ACVoltage Implements IEquatable<T>"
  },
  "docs/api/CircuitTool.Admittance.html": {
    "href": "docs/api/CircuitTool.Admittance.html",
    "title": "Struct Admittance | CircuitTool Documentation",
    "summary": "Struct Admittance Represents complex admittance for AC circuit analysis Implements IEquatable<Admittance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool Assembly: .dll Syntax public readonly struct Admittance : IEquatable<Admittance> Constructors | Edit this page View Source Admittance(Complex) Creates a new admittance from a complex number Declaration public Admittance(Complex complex) Parameters Type Name Description Complex complex Complex representation Properties | Edit this page View Source Complex Gets the complex number representation Declaration public Complex Complex { get; } Property Value Type Description Complex | Edit this page View Source Conductance Gets the conductance component in siemens Declaration public double Conductance { get; } Property Value Type Description double | Edit this page View Source Impedance Gets the impedance (1/Y) Declaration public Impedance Impedance { get; } Property Value Type Description Impedance | Edit this page View Source Magnitude Gets the magnitude in siemens Declaration public double Magnitude { get; } Property Value Type Description double | Edit this page View Source Susceptance Gets the susceptance component in siemens Declaration public double Susceptance { get; } Property Value Type Description double Methods | Edit this page View Source Equals(Admittance) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Admittance other) Parameters Type Name Description Admittance other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() Operators | Edit this page View Source operator +(Admittance, Admittance) Declaration public static Admittance operator +(Admittance left, Admittance right) Parameters Type Name Description Admittance left Admittance right Returns Type Description Admittance | Edit this page View Source operator ==(Admittance, Admittance) Declaration public static bool operator ==(Admittance left, Admittance right) Parameters Type Name Description Admittance left Admittance right Returns Type Description bool | Edit this page View Source operator !=(Admittance, Admittance) Declaration public static bool operator !=(Admittance left, Admittance right) Parameters Type Name Description Admittance left Admittance right Returns Type Description bool | Edit this page View Source operator -(Admittance, Admittance) Declaration public static Admittance operator -(Admittance left, Admittance right) Parameters Type Name Description Admittance left Admittance right Returns Type Description Admittance Implements IEquatable<T>"
  },
  "docs/api/CircuitTool.Analysis.DesignCenteringResult.html": {
    "href": "docs/api/CircuitTool.Analysis.DesignCenteringResult.html",
    "title": "Struct DesignCenteringResult | CircuitTool Documentation",
    "summary": "Struct DesignCenteringResult Results from design centering optimization Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Analysis Assembly: .dll Syntax public readonly struct DesignCenteringResult Constructors | Edit this page View Source DesignCenteringResult(double[], double, int) Declaration public DesignCenteringResult(double[] optimizedValues, double yield, int iterations) Parameters Type Name Description double[] optimizedValues double yield int iterations Properties | Edit this page View Source Iterations Declaration public int Iterations { get; } Property Value Type Description int | Edit this page View Source OptimizedValues Declaration public double[] OptimizedValues { get; } Property Value Type Description double[] | Edit this page View Source Yield Declaration public double Yield { get; } Property Value Type Description double | Edit this page View Source YieldPercent Declaration public double YieldPercent { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Analysis.SensitivityResult.html": {
    "href": "docs/api/CircuitTool.Analysis.SensitivityResult.html",
    "title": "Struct SensitivityResult | CircuitTool Documentation",
    "summary": "Struct SensitivityResult Results from sensitivity analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Analysis Assembly: .dll Syntax public readonly struct SensitivityResult Constructors | Edit this page View Source SensitivityResult(double, double[]) Declaration public SensitivityResult(double nominalValue, double[] sensitivities) Parameters Type Name Description double nominalValue double[] sensitivities Properties | Edit this page View Source MostSensitiveComponent Gets the index of the component with highest sensitivity Declaration public int MostSensitiveComponent { get; } Property Value Type Description int | Edit this page View Source NominalValue Declaration public double NominalValue { get; } Property Value Type Description double | Edit this page View Source Sensitivities Declaration public double[] Sensitivities { get; } Property Value Type Description double[] Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Analysis.StandardTolerances.Capacitor.html": {
    "href": "docs/api/CircuitTool.Analysis.StandardTolerances.Capacitor.html",
    "title": "Class StandardTolerances.Capacitor | CircuitTool Documentation",
    "summary": "Class StandardTolerances.Capacitor Standard capacitor tolerances Inheritance object StandardTolerances.Capacitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Analysis Assembly: .dll Syntax public static class StandardTolerances.Capacitor Fields | Edit this page View Source C0G_10Percent Declaration public const double C0G_10Percent = 0.1 Field Value Type Description double | Edit this page View Source C0G_5Percent Declaration public const double C0G_5Percent = 0.05 Field Value Type Description double | Edit this page View Source Electrolytic_20Percent Declaration public const double Electrolytic_20Percent = 0.2 Field Value Type Description double | Edit this page View Source Electrolytic_Minus20Plus80 Declaration public const double Electrolytic_Minus20Plus80 = 0.5 Field Value Type Description double | Edit this page View Source X7R_10Percent Declaration public const double X7R_10Percent = 0.1 Field Value Type Description double | Edit this page View Source X7R_20Percent Declaration public const double X7R_20Percent = 0.2 Field Value Type Description double"
  },
  "docs/api/CircuitTool.Analysis.StandardTolerances.Inductor.html": {
    "href": "docs/api/CircuitTool.Analysis.StandardTolerances.Inductor.html",
    "title": "Class StandardTolerances.Inductor | CircuitTool Documentation",
    "summary": "Class StandardTolerances.Inductor Standard inductor tolerances Inheritance object StandardTolerances.Inductor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Analysis Assembly: .dll Syntax public static class StandardTolerances.Inductor Fields | Edit this page View Source Precision_1Percent Declaration public const double Precision_1Percent = 0.01 Field Value Type Description double | Edit this page View Source Standard_10Percent Declaration public const double Standard_10Percent = 0.1 Field Value Type Description double | Edit this page View Source Standard_20Percent Declaration public const double Standard_20Percent = 0.2 Field Value Type Description double | Edit this page View Source Standard_5Percent Declaration public const double Standard_5Percent = 0.05 Field Value Type Description double"
  },
  "docs/api/CircuitTool.Analysis.StandardTolerances.Resistor.html": {
    "href": "docs/api/CircuitTool.Analysis.StandardTolerances.Resistor.html",
    "title": "Class StandardTolerances.Resistor | CircuitTool Documentation",
    "summary": "Class StandardTolerances.Resistor Standard resistor tolerances Inheritance object StandardTolerances.Resistor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Analysis Assembly: .dll Syntax public static class StandardTolerances.Resistor Fields | Edit this page View Source E12_10Percent Declaration public const double E12_10Percent = 0.1 Field Value Type Description double | Edit this page View Source E24_5Percent Declaration public const double E24_5Percent = 0.05 Field Value Type Description double | Edit this page View Source E48_2Percent Declaration public const double E48_2Percent = 0.02 Field Value Type Description double | Edit this page View Source E6_20Percent Declaration public const double E6_20Percent = 0.2 Field Value Type Description double | Edit this page View Source E96_1Percent Declaration public const double E96_1Percent = 0.01 Field Value Type Description double"
  },
  "docs/api/CircuitTool.Analysis.StandardTolerances.html": {
    "href": "docs/api/CircuitTool.Analysis.StandardTolerances.html",
    "title": "Class StandardTolerances | CircuitTool Documentation",
    "summary": "Class StandardTolerances Component tolerance standards for common component types Inheritance object StandardTolerances Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Analysis Assembly: .dll Syntax public static class StandardTolerances"
  },
  "docs/api/CircuitTool.Analysis.StatisticalResult.html": {
    "href": "docs/api/CircuitTool.Analysis.StatisticalResult.html",
    "title": "Struct StatisticalResult | CircuitTool Documentation",
    "summary": "Struct StatisticalResult Results from statistical analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Analysis Assembly: .dll Syntax public readonly struct StatisticalResult Constructors | Edit this page View Source StatisticalResult(double, double, double) Declaration public StatisticalResult(double nominalValue, double standardDeviation, double toleranceEstimate) Parameters Type Name Description double nominalValue double standardDeviation double toleranceEstimate Properties | Edit this page View Source NominalValue Declaration public double NominalValue { get; } Property Value Type Description double | Edit this page View Source SixSigmaBounds Gets the 6-sigma bounds (99.9999% confidence) Declaration public (double lower, double upper) SixSigmaBounds { get; } Property Value Type Description (double referenceResistor, double biasVoltage) | Edit this page View Source StandardDeviation Declaration public double StandardDeviation { get; } Property Value Type Description double | Edit this page View Source ThreeSigmaBounds Gets the 3-sigma bounds (99.7% confidence) Declaration public (double lower, double upper) ThreeSigmaBounds { get; } Property Value Type Description (double referenceResistor, double biasVoltage) | Edit this page View Source ToleranceEstimate Declaration public double ToleranceEstimate { get; } Property Value Type Description double | Edit this page View Source TolerancePercent Declaration public double TolerancePercent { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Analysis.ToleranceAnalysis.html": {
    "href": "docs/api/CircuitTool.Analysis.ToleranceAnalysis.html",
    "title": "Class ToleranceAnalysis | CircuitTool Documentation",
    "summary": "Class ToleranceAnalysis Provides tolerance and error analysis for electrical circuits Inheritance object ToleranceAnalysis Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Analysis Assembly: .dll Syntax public static class ToleranceAnalysis Methods | Edit this page View Source DesignCentering(double[], double[], Func<double[], double>, double, int) Performs design centering to minimize sensitivity Declaration public static DesignCenteringResult DesignCentering(double[] initialValues, double[] tolerances, Func<double[], double> calculator, double targetValue, int maxIterations = 100) Parameters Type Name Description double[] initialValues Initial component values double[] tolerances Component tolerances Func<double[], double> calculator Function to calculate circuit response double targetValue Target output value int maxIterations Maximum optimization iterations Returns Type Description DesignCenteringResult Design centering results | Edit this page View Source SensitivityAnalysis(double[], Func<double[], double>, double) Calculates sensitivity of output to each component Declaration public static SensitivityResult SensitivityAnalysis(double[] nominalValues, Func<double[], double> calculator, double deltaPercent = 1) Parameters Type Name Description double[] nominalValues Nominal component values Func<double[], double> calculator Function to calculate circuit response double deltaPercent Percentage change for sensitivity calculation Returns Type Description SensitivityResult Sensitivity analysis results | Edit this page View Source StatisticalAnalysis(double[], double[], Func<double[], double>) Calculates statistical analysis using component tolerances Declaration public static StatisticalResult StatisticalAnalysis(double[] nominalValues, double[] tolerances, Func<double[], double> calculator) Parameters Type Name Description double[] nominalValues Nominal component values double[] tolerances Component tolerances (as fractions) Func<double[], double> calculator Function to calculate circuit response Returns Type Description StatisticalResult Statistical analysis results | Edit this page View Source WorstCaseAnalysis(double[], double[], Func<double[], double>) Performs worst-case analysis for circuit parameters Declaration public static WorstCaseResult WorstCaseAnalysis(double[] nominalValues, double[] tolerances, Func<double[], double> calculator) Parameters Type Name Description double[] nominalValues Nominal component values double[] tolerances Component tolerances (as fractions) Func<double[], double> calculator Function to calculate circuit response Returns Type Description WorstCaseResult Worst-case analysis results"
  },
  "docs/api/CircuitTool.Analysis.WorstCaseResult.html": {
    "href": "docs/api/CircuitTool.Analysis.WorstCaseResult.html",
    "title": "Struct WorstCaseResult | CircuitTool Documentation",
    "summary": "Struct WorstCaseResult Results from worst-case analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Analysis Assembly: .dll Syntax public readonly struct WorstCaseResult Constructors | Edit this page View Source WorstCaseResult(double, double, double) Declaration public WorstCaseResult(double nominalValue, double minimumValue, double maximumValue) Parameters Type Name Description double nominalValue double minimumValue double maximumValue Properties | Edit this page View Source MaximumValue Declaration public double MaximumValue { get; } Property Value Type Description double | Edit this page View Source MinimumValue Declaration public double MinimumValue { get; } Property Value Type Description double | Edit this page View Source NominalValue Declaration public double NominalValue { get; } Property Value Type Description double | Edit this page View Source Range Declaration public double Range { get; } Property Value Type Description double | Edit this page View Source TolerancePercent Declaration public double TolerancePercent { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Analysis.html": {
    "href": "docs/api/CircuitTool.Analysis.html",
    "title": "Namespace CircuitTool.Analysis | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Analysis Classes StandardTolerances Component tolerance standards for common component types StandardTolerances.Capacitor Standard capacitor tolerances StandardTolerances.Inductor Standard inductor tolerances StandardTolerances.Resistor Standard resistor tolerances ToleranceAnalysis Provides tolerance and error analysis for electrical circuits Structs DesignCenteringResult Results from design centering optimization SensitivityResult Results from sensitivity analysis StatisticalResult Results from statistical analysis WorstCaseResult Results from worst-case analysis"
  },
  "docs/api/CircuitTool.AntennaCalculator.html": {
    "href": "docs/api/CircuitTool.AntennaCalculator.html",
    "title": "Class AntennaCalculator | CircuitTool Documentation",
    "summary": "Class AntennaCalculator Provides calculations for antenna design and analysis Inheritance object AntennaCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class AntennaCalculator Methods | Edit this page View Source AntennaGain(double, double) Calculates antenna gain in dB for a given directivity and efficiency Declaration public static double AntennaGain(double directivity, double efficiency) Parameters Type Name Description double directivity Directivity in linear scale double efficiency Efficiency (0-1) Returns Type Description double Gain in dB | Edit this page View Source CalculateVSWR(double) Calculates the VSWR (Voltage Standing Wave Ratio) from reflection coefficient Declaration public static double CalculateVSWR(double reflectionCoefficient) Parameters Type Name Description double reflectionCoefficient Reflection coefficient magnitude (0-1) Returns Type Description double VSWR | Edit this page View Source DipoleImpedance(double, double) Calculates the characteristic impedance of a dipole antenna Declaration public static double DipoleImpedance(double wireRadius, double frequency) Parameters Type Name Description double wireRadius Wire radius in meters double frequency Frequency in Hz Returns Type Description double Characteristic impedance in ohms | Edit this page View Source EffectiveRadiatedPower(double, double, double) Calculates the effective radiated power (ERP) Declaration public static double EffectiveRadiatedPower(double transmitterPower, double antennaGainDb, double feedlineLossDb) Parameters Type Name Description double transmitterPower Transmitter power in watts double antennaGainDb Antenna gain in dB double feedlineLossDb Feedline loss in dB Returns Type Description double ERP in watts | Edit this page View Source HalfWaveLength(double, double) Calculates the physical length of a half-wave antenna Declaration public static double HalfWaveLength(double frequency, double velocityFactor = 0.95) Parameters Type Name Description double frequency Frequency in Hz double velocityFactor Velocity factor (default 0.95 for typical wire) Returns Type Description double Physical length in meters | Edit this page View Source QuarterWaveLength(double, double) Calculates the physical length of a quarter-wave antenna Declaration public static double QuarterWaveLength(double frequency, double velocityFactor = 0.95) Parameters Type Name Description double frequency Frequency in Hz double velocityFactor Velocity factor (default 0.95 for typical wire) Returns Type Description double Physical length in meters"
  },
  "docs/api/CircuitTool.ArduinoTools.html": {
    "href": "docs/api/CircuitTool.ArduinoTools.html",
    "title": "Class ArduinoTools | CircuitTool Documentation",
    "summary": "Class ArduinoTools Provides Arduino-specific calculations and utilities Inheritance object ArduinoTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ArduinoTools Methods | Edit this page View Source AnalogToVoltage(int, double) Converts analog reading to voltage for Arduino Uno (10-bit ADC, 5V reference) Declaration public static double AnalogToVoltage(int analogReading, double referenceVoltage = 5) Parameters Type Name Description int analogReading Analog reading value (0-1023) double referenceVoltage Reference voltage (default 5V for Arduino Uno) Returns Type Description double Voltage value | Edit this page View Source CalculateCurrentConsumption(double, int, int, double) Calculates current consumption for Arduino projects Declaration public static double CalculateCurrentConsumption(double cpuCurrent = 20, int digitalPins = 0, int analogPins = 0, double additionalCurrent = 0) Parameters Type Name Description double cpuCurrent CPU current consumption (mA) int digitalPins Number of active digital pins int analogPins Number of active analog pins double additionalCurrent Additional current from external components (mA) Returns Type Description double Total current consumption in mA | Edit this page View Source CalculatePWMFrequency(int, double) Calculates PWM frequency for Arduino Timer Declaration public static double CalculatePWMFrequency(int prescaler, double clockFrequency = 16000000) Parameters Type Name Description int prescaler Timer prescaler value double clockFrequency Arduino clock frequency in Hz (default 16MHz) Returns Type Description double PWM frequency in Hz | Edit this page View Source ServoAngleToPulseWidth(double) Calculates delay time between servo pulses for specific angle Declaration public static double ServoAngleToPulseWidth(double angle) Parameters Type Name Description double angle Servo angle in degrees (0-180) Returns Type Description double Pulse width in microseconds | Edit this page View Source VoltageToAnalog(double, double) Converts voltage to analog reading for Arduino Uno Declaration public static int VoltageToAnalog(double voltage, double referenceVoltage = 5) Parameters Type Name Description double voltage Voltage value double referenceVoltage Reference voltage (default 5V for Arduino Uno) Returns Type Description int Analog reading value (0-1023)"
  },
  "docs/api/CircuitTool.Async.AsyncCalculations.html": {
    "href": "docs/api/CircuitTool.Async.AsyncCalculations.html",
    "title": "Class AsyncCalculations | CircuitTool Documentation",
    "summary": "Class AsyncCalculations Provides asynchronous versions of complex electrical calculations Inheritance object AsyncCalculations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Async Assembly: .dll Syntax public static class AsyncCalculations Methods | Edit this page View Source FrequencySweepAsync(double, double, int, Func<double, Complex>, CancellationToken) Performs frequency sweep analysis asynchronously Declaration public static Task<FrequencyResponse> FrequencySweepAsync(double startFrequency, double stopFrequency, int points, Func<double, Complex> calculator, CancellationToken cancellationToken = default) Parameters Type Name Description double startFrequency Start frequency in Hz double stopFrequency Stop frequency in Hz int points Number of frequency points Func<double, Complex> calculator Function to calculate response at each frequency CancellationToken cancellationToken Cancellation token Returns Type Description Task<FrequencyResponse> Frequency response results | Edit this page View Source HarmonicAnalysisAsync(double, int, Func<double, Complex>, CancellationToken) Performs harmonic analysis asynchronously Declaration public static Task<HarmonicAnalysis> HarmonicAnalysisAsync(double fundamentalFrequency, int harmonics, Func<double, Complex> calculator, CancellationToken cancellationToken = default) Parameters Type Name Description double fundamentalFrequency Fundamental frequency in Hz int harmonics Number of harmonics to analyze Func<double, Complex> calculator Function to calculate response at each harmonic CancellationToken cancellationToken Cancellation token Returns Type Description Task<HarmonicAnalysis> Harmonic analysis results | Edit this page View Source MonteCarloAnalysisAsync(double[], double[], int, Func<double[], double>, CancellationToken) Performs Monte Carlo analysis of circuit with component tolerances asynchronously Declaration public static Task<MonteCarloResult> MonteCarloAnalysisAsync(double[] nominalValues, double[] tolerances, int iterations, Func<double[], double> calculator, CancellationToken cancellationToken = default) Parameters Type Name Description double[] nominalValues Nominal component values double[] tolerances Component tolerances (e.g., 0.05 for 5%) int iterations Number of Monte Carlo iterations Func<double[], double> calculator Function to calculate circuit response CancellationToken cancellationToken Cancellation token Returns Type Description Task<MonteCarloResult> Monte Carlo analysis results | Edit this page View Source ThermalAnalysisAsync(double, double, double, double, int, double, CancellationToken) Performs thermal analysis with iterative calculations asynchronously Declaration public static Task<ThermalResult> ThermalAnalysisAsync(double power, double thermalResistance, double ambientTemperature, double temperatureCoefficient, int maxIterations = 100, double tolerance = 1E-06, CancellationToken cancellationToken = default) Parameters Type Name Description double power Power dissipation in watts double thermalResistance Thermal resistance in °C/W double ambientTemperature Ambient temperature in °C double temperatureCoefficient Temperature coefficient int maxIterations Maximum number of iterations double tolerance Convergence tolerance CancellationToken cancellationToken Cancellation token Returns Type Description Task<ThermalResult> Thermal analysis results"
  },
  "docs/api/CircuitTool.Async.FrequencyResponse.html": {
    "href": "docs/api/CircuitTool.Async.FrequencyResponse.html",
    "title": "Struct FrequencyResponse | CircuitTool Documentation",
    "summary": "Struct FrequencyResponse Results from frequency response analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Async Assembly: .dll Syntax public readonly struct FrequencyResponse Constructors | Edit this page View Source FrequencyResponse(double[], Complex[]) Declaration public FrequencyResponse(double[] frequencies, Complex[] responses) Parameters Type Name Description double[] frequencies Complex[] responses Properties | Edit this page View Source Frequencies Declaration public double[] Frequencies { get; } Property Value Type Description double[] | Edit this page View Source Magnitudes Declaration public double[] Magnitudes { get; } Property Value Type Description double[] | Edit this page View Source Phases Declaration public double[] Phases { get; } Property Value Type Description double[] | Edit this page View Source PhasesInDegrees Declaration public double[] PhasesInDegrees { get; } Property Value Type Description double[] | Edit this page View Source Responses Declaration public Complex[] Responses { get; } Property Value Type Description Complex[] Methods | Edit this page View Source GetMagnitudePeak() Declaration public (double frequency, double magnitude) GetMagnitudePeak() Returns Type Description (double referenceResistor, double biasVoltage)"
  },
  "docs/api/CircuitTool.Async.HarmonicAnalysis.html": {
    "href": "docs/api/CircuitTool.Async.HarmonicAnalysis.html",
    "title": "Struct HarmonicAnalysis | CircuitTool Documentation",
    "summary": "Struct HarmonicAnalysis Results from harmonic analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Async Assembly: .dll Syntax public readonly struct HarmonicAnalysis Constructors | Edit this page View Source HarmonicAnalysis(double, double[], Complex[]) Declaration public HarmonicAnalysis(double fundamentalFrequency, double[] harmonicFrequencies, Complex[] responses) Parameters Type Name Description double fundamentalFrequency double[] harmonicFrequencies Complex[] responses Properties | Edit this page View Source FundamentalFrequency Declaration public double FundamentalFrequency { get; } Property Value Type Description double | Edit this page View Source HarmonicFrequencies Declaration public double[] HarmonicFrequencies { get; } Property Value Type Description double[] | Edit this page View Source Magnitudes Declaration public double[] Magnitudes { get; } Property Value Type Description double[] | Edit this page View Source Responses Declaration public Complex[] Responses { get; } Property Value Type Description Complex[] | Edit this page View Source TotalHarmonicDistortion Declaration public double TotalHarmonicDistortion { get; } Property Value Type Description double"
  },
  "docs/api/CircuitTool.Async.MonteCarloResult.html": {
    "href": "docs/api/CircuitTool.Async.MonteCarloResult.html",
    "title": "Struct MonteCarloResult | CircuitTool Documentation",
    "summary": "Struct MonteCarloResult Results from Monte Carlo analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Async Assembly: .dll Syntax public readonly struct MonteCarloResult Constructors | Edit this page View Source MonteCarloResult(double[]) Declaration public MonteCarloResult(double[] results) Parameters Type Name Description double[] results Properties | Edit this page View Source Maximum Declaration public double Maximum { get; } Property Value Type Description double | Edit this page View Source Mean Declaration public double Mean { get; } Property Value Type Description double | Edit this page View Source Minimum Declaration public double Minimum { get; } Property Value Type Description double | Edit this page View Source SampleCount Declaration public int SampleCount { get; } Property Value Type Description int | Edit this page View Source StandardDeviation Declaration public double StandardDeviation { get; } Property Value Type Description double Methods | Edit this page View Source GetPercentile(double) Declaration public double GetPercentile(double percentile) Parameters Type Name Description double percentile Returns Type Description double | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Async.ThermalResult.html": {
    "href": "docs/api/CircuitTool.Async.ThermalResult.html",
    "title": "Struct ThermalResult | CircuitTool Documentation",
    "summary": "Struct ThermalResult Results from thermal analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Async Assembly: .dll Syntax public readonly struct ThermalResult Constructors | Edit this page View Source ThermalResult(double, int, bool) Declaration public ThermalResult(double temperature, int iterations, bool converged) Parameters Type Name Description double temperature int iterations bool converged Properties | Edit this page View Source Converged Declaration public bool Converged { get; } Property Value Type Description bool | Edit this page View Source Iterations Declaration public int Iterations { get; } Property Value Type Description int | Edit this page View Source Temperature Declaration public double Temperature { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.Async.html": {
    "href": "docs/api/CircuitTool.Async.html",
    "title": "Namespace CircuitTool.Async | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Async Classes AsyncCalculations Provides asynchronous versions of complex electrical calculations Structs FrequencyResponse Results from frequency response analysis HarmonicAnalysis Results from harmonic analysis MonteCarloResult Results from Monte Carlo analysis ThermalResult Results from thermal analysis"
  },
  "docs/api/CircuitTool.BeginnerCalculators.html": {
    "href": "docs/api/CircuitTool.BeginnerCalculators.html",
    "title": "Class BeginnerCalculators | CircuitTool Documentation",
    "summary": "Class BeginnerCalculators Popular calculators for electronics beginners Inheritance object BeginnerCalculators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class BeginnerCalculators Methods | Edit this page View Source BatteryLifeCalculator(double, double) Calculates battery life for simple circuits Declaration public static double BatteryLifeCalculator(double batteryCapacity, double loadCurrent) Parameters Type Name Description double batteryCapacity Battery capacity in mAh double loadCurrent Load current in mA Returns Type Description double Battery life in hours | Edit this page View Source InductorTurnsCalculator(double, double, double, double) Calculates the number of turns for a basic inductor Declaration public static int InductorTurnsCalculator(double inductance, double coreDiameter, double coreLength, double permeability = 1) Parameters Type Name Description double inductance Desired inductance in microhenries (µH) double coreDiameter Core diameter in mm double coreLength Core length in mm double permeability Core permeability (default 1 for air core) Returns Type Description int Number of turns needed | Edit this page View Source PowerRatioToDecibels(double) Calculates decibel (dB) from power ratio Declaration public static double PowerRatioToDecibels(double powerRatio) Parameters Type Name Description double powerRatio Power ratio (Pout/Pin) Returns Type Description double Decibel value | Edit this page View Source RCOscillatorFrequency(double, double) Calculates frequency for RC oscillator circuit Declaration public static double RCOscillatorFrequency(double resistance, double capacitance) Parameters Type Name Description double resistance Resistance in Ohms double capacitance Capacitance in Farads Returns Type Description double Oscillation frequency in Hz | Edit this page View Source RCTimeConstantCapacitor(double, double) Calculates capacitor value for RC time constant Declaration public static double RCTimeConstantCapacitor(double resistance, double timeConstant) Parameters Type Name Description double resistance Resistance in Ohms double timeConstant Desired time constant in seconds Returns Type Description double Capacitor value in Farads | Edit this page View Source TransformerTurnsRatio(double, double) Calculates transformer turns ratio Declaration public static double TransformerTurnsRatio(double primaryVoltage, double secondaryVoltage) Parameters Type Name Description double primaryVoltage Primary voltage double secondaryVoltage Secondary voltage Returns Type Description double Turns ratio (Ns/Np) | Edit this page View Source VoltageRatioToDecibels(double) Calculates decibel (dB) from voltage ratio Declaration public static double VoltageRatioToDecibels(double voltageRatio) Parameters Type Name Description double voltageRatio Voltage ratio (Vout/Vin) Returns Type Description double Decibel value | Edit this page View Source WireGaugeCalculator(double, double) Calculates wire gauge (AWG) needed for a given current Declaration public static int WireGaugeCalculator(double current, double safetyFactor = 1.5) Parameters Type Name Description double current Current in Amperes double safetyFactor Safety factor (default 1.5) Returns Type Description int Recommended AWG wire gauge"
  },
  "docs/api/CircuitTool.Calculators.ComponentCalculator.html": {
    "href": "docs/api/CircuitTool.Calculators.ComponentCalculator.html",
    "title": "Class ComponentCalculator | CircuitTool Documentation",
    "summary": "Class ComponentCalculator Provides calculations for resistors, capacitors, and inductors. Inheritance object ComponentCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Calculators Assembly: .dll Syntax public static class ComponentCalculator Methods | Edit this page View Source CapacitiveReactance(double, double) Declaration public static double CapacitiveReactance(double frequency, double capacitance) Parameters Type Name Description double frequency double capacitance Returns Type Description double | Edit this page View Source CapacitorEnergyStored(double, double) Declaration public static double CapacitorEnergyStored(double capacitance, double voltage) Parameters Type Name Description double capacitance double voltage Returns Type Description double | Edit this page View Source InductiveReactance(double, double) Declaration public static double InductiveReactance(double frequency, double inductance) Parameters Type Name Description double frequency double inductance Returns Type Description double | Edit this page View Source InductorEnergyStored(double, double) Declaration public static double InductorEnergyStored(double inductance, double current) Parameters Type Name Description double inductance double current Returns Type Description double | Edit this page View Source ParallelResistance(params double[]) Declaration public static double ParallelResistance(params double[] resistors) Parameters Type Name Description double[] resistors Returns Type Description double | Edit this page View Source RCTimeConstant(double, double) Declaration public static double RCTimeConstant(double resistance, double capacitance) Parameters Type Name Description double resistance double capacitance Returns Type Description double | Edit this page View Source RLTimeConstant(double, double) Declaration public static double RLTimeConstant(double inductance, double resistance) Parameters Type Name Description double inductance double resistance Returns Type Description double | Edit this page View Source Resistance(double, double) Declaration public static double Resistance(double voltage, double current) Parameters Type Name Description double voltage double current Returns Type Description double | Edit this page View Source SeriesResistance(params double[]) Declaration public static double SeriesResistance(params double[] resistors) Parameters Type Name Description double[] resistors Returns Type Description double"
  },
  "docs/api/CircuitTool.Calculators.html": {
    "href": "docs/api/CircuitTool.Calculators.html",
    "title": "Namespace CircuitTool.Calculators | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Calculators Classes ComponentCalculator Provides calculations for resistors, capacitors, and inductors."
  },
  "docs/api/CircuitTool.CapacitorCalculator.html": {
    "href": "docs/api/CircuitTool.CapacitorCalculator.html",
    "title": "Class CapacitorCalculator | CircuitTool Documentation",
    "summary": "Class CapacitorCalculator Provides easy-to-use methods for capacitor circuit calculations, including reactance, energy, time constants, and more. Inheritance object CapacitorCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class CapacitorCalculator Remarks Example usage: double xc = CapacitorCalculator.CapacitiveReactance(1000, 0.000001); // 159.15 Ohms double energy = CapacitorCalculator.EnergyStored(0.001, 5); // 0.0125 J double tau = CapacitorCalculator.TimeConstant(1000, 0.000001); // 0.001 s double cSeries = CapacitorCalculator.SeriesCapacitance(new[] {0.000001, 0.000002}); double cParallel = CapacitorCalculator.ParallelCapacitance(new[] {0.000001, 0.000002}); double vCharge = CapacitorCalculator.ChargingVoltage(5, 0.001, 0.002); double vDischarge = CapacitorCalculator.DischargingVoltage(5, 0.001, 0.002); Methods | Edit this page View Source CapacitiveReactance(double, double) Calculates capacitive reactance using the formula Xc = 1 / (2πfC). Declaration public static double CapacitiveReactance(double frequency, double capacitance) Parameters Type Name Description double frequency Frequency in hertz (Hz). double capacitance Capacitance in farads (F). Returns Type Description double Capacitive reactance in ohms (Ω). Examples double xc = CapacitorCalculator.CapacitiveReactance(1000, 0.000001); // 159.15 Ohms | Edit this page View Source ChargingVoltage(double, double, double) Calculates the charging voltage of a capacitor at time t using V(t) = Vsource × (1 - e^(-t/τ)). Declaration public static double ChargingVoltage(double sourceVoltage, double timeConstant, double time) Parameters Type Name Description double sourceVoltage Source voltage in volts (V). double timeConstant Time constant τ in seconds (s). double time Time in seconds (s). Returns Type Description double Capacitor voltage at time t in volts (V). Examples double vCharge = CapacitorCalculator.ChargingVoltage(5, 0.001, 0.002); | Edit this page View Source DischargingVoltage(double, double, double) Calculates the discharging voltage of a capacitor at time t using V(t) = Vinitial × e^(-t/τ). Declaration public static double DischargingVoltage(double initialVoltage, double timeConstant, double time) Parameters Type Name Description double initialVoltage Initial voltage in volts (V). double timeConstant Time constant τ in seconds (s). double time Time in seconds (s). Returns Type Description double Capacitor voltage at time t in volts (V). Examples double vDischarge = CapacitorCalculator.DischargingVoltage(5, 0.001, 0.002); | Edit this page View Source EnergyStored(double, double) Calculates the energy stored in a capacitor using the formula E = 0.5 × C × V². Declaration public static double EnergyStored(double capacitance, double voltage) Parameters Type Name Description double capacitance Capacitance in farads (F). double voltage Voltage across the capacitor in volts (V). Returns Type Description double Energy stored in joules (J). Examples double energy = CapacitorCalculator.EnergyStored(0.001, 5); // 0.0125 J | Edit this page View Source ParallelCapacitance(double[]) Calculates total capacitance for capacitors in parallel using the formula Ctotal = C1 + C2 + ... Declaration public static double ParallelCapacitance(double[] capacitances) Parameters Type Name Description double[] capacitances Array of capacitance values in farads (F). Returns Type Description double Total capacitance in farads (F). Examples double cParallel = CapacitorCalculator.ParallelCapacitance(new[] {0.000001, 0.000002}); | Edit this page View Source SeriesCapacitance(double[]) Calculates total capacitance for capacitors in series using the formula 1/Ctotal = 1/C1 + 1/C2 + ... Declaration public static double SeriesCapacitance(double[] capacitances) Parameters Type Name Description double[] capacitances Array of capacitance values in farads (F). Returns Type Description double Total capacitance in farads (F). Examples double cSeries = CapacitorCalculator.SeriesCapacitance(new[] {0.000001, 0.000002}); | Edit this page View Source TimeConstant(double, double) Calculates the time constant for an RC circuit using the formula τ = R × C. Declaration public static double TimeConstant(double resistance, double capacitance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). Returns Type Description double Time constant in seconds (s). Examples double tau = CapacitorCalculator.TimeConstant(1000, 0.000001); // 0.001 s"
  },
  "docs/api/CircuitTool.CircuitBuilder.Capacitor.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.Capacitor.html",
    "title": "Class Capacitor | CircuitTool Documentation",
    "summary": "Class Capacitor Represents a capacitor component Inheritance object Component Capacitor Inherited Members Component.Id Component.Name Component.Tolerance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class Capacitor : Component Constructors | Edit this page View Source Capacitor(string, double, string) Declaration public Capacitor(string id, double capacitance, string name = \"\") Parameters Type Name Description string id double capacitance string name Properties | Edit this page View Source Capacitance Declaration public double Capacitance { get; } Property Value Type Description double Methods | Edit this page View Source GetImpedance(double) Gets the impedance of this component at the specified frequency Declaration public override Impedance GetImpedance(double frequency) Parameters Type Name Description double frequency Frequency in Hz Returns Type Description Impedance Complex impedance Overrides Component.GetImpedance(double) | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.Circuit.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.Circuit.html",
    "title": "Class Circuit | CircuitTool Documentation",
    "summary": "Class Circuit Represents a complete circuit with analysis capabilities Inheritance object Circuit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class Circuit Properties | Edit this page View Source Components Gets all components in the circuit Declaration public IReadOnlyList<Component> Components { get; } Property Value Type Description IReadOnlyList<Component> Methods | Edit this page View Source AnalyzeResponse(ACVoltage, double) Calculates circuit response for a given input voltage Declaration public CircuitResponse AnalyzeResponse(ACVoltage inputVoltage, double frequency) Parameters Type Name Description ACVoltage inputVoltage Input voltage (AC) double frequency Frequency in Hz Returns Type Description CircuitResponse Circuit response | Edit this page View Source CalculateImpedance(double) Calculates the total impedance of the circuit at the specified frequency Declaration public Impedance CalculateImpedance(double frequency) Parameters Type Name Description double frequency Frequency in Hz Returns Type Description Impedance Total circuit impedance | Edit this page View Source CalculateResonantFrequency() Calculates resonant frequency for RLC circuits Declaration public double? CalculateResonantFrequency() Returns Type Description double? Resonant frequency in Hz, or null if not applicable | Edit this page View Source GetFrequencyResponse(double, double, int) Performs frequency sweep analysis Declaration public FrequencyResponse GetFrequencyResponse(double startFreq, double stopFreq, int points) Parameters Type Name Description double startFreq Start frequency in Hz double stopFreq Stop frequency in Hz int points Number of points Returns Type Description FrequencyResponse Frequency response | Edit this page View Source GetNominalValues() Gets component nominal values for Monte Carlo analysis Declaration public double[] GetNominalValues() Returns Type Description double[] | Edit this page View Source GetTolerances() Gets component tolerances for Monte Carlo analysis Declaration public double[] GetTolerances() Returns Type Description double[] | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.CircuitBuilder.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.CircuitBuilder.html",
    "title": "Class CircuitBuilder | CircuitTool Documentation",
    "summary": "Class CircuitBuilder Fluent API for building circuits Inheritance object CircuitBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class CircuitBuilder Methods | Edit this page View Source AddCapacitor(double, string?) Adds a capacitor to the circuit Declaration public CircuitBuilder AddCapacitor(double capacitance, string? name = null) Parameters Type Name Description double capacitance Capacitance in farads string name Optional component name Returns Type Description CircuitBuilder | Edit this page View Source AddInductor(double, string?) Adds an inductor to the circuit Declaration public CircuitBuilder AddInductor(double inductance, string? name = null) Parameters Type Name Description double inductance Inductance in henries string name Optional component name Returns Type Description CircuitBuilder | Edit this page View Source AddResistor(double, string?) Adds a resistor to the circuit Declaration public CircuitBuilder AddResistor(double resistance, string? name = null) Parameters Type Name Description double resistance Resistance in ohms string name Optional component name Returns Type Description CircuitBuilder | Edit this page View Source Build() Builds the circuit and returns the total impedance calculation Declaration public Circuit Build() Returns Type Description Circuit | Edit this page View Source InParallelWith() Sets the last added component to be in parallel with the next component Declaration public CircuitBuilder InParallelWith() Returns Type Description CircuitBuilder | Edit this page View Source InSeriesWith() Sets the last added component to be in series with the next component Declaration public CircuitBuilder InSeriesWith() Returns Type Description CircuitBuilder | Edit this page View Source New() Starts building a new circuit Declaration public static CircuitBuilder New() Returns Type Description CircuitBuilder | Edit this page View Source WithComponentTolerance(double) Sets tolerance for the last added component Declaration public CircuitBuilder WithComponentTolerance(double tolerance) Parameters Type Name Description double tolerance Tolerance as a fraction (e.g., 0.05 for 5%) Returns Type Description CircuitBuilder | Edit this page View Source WithTolerance(double) Sets component tolerance for all components Declaration public CircuitBuilder WithTolerance(double tolerance) Parameters Type Name Description double tolerance Tolerance as a fraction (e.g., 0.05 for 5%) Returns Type Description CircuitBuilder"
  },
  "docs/api/CircuitTool.CircuitBuilder.CircuitResponse.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.CircuitResponse.html",
    "title": "Struct CircuitResponse | CircuitTool Documentation",
    "summary": "Struct CircuitResponse Represents the response of a circuit to an input signal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public readonly struct CircuitResponse Constructors | Edit this page View Source CircuitResponse(ACVoltage, ACCurrent, Impedance, ComplexPower, double) Declaration public CircuitResponse(ACVoltage inputVoltage, ACCurrent current, Impedance totalImpedance, ComplexPower power, double frequency) Parameters Type Name Description ACVoltage inputVoltage ACCurrent current Impedance totalImpedance ComplexPower power double frequency Properties | Edit this page View Source Current Declaration public ACCurrent Current { get; } Property Value Type Description ACCurrent | Edit this page View Source Frequency Declaration public double Frequency { get; } Property Value Type Description double | Edit this page View Source InputVoltage Declaration public ACVoltage InputVoltage { get; } Property Value Type Description ACVoltage | Edit this page View Source Power Declaration public ComplexPower Power { get; } Property Value Type Description ComplexPower | Edit this page View Source TotalImpedance Declaration public Impedance TotalImpedance { get; } Property Value Type Description Impedance Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.ComplexPower.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.ComplexPower.html",
    "title": "Struct ComplexPower | CircuitTool Documentation",
    "summary": "Struct ComplexPower Represents complex power (apparent, real, and reactive power) Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public readonly struct ComplexPower Constructors | Edit this page View Source ComplexPower(Complex) Declaration public ComplexPower(Complex complex) Parameters Type Name Description Complex complex Properties | Edit this page View Source ApparentPower Apparent power in VA Declaration public double ApparentPower { get; } Property Value Type Description double | Edit this page View Source PowerFactor Power factor Declaration public double PowerFactor { get; } Property Value Type Description double | Edit this page View Source ReactivePower Reactive power in VARs Declaration public double ReactivePower { get; } Property Value Type Description double | Edit this page View Source RealPower Real power in watts Declaration public double RealPower { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.Component.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.Component.html",
    "title": "Class Component | CircuitTool Documentation",
    "summary": "Class Component Represents a circuit component Inheritance object Component Capacitor Inductor Resistor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public abstract class Component Constructors | Edit this page View Source Component(string, string) Declaration protected Component(string id, string name) Parameters Type Name Description string id string name Properties | Edit this page View Source Id Declaration public string Id { get; } Property Value Type Description string | Edit this page View Source Name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Tolerance Gets component tolerance for Monte Carlo analysis Declaration public virtual double Tolerance { get; set; } Property Value Type Description double Methods | Edit this page View Source GetImpedance(double) Gets the impedance of this component at the specified frequency Declaration public abstract Impedance GetImpedance(double frequency) Parameters Type Name Description double frequency Frequency in Hz Returns Type Description Impedance Complex impedance"
  },
  "docs/api/CircuitTool.CircuitBuilder.ComponentConnection.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.ComponentConnection.html",
    "title": "Class ComponentConnection | CircuitTool Documentation",
    "summary": "Class ComponentConnection Represents a connection between components Inheritance object ComponentConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class ComponentConnection Constructors | Edit this page View Source ComponentConnection(Component, ConnectionType) Declaration public ComponentConnection(Component component, ConnectionType connectionType) Parameters Type Name Description Component component ConnectionType connectionType Properties | Edit this page View Source Component Declaration public Component Component { get; } Property Value Type Description Component | Edit this page View Source ConnectionType Declaration public ConnectionType ConnectionType { get; } Property Value Type Description ConnectionType"
  },
  "docs/api/CircuitTool.CircuitBuilder.ConnectionType.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.ConnectionType.html",
    "title": "Enum ConnectionType | CircuitTool Documentation",
    "summary": "Enum ConnectionType Represents how components are connected Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public enum ConnectionType Fields Name Description Parallel Series"
  },
  "docs/api/CircuitTool.CircuitBuilder.Inductor.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.Inductor.html",
    "title": "Class Inductor | CircuitTool Documentation",
    "summary": "Class Inductor Represents an inductor component Inheritance object Component Inductor Inherited Members Component.Id Component.Name Component.Tolerance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class Inductor : Component Constructors | Edit this page View Source Inductor(string, double, string) Declaration public Inductor(string id, double inductance, string name = \"\") Parameters Type Name Description string id double inductance string name Properties | Edit this page View Source Inductance Declaration public double Inductance { get; } Property Value Type Description double Methods | Edit this page View Source GetImpedance(double) Gets the impedance of this component at the specified frequency Declaration public override Impedance GetImpedance(double frequency) Parameters Type Name Description double frequency Frequency in Hz Returns Type Description Impedance Complex impedance Overrides Component.GetImpedance(double) | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.Resistor.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.Resistor.html",
    "title": "Class Resistor | CircuitTool Documentation",
    "summary": "Class Resistor Represents a resistor component Inheritance object Component Resistor Inherited Members Component.Id Component.Name Component.Tolerance object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: CircuitTool.CircuitBuilder Assembly: .dll Syntax public class Resistor : Component Constructors | Edit this page View Source Resistor(string, double, string) Declaration public Resistor(string id, double resistance, string name = \"\") Parameters Type Name Description string id double resistance string name Properties | Edit this page View Source Resistance Declaration public double Resistance { get; } Property Value Type Description double Methods | Edit this page View Source GetImpedance(double) Gets the impedance of this component at the specified frequency Declaration public override Impedance GetImpedance(double frequency) Parameters Type Name Description double frequency Frequency in Hz Returns Type Description Impedance Complex impedance Overrides Component.GetImpedance(double) | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString()"
  },
  "docs/api/CircuitTool.CircuitBuilder.html": {
    "href": "docs/api/CircuitTool.CircuitBuilder.html",
    "title": "Namespace CircuitTool.CircuitBuilder | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.CircuitBuilder Classes Capacitor Represents a capacitor component Circuit Represents a complete circuit with analysis capabilities CircuitBuilder Fluent API for building circuits Component Represents a circuit component ComponentConnection Represents a connection between components Inductor Represents an inductor component Resistor Represents a resistor component Structs CircuitResponse Represents the response of a circuit to an input signal ComplexPower Represents complex power (apparent, real, and reactive power) Enums ConnectionType Represents how components are connected"
  },
  "docs/api/CircuitTool.CircuitCalculations.html": {
    "href": "docs/api/CircuitTool.CircuitCalculations.html",
    "title": "Class CircuitCalculations | CircuitTool Documentation",
    "summary": "Class CircuitCalculations Inheritance object CircuitCalculations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class CircuitCalculations Methods | Edit this page View Source CalculateEnergy(double, double) Declaration public static double CalculateEnergy(double power, double time) Parameters Type Name Description double power double time Returns Type Description double | Edit this page View Source CalculatePower(double, double) Declaration public static double CalculatePower(double voltage, double current) Parameters Type Name Description double voltage double current Returns Type Description double | Edit this page View Source CalculateTotalResistance(double[], bool) Declaration public static double CalculateTotalResistance(double[] resistances, bool isSeries) Parameters Type Name Description double[] resistances bool isSeries Returns Type Description double"
  },
  "docs/api/CircuitTool.ComPortTools.SerialConfig.html": {
    "href": "docs/api/CircuitTool.ComPortTools.SerialConfig.html",
    "title": "Class ComPortTools.SerialConfig | CircuitTool Documentation",
    "summary": "Class ComPortTools.SerialConfig Serial port configuration Inheritance object ComPortTools.SerialConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class ComPortTools.SerialConfig Properties | Edit this page View Source BaudRate Declaration public int BaudRate { get; set; } Property Value Type Description int | Edit this page View Source DataBits Declaration public int DataBits { get; set; } Property Value Type Description int | Edit this page View Source Handshake Declaration public ComPortTools.SerialHandshake Handshake { get; set; } Property Value Type Description ComPortTools.SerialHandshake | Edit this page View Source Parity Declaration public ComPortTools.SerialParity Parity { get; set; } Property Value Type Description ComPortTools.SerialParity | Edit this page View Source PortName Declaration public string PortName { get; set; } Property Value Type Description string | Edit this page View Source ReadTimeout Declaration public int ReadTimeout { get; set; } Property Value Type Description int | Edit this page View Source StopBits Declaration public ComPortTools.SerialStopBits StopBits { get; set; } Property Value Type Description ComPortTools.SerialStopBits | Edit this page View Source WriteTimeout Declaration public int WriteTimeout { get; set; } Property Value Type Description int"
  },
  "docs/api/CircuitTool.ComPortTools.SerialHandshake.html": {
    "href": "docs/api/CircuitTool.ComPortTools.SerialHandshake.html",
    "title": "Enum ComPortTools.SerialHandshake | CircuitTool Documentation",
    "summary": "Enum ComPortTools.SerialHandshake Serial port handshake options (compatibility for older frameworks) Namespace: CircuitTool Assembly: .dll Syntax public enum ComPortTools.SerialHandshake Fields Name Description None RequestToSend RequestToSendXOnXOff XOnXOff"
  },
  "docs/api/CircuitTool.ComPortTools.SerialParity.html": {
    "href": "docs/api/CircuitTool.ComPortTools.SerialParity.html",
    "title": "Enum ComPortTools.SerialParity | CircuitTool Documentation",
    "summary": "Enum ComPortTools.SerialParity Serial port parity options (compatibility for older frameworks) Namespace: CircuitTool Assembly: .dll Syntax public enum ComPortTools.SerialParity Fields Name Description Even Mark None Odd Space"
  },
  "docs/api/CircuitTool.ComPortTools.SerialPortInfo.html": {
    "href": "docs/api/CircuitTool.ComPortTools.SerialPortInfo.html",
    "title": "Class ComPortTools.SerialPortInfo | CircuitTool Documentation",
    "summary": "Class ComPortTools.SerialPortInfo Serial port information Inheritance object ComPortTools.SerialPortInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class ComPortTools.SerialPortInfo Properties | Edit this page View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Edit this page View Source DeviceID Declaration public string DeviceID { get; set; } Property Value Type Description string | Edit this page View Source DeviceType Declaration public string DeviceType { get; set; } Property Value Type Description string | Edit this page View Source IsAvailable Declaration public bool IsAvailable { get; set; } Property Value Type Description bool | Edit this page View Source Manufacturer Declaration public string Manufacturer { get; set; } Property Value Type Description string | Edit this page View Source PortName Declaration public string PortName { get; set; } Property Value Type Description string"
  },
  "docs/api/CircuitTool.ComPortTools.SerialStopBits.html": {
    "href": "docs/api/CircuitTool.ComPortTools.SerialStopBits.html",
    "title": "Enum ComPortTools.SerialStopBits | CircuitTool Documentation",
    "summary": "Enum ComPortTools.SerialStopBits Serial port stop bits options (compatibility for older frameworks) Namespace: CircuitTool Assembly: .dll Syntax public enum ComPortTools.SerialStopBits Fields Name Description None One OnePointFive Two"
  },
  "docs/api/CircuitTool.ComPortTools.html": {
    "href": "docs/api/CircuitTool.ComPortTools.html",
    "title": "Class ComPortTools | CircuitTool Documentation",
    "summary": "Class ComPortTools Provides comprehensive COM port utilities for hardware communication and monitoring Inheritance object ComPortTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ComPortTools Fields | Edit this page View Source ArduinoBaudRates Arduino standard baud rates Declaration public static readonly int[] ArduinoBaudRates Field Value Type Description int[] | Edit this page View Source CommonBaudRates Common baud rates for serial communication Declaration public static readonly int[] CommonBaudRates Field Value Type Description int[] | Edit this page View Source ESP32BaudRates ESP32 standard baud rates Declaration public static readonly int[] ESP32BaudRates Field Value Type Description int[] Methods | Edit this page View Source AutoDetectBaudRate(string, int[]?, int) Auto-detects the correct baud rate for a device Declaration public static int AutoDetectBaudRate(string portName, int[]? testBaudRates = null, int testTimeMs = 2000) Parameters Type Name Description string portName COM port name int[] testBaudRates Array of baud rates to test int testTimeMs Time to test each baud rate Returns Type Description int Detected baud rate or -1 if none found | Edit this page View Source CalculateBufferSizes(int, double, int) Calculates optimal buffer sizes for serial communication Declaration public static (int rxBufferSize, int txBufferSize) CalculateBufferSizes(int baudRate, double expectedDataRate = 0, int latencyMs = 100) Parameters Type Name Description int baudRate Baud rate double expectedDataRate Expected data rate in bytes/second int latencyMs Maximum acceptable latency in milliseconds Returns Type Description (int rxBufferSize, int txBufferSize) Recommended buffer sizes | Edit this page View Source GenerateArduinoSerialCode(int, bool) Generates Arduino serial monitor code Declaration public static string GenerateArduinoSerialCode(int baudRate = 115200, bool includeDebug = true) Parameters Type Name Description int baudRate Serial baud rate bool includeDebug Include debug output Returns Type Description string Arduino code | Edit this page View Source GenerateDiagnosticReport() Generates COM port diagnostic report Declaration public static string GenerateDiagnosticReport() Returns Type Description string Comprehensive diagnostic report | Edit this page View Source GenerateESP32SerialCode(int, bool) Generates ESP32 serial communication code Declaration public static string GenerateESP32SerialCode(int baudRate = 115200, bool includeWiFi = true) Parameters Type Name Description int baudRate Serial baud rate bool includeWiFi Include WiFi status in output Returns Type Description string ESP32 code | Edit this page View Source GetAvailablePorts() Gets all available COM ports with detailed information Declaration public static List<ComPortTools.SerialPortInfo> GetAvailablePorts() Returns Type Description List<ComPortTools.SerialPortInfo> List of available serial ports | Edit this page View Source MonitorPort(SerialConfig, int, Action<string>?) Monitors a COM port and logs data Declaration public static string MonitorPort(ComPortTools.SerialConfig config, int durationSeconds = 30, Action<string>? dataCallback = null) Parameters Type Name Description ComPortTools.SerialConfig config Serial port configuration int durationSeconds Duration to monitor in seconds Action<string> dataCallback Callback for received data Returns Type Description string Monitoring results | Edit this page View Source TestATCommands(string, int) Sends AT commands to test modem/ESP devices Declaration public static string TestATCommands(string portName, int baudRate = 115200) Parameters Type Name Description string portName COM port name int baudRate Baud rate Returns Type Description string AT command test results | Edit this page View Source TestPortAvailability(string, int, int) Tests if a port is available and responsive Declaration public static bool TestPortAvailability(string portName, int baudRate = 115200, int timeoutMs = 1000) Parameters Type Name Description string portName COM port name int baudRate Baud rate to test int timeoutMs Timeout in milliseconds Returns Type Description bool True if port is available and responsive"
  },
  "docs/api/CircuitTool.CommunicationProtocolTools.I2CConfig.html": {
    "href": "docs/api/CircuitTool.CommunicationProtocolTools.I2CConfig.html",
    "title": "Class CommunicationProtocolTools.I2CConfig | CircuitTool Documentation",
    "summary": "Class CommunicationProtocolTools.I2CConfig I2C communication parameters Inheritance object CommunicationProtocolTools.I2CConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class CommunicationProtocolTools.I2CConfig Properties | Edit this page View Source BusCapacitance Declaration public double BusCapacitance { get; set; } Property Value Type Description double | Edit this page View Source ClockFrequency Declaration public int ClockFrequency { get; set; } Property Value Type Description int | Edit this page View Source NumberOfDevices Declaration public int NumberOfDevices { get; set; } Property Value Type Description int | Edit this page View Source PullUpResistance Declaration public double PullUpResistance { get; set; } Property Value Type Description double | Edit this page View Source SupplyVoltage Declaration public double SupplyVoltage { get; set; } Property Value Type Description double"
  },
  "docs/api/CircuitTool.CommunicationProtocolTools.SPIConfig.html": {
    "href": "docs/api/CircuitTool.CommunicationProtocolTools.SPIConfig.html",
    "title": "Class CommunicationProtocolTools.SPIConfig | CircuitTool Documentation",
    "summary": "Class CommunicationProtocolTools.SPIConfig SPI communication parameters Inheritance object CommunicationProtocolTools.SPIConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class CommunicationProtocolTools.SPIConfig Properties | Edit this page View Source CableLength Declaration public double CableLength { get; set; } Property Value Type Description double | Edit this page View Source ClockFrequency Declaration public int ClockFrequency { get; set; } Property Value Type Description int | Edit this page View Source DataBits Declaration public int DataBits { get; set; } Property Value Type Description int | Edit this page View Source Mode Declaration public CommunicationProtocolTools.SPIMode Mode { get; set; } Property Value Type Description CommunicationProtocolTools.SPIMode | Edit this page View Source UseChipSelect Declaration public bool UseChipSelect { get; set; } Property Value Type Description bool"
  },
  "docs/api/CircuitTool.CommunicationProtocolTools.SPIMode.html": {
    "href": "docs/api/CircuitTool.CommunicationProtocolTools.SPIMode.html",
    "title": "Enum CommunicationProtocolTools.SPIMode | CircuitTool Documentation",
    "summary": "Enum CommunicationProtocolTools.SPIMode SPI communication modes Namespace: CircuitTool Assembly: .dll Syntax public enum CommunicationProtocolTools.SPIMode Fields Name Description Mode0 Mode1 Mode2 Mode3"
  },
  "docs/api/CircuitTool.CommunicationProtocolTools.UARTConfig.html": {
    "href": "docs/api/CircuitTool.CommunicationProtocolTools.UARTConfig.html",
    "title": "Class CommunicationProtocolTools.UARTConfig | CircuitTool Documentation",
    "summary": "Class CommunicationProtocolTools.UARTConfig UART communication parameters Inheritance object CommunicationProtocolTools.UARTConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class CommunicationProtocolTools.UARTConfig Properties | Edit this page View Source BaudRate Declaration public int BaudRate { get; set; } Property Value Type Description int | Edit this page View Source CableLength Declaration public double CableLength { get; set; } Property Value Type Description double | Edit this page View Source DataBits Declaration public int DataBits { get; set; } Property Value Type Description int | Edit this page View Source Parity Declaration public string Parity { get; set; } Property Value Type Description string | Edit this page View Source StopBits Declaration public int StopBits { get; set; } Property Value Type Description int | Edit this page View Source UseFlowControl Declaration public bool UseFlowControl { get; set; } Property Value Type Description bool"
  },
  "docs/api/CircuitTool.CommunicationProtocolTools.html": {
    "href": "docs/api/CircuitTool.CommunicationProtocolTools.html",
    "title": "Class CommunicationProtocolTools | CircuitTool Documentation",
    "summary": "Class CommunicationProtocolTools Provides tools and calculators for various hardware communication protocols Inheritance object CommunicationProtocolTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class CommunicationProtocolTools Methods | Edit this page View Source CalculateI2CPullUpResistors(I2CConfig) Calculates optimal I2C pull-up resistor values Declaration public static (double minResistance, double maxResistance, double recommendedResistance) CalculateI2CPullUpResistors(CommunicationProtocolTools.I2CConfig config) Parameters Type Name Description CommunicationProtocolTools.I2CConfig config I2C configuration Returns Type Description (double minResistance, double maxResistance, double recommendedResistance) Recommended pull-up resistance range | Edit this page View Source CalculateI2CTiming(I2CConfig) Calculates I2C bus timing parameters Declaration public static (double setupTime, double holdTime, double riseTime, double fallTime) CalculateI2CTiming(CommunicationProtocolTools.I2CConfig config) Parameters Type Name Description CommunicationProtocolTools.I2CConfig config I2C configuration Returns Type Description (double setupTime, double holdTime, double riseTime, double fallTime) Timing parameters in nanoseconds | Edit this page View Source CalculateMaxSPIFrequency(SPIConfig) Calculates maximum SPI clock frequency based on cable length and capacitance Declaration public static double CalculateMaxSPIFrequency(CommunicationProtocolTools.SPIConfig config) Parameters Type Name Description CommunicationProtocolTools.SPIConfig config SPI configuration Returns Type Description double Maximum recommended clock frequency | Edit this page View Source CalculateUARTBitErrorRate(UARTConfig, double) Calculates UART bit error rate based on clock accuracy Declaration public static double CalculateUARTBitErrorRate(CommunicationProtocolTools.UARTConfig config, double clockAccuracyPpm = 100) Parameters Type Name Description CommunicationProtocolTools.UARTConfig config UART configuration double clockAccuracyPpm Clock accuracy in parts per million Returns Type Description double Estimated bit error rate | Edit this page View Source GenerateI2CScannerCode(int, int) Generates I2C device scanning code for Arduino Declaration public static string GenerateI2CScannerCode(int startAddress = 8, int endAddress = 119) Parameters Type Name Description int startAddress Start address for scanning (default 8) int endAddress End address for scanning (default 119) Returns Type Description string Arduino I2C scanner code | Edit this page View Source GenerateProtocolComparison(I2CConfig?, SPIConfig?, UARTConfig?) Generates protocol comparison report Declaration public static string GenerateProtocolComparison(CommunicationProtocolTools.I2CConfig? i2cConfig = null, CommunicationProtocolTools.SPIConfig? spiConfig = null, CommunicationProtocolTools.UARTConfig? uartConfig = null) Parameters Type Name Description CommunicationProtocolTools.I2CConfig i2cConfig I2C configuration CommunicationProtocolTools.SPIConfig spiConfig SPI configuration CommunicationProtocolTools.UARTConfig uartConfig UART configuration Returns Type Description string Comparison report | Edit this page View Source GenerateSPITestCode(SPIConfig, int) Generates SPI communication test code for Arduino Declaration public static string GenerateSPITestCode(CommunicationProtocolTools.SPIConfig config, int chipSelectPin = 10) Parameters Type Name Description CommunicationProtocolTools.SPIConfig config SPI configuration int chipSelectPin Chip select pin number Returns Type Description string Arduino SPI test code"
  },
  "docs/api/CircuitTool.DocumentationExamples.ACAnalysis.html": {
    "href": "docs/api/CircuitTool.DocumentationExamples.ACAnalysis.html",
    "title": "Class DocumentationExamples.ACAnalysis | CircuitTool Documentation",
    "summary": "Class DocumentationExamples.ACAnalysis AC circuit analysis example Inheritance object DocumentationExamples.ACAnalysis Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class DocumentationExamples.ACAnalysis Methods | Edit this page View Source RunExample() Declaration public static void RunExample()"
  },
  "docs/api/CircuitTool.DocumentationExamples.BasicOhmsLaw.html": {
    "href": "docs/api/CircuitTool.DocumentationExamples.BasicOhmsLaw.html",
    "title": "Class DocumentationExamples.BasicOhmsLaw | CircuitTool Documentation",
    "summary": "Class DocumentationExamples.BasicOhmsLaw Basic Ohm's Law calculations example Inheritance object DocumentationExamples.BasicOhmsLaw Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class DocumentationExamples.BasicOhmsLaw Methods | Edit this page View Source RunExample() Declaration public static void RunExample()"
  },
  "docs/api/CircuitTool.DocumentationExamples.CircuitBuilding.html": {
    "href": "docs/api/CircuitTool.DocumentationExamples.CircuitBuilding.html",
    "title": "Class DocumentationExamples.CircuitBuilding | CircuitTool Documentation",
    "summary": "Class DocumentationExamples.CircuitBuilding Circuit building example using basic calculations Inheritance object DocumentationExamples.CircuitBuilding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class DocumentationExamples.CircuitBuilding Methods | Edit this page View Source RunExample() Declaration public static void RunExample()"
  },
  "docs/api/CircuitTool.DocumentationExamples.EnergyCalculations.html": {
    "href": "docs/api/CircuitTool.DocumentationExamples.EnergyCalculations.html",
    "title": "Class DocumentationExamples.EnergyCalculations | CircuitTool Documentation",
    "summary": "Class DocumentationExamples.EnergyCalculations Energy calculation example Inheritance object DocumentationExamples.EnergyCalculations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class DocumentationExamples.EnergyCalculations Methods | Edit this page View Source RunExample() Declaration public static void RunExample()"
  },
  "docs/api/CircuitTool.DocumentationExamples.html": {
    "href": "docs/api/CircuitTool.DocumentationExamples.html",
    "title": "Class DocumentationExamples | CircuitTool Documentation",
    "summary": "Class DocumentationExamples Interactive documentation examples demonstrating common use cases Inheritance object DocumentationExamples Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class DocumentationExamples Methods | Edit this page View Source RunAllExamples() Runs all documentation examples Declaration public static void RunAllExamples()"
  },
  "docs/api/CircuitTool.EMCCalculator.html": {
    "href": "docs/api/CircuitTool.EMCCalculator.html",
    "title": "Class EMCCalculator | CircuitTool Documentation",
    "summary": "Class EMCCalculator Provides electromagnetic compatibility (EMC) calculations Inheritance object EMCCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class EMCCalculator Methods | Edit this page View Source CommonModeChokeImpedance(double, double, double) Calculates common-mode choke impedance Declaration public static double CommonModeChokeImpedance(double inductance, double frequency, double resistanceDC = 0) Parameters Type Name Description double inductance Choke inductance in henries double frequency Frequency in Hz double resistanceDC DC resistance in ohms Returns Type Description double Complex impedance magnitude in ohms | Edit this page View Source ElectricFieldStrength(double, double, double) Calculates the electric field strength at a given distance from a radiating source Declaration public static double ElectricFieldStrength(double power, double distance, double antennaGain = 1) Parameters Type Name Description double power Radiated power in watts double distance Distance from source in meters double antennaGain Antenna gain in linear scale (default 1 for isotropic) Returns Type Description double Electric field strength in V/m | Edit this page View Source FCCClassBLimit(double, double) Calculates the maximum allowed radiated emission for FCC Class B devices Declaration public static double FCCClassBLimit(double frequency, double measurementDistance = 3) Parameters Type Name Description double frequency Frequency in Hz double measurementDistance Measurement distance in meters (typically 3m or 10m) Returns Type Description double Maximum allowed field strength in dB(μV/m) | Edit this page View Source LoopInductance(double, double) Calculates the loop inductance for EMI analysis Declaration public static double LoopInductance(double loopArea, double wireRadius) Parameters Type Name Description double loopArea Loop area in m² double wireRadius Wire radius in meters Returns Type Description double Loop inductance in henries | Edit this page View Source ShieldingEffectiveness(double, double, double, double) Calculates shielding effectiveness of a conductive enclosure Declaration public static double ShieldingEffectiveness(double frequency, double thickness, double conductivity, double permeability = 1) Parameters Type Name Description double frequency Frequency in Hz double thickness Shield thickness in meters double conductivity Material conductivity in S/m double permeability Relative permeability (default 1 for non-magnetic materials) Returns Type Description double Shielding effectiveness in dB"
  },
  "docs/api/CircuitTool.ESP32Tools.html": {
    "href": "docs/api/CircuitTool.ESP32Tools.html",
    "title": "Class ESP32Tools | CircuitTool Documentation",
    "summary": "Class ESP32Tools Provides ESP32-specific calculations and utilities Inheritance object ESP32Tools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ESP32Tools Methods | Edit this page View Source AnalogToVoltage(int, double) Converts analog reading to voltage for ESP32 (12-bit ADC, 3.3V reference) Declaration public static double AnalogToVoltage(int analogReading, double referenceVoltage = 3.3) Parameters Type Name Description int analogReading Analog reading value (0-4095) double referenceVoltage Reference voltage (default 3.3V for ESP32) Returns Type Description double Voltage value | Edit this page View Source CalculateBatteryLife(double, double, double) Calculates battery life for ESP32 projects Declaration public static double CalculateBatteryLife(double batteryCapacity, double averageCurrent, double efficiency = 0.8) Parameters Type Name Description double batteryCapacity Battery capacity in mAh double averageCurrent Average current consumption in mA double efficiency Battery efficiency factor (0.7-0.9) Returns Type Description double Battery life in hours | Edit this page View Source CalculateTotalCurrentConsumption(int, WiFiMode, bool, double) Calculates total ESP32 current consumption Declaration public static double CalculateTotalCurrentConsumption(int cpuFrequency, WiFiMode wifiMode, bool bluetoothActive = false, double additionalCurrent = 0) Parameters Type Name Description int cpuFrequency CPU frequency in MHz WiFiMode wifiMode WiFi operation mode bool bluetoothActive Whether Bluetooth is active double additionalCurrent Additional current from external components (mA) Returns Type Description double Total current consumption in mA | Edit this page View Source CalculateTouchThreshold(int, double) Calculates ESP32 touch sensor threshold Declaration public static int CalculateTouchThreshold(int baselineReading, double sensitivity = 0.3) Parameters Type Name Description int baselineReading Baseline touch reading double sensitivity Sensitivity factor (0.1-0.9, higher = more sensitive) Returns Type Description int Touch threshold value | Edit this page View Source CalculateWiFiPowerConsumption(WiFiMode) Calculates WiFi power consumption based on operation mode Declaration public static double CalculateWiFiPowerConsumption(WiFiMode mode) Parameters Type Name Description WiFiMode mode WiFi operation mode Returns Type Description double Current consumption in mA | Edit this page View Source VoltageToAnalog(double, double) Converts voltage to analog reading for ESP32 Declaration public static int VoltageToAnalog(double voltage, double referenceVoltage = 3.3) Parameters Type Name Description double voltage Voltage value double referenceVoltage Reference voltage (default 3.3V for ESP32) Returns Type Description int Analog reading value (0-4095)"
  },
  "docs/api/CircuitTool.ElectricityBillCalculator.html": {
    "href": "docs/api/CircuitTool.ElectricityBillCalculator.html",
    "title": "Class ElectricityBillCalculator | CircuitTool Documentation",
    "summary": "Class ElectricityBillCalculator Provides a simple method to calculate electricity bills. Inheritance object ElectricityBillCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ElectricityBillCalculator Remarks Example usage: double bill = ElectricityBillCalculator.CalculateBill(150, 0.12); // $18.00 Methods | Edit this page View Source CalculateBill(double, double) Calculates the total electricity bill. Declaration public static double CalculateBill(double kWh, double ratePerKWh) Parameters Type Name Description double kWh The total energy consumed in kilowatt-hours (kWh). double ratePerKWh The rate per kilowatt-hour (e.g., 0.12 for $0.12/kWh). Returns Type Description double The total bill amount."
  },
  "docs/api/CircuitTool.EnergyCalculator.html": {
    "href": "docs/api/CircuitTool.EnergyCalculator.html",
    "title": "Class EnergyCalculator | CircuitTool Documentation",
    "summary": "Class EnergyCalculator Inheritance object EnergyCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class EnergyCalculator Methods | Edit this page View Source EnergyCost(double, double) Declaration public static double EnergyCost(double kWh, double ratePerKWh) Parameters Type Name Description double kWh double ratePerKWh Returns Type Description double | Edit this page View Source Joules(double, double) Declaration public static double Joules(double power, double timeSeconds) Parameters Type Name Description double power double timeSeconds Returns Type Description double | Edit this page View Source KWh(double, double) Declaration public static double KWh(double watts, double hours) Parameters Type Name Description double watts double hours Returns Type Description double"
  },
  "docs/api/CircuitTool.EnergyConsumptionCalculator.html": {
    "href": "docs/api/CircuitTool.EnergyConsumptionCalculator.html",
    "title": "Class EnergyConsumptionCalculator | CircuitTool Documentation",
    "summary": "Class EnergyConsumptionCalculator Inheritance object EnergyConsumptionCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class EnergyConsumptionCalculator Methods | Edit this page View Source ConsumptionKWh(double, double) Declaration public static double ConsumptionKWh(double powerWatts, double timeHours) Parameters Type Name Description double powerWatts double timeHours Returns Type Description double"
  },
  "docs/api/CircuitTool.FilterCalculator.html": {
    "href": "docs/api/CircuitTool.FilterCalculator.html",
    "title": "Class FilterCalculator | CircuitTool Documentation",
    "summary": "Class FilterCalculator Provides calculations for electronic filter design and analysis. Inheritance object FilterCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class FilterCalculator Methods | Edit this page View Source GainInDecibels(double, double) Calculates the gain of a filter in decibels using Gain(dB) = 20 × log10(Vout/Vin). Declaration public static double GainInDecibels(double outputVoltage, double inputVoltage) Parameters Type Name Description double outputVoltage Output voltage in volts (V). double inputVoltage Input voltage in volts (V). Returns Type Description double Gain in decibels (dB). | Edit this page View Source RCHighPassCutoffFrequency(double, double) Calculates the cutoff frequency of an RC high-pass filter using fc = 1 / (2πRC). Declaration public static double RCHighPassCutoffFrequency(double resistance, double capacitance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). Returns Type Description double Cutoff frequency in hertz (Hz). | Edit this page View Source RCHighPassMagnitudeResponse(double, double) Calculates the magnitude response of an RC high-pass filter using |H(f)| = (f/fc) / √(1 + (f/fc)²). Declaration public static double RCHighPassMagnitudeResponse(double frequency, double cutoffFrequency) Parameters Type Name Description double frequency Frequency in hertz (Hz). double cutoffFrequency Cutoff frequency in hertz (Hz). Returns Type Description double Magnitude response (unitless, between 0 and 1). | Edit this page View Source RCHighPassPhaseShift(double, double, double) Calculates the phase shift of an RC high-pass filter using φ = arctan(1/(2πfRC)). Declaration public static double RCHighPassPhaseShift(double frequency, double resistance, double capacitance) Parameters Type Name Description double frequency Frequency in hertz (Hz). double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). Returns Type Description double Phase shift in degrees. | Edit this page View Source RCLowPassCutoffFrequency(double, double) Calculates the cutoff frequency of an RC low-pass filter using fc = 1 / (2πRC). Declaration public static double RCLowPassCutoffFrequency(double resistance, double capacitance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). Returns Type Description double Cutoff frequency in hertz (Hz). | Edit this page View Source RCLowPassMagnitudeResponse(double, double) Calculates the magnitude response of an RC low-pass filter using |H(f)| = 1 / √(1 + (f/fc)²). Declaration public static double RCLowPassMagnitudeResponse(double frequency, double cutoffFrequency) Parameters Type Name Description double frequency Frequency in hertz (Hz). double cutoffFrequency Cutoff frequency in hertz (Hz). Returns Type Description double Magnitude response (unitless, between 0 and 1). | Edit this page View Source RCLowPassPhaseShift(double, double, double) Calculates the phase shift of an RC low-pass filter using φ = -arctan(2πfRC). Declaration public static double RCLowPassPhaseShift(double frequency, double resistance, double capacitance) Parameters Type Name Description double frequency Frequency in hertz (Hz). double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). Returns Type Description double Phase shift in degrees. | Edit this page View Source RLHighPassCutoffFrequency(double, double) Calculates the cutoff frequency of an RL high-pass filter using fc = R / (2πL). Declaration public static double RLHighPassCutoffFrequency(double resistance, double inductance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductance Inductance in henries (H). Returns Type Description double Cutoff frequency in hertz (Hz). | Edit this page View Source RLLowPassCutoffFrequency(double, double) Calculates the cutoff frequency of an RL low-pass filter using fc = R / (2πL). Declaration public static double RLLowPassCutoffFrequency(double resistance, double inductance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductance Inductance in henries (H). Returns Type Description double Cutoff frequency in hertz (Hz). | Edit this page View Source RequiredCapacitanceForCutoff(double, double) Calculates the required capacitance for a desired RC filter cutoff frequency. Declaration public static double RequiredCapacitanceForCutoff(double cutoffFrequency, double resistance) Parameters Type Name Description double cutoffFrequency Desired cutoff frequency in hertz (Hz). double resistance Resistance in ohms (Ω). Returns Type Description double Required capacitance in farads (F). | Edit this page View Source RequiredResistanceForCutoff(double, double) Calculates the required resistance for a desired RC filter cutoff frequency. Declaration public static double RequiredResistanceForCutoff(double cutoffFrequency, double capacitance) Parameters Type Name Description double cutoffFrequency Desired cutoff frequency in hertz (Hz). double capacitance Capacitance in farads (F). Returns Type Description double Required resistance in ohms (Ω)."
  },
  "docs/api/CircuitTool.HardwareDebuggingTools.DebugResult.html": {
    "href": "docs/api/CircuitTool.HardwareDebuggingTools.DebugResult.html",
    "title": "Class HardwareDebuggingTools.DebugResult | CircuitTool Documentation",
    "summary": "Class HardwareDebuggingTools.DebugResult Debugging test result Inheritance object HardwareDebuggingTools.DebugResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class HardwareDebuggingTools.DebugResult Properties | Edit this page View Source Category Declaration public HardwareDebuggingTools.ProblemCategory Category { get; set; } Property Value Type Description HardwareDebuggingTools.ProblemCategory | Edit this page View Source Details Declaration public string Details { get; set; } Property Value Type Description string | Edit this page View Source Passed Declaration public bool Passed { get; set; } Property Value Type Description bool | Edit this page View Source Recommendation Declaration public string Recommendation { get; set; } Property Value Type Description string | Edit this page View Source TestName Declaration public string TestName { get; set; } Property Value Type Description string"
  },
  "docs/api/CircuitTool.HardwareDebuggingTools.HardwareConfig.html": {
    "href": "docs/api/CircuitTool.HardwareDebuggingTools.HardwareConfig.html",
    "title": "Class HardwareDebuggingTools.HardwareConfig | CircuitTool Documentation",
    "summary": "Class HardwareDebuggingTools.HardwareConfig Hardware configuration for debugging Inheritance object HardwareDebuggingTools.HardwareConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public class HardwareDebuggingTools.HardwareConfig Properties | Edit this page View Source AmbientTemperature Declaration public double AmbientTemperature { get; set; } Property Value Type Description double | Edit this page View Source ConnectedDevices Declaration public List<string> ConnectedDevices { get; set; } Property Value Type Description List<string> | Edit this page View Source HasBrownoutDetection Declaration public bool HasBrownoutDetection { get; set; } Property Value Type Description bool | Edit this page View Source HasCrystal Declaration public bool HasCrystal { get; set; } Property Value Type Description bool | Edit this page View Source OperatingFrequency Declaration public double OperatingFrequency { get; set; } Property Value Type Description double | Edit this page View Source SupplyVoltage Declaration public double SupplyVoltage { get; set; } Property Value Type Description double"
  },
  "docs/api/CircuitTool.HardwareDebuggingTools.ProblemCategory.html": {
    "href": "docs/api/CircuitTool.HardwareDebuggingTools.ProblemCategory.html",
    "title": "Enum HardwareDebuggingTools.ProblemCategory | CircuitTool Documentation",
    "summary": "Enum HardwareDebuggingTools.ProblemCategory Common hardware problem categories Namespace: CircuitTool Assembly: .dll Syntax public enum HardwareDebuggingTools.ProblemCategory Fields Name Description Communication Mechanical Power Signal Software Thermal Timing"
  },
  "docs/api/CircuitTool.HardwareDebuggingTools.html": {
    "href": "docs/api/CircuitTool.HardwareDebuggingTools.html",
    "title": "Class HardwareDebuggingTools | CircuitTool Documentation",
    "summary": "Class HardwareDebuggingTools Provides hardware debugging and troubleshooting tools for embedded systems Inheritance object HardwareDebuggingTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class HardwareDebuggingTools Methods | Edit this page View Source GenerateArduinoDiagnosticSketch(List<string>?) Generates Arduino diagnostic sketch Declaration public static string GenerateArduinoDiagnosticSketch(List<string>? includeTests = null) Parameters Type Name Description List<string> includeTests List of tests to include Returns Type Description string Arduino diagnostic code | Edit this page View Source GenerateTroubleshootingGuide(List<string>) Generates troubleshooting guide based on symptoms Declaration public static string GenerateTroubleshootingGuide(List<string> symptoms) Parameters Type Name Description List<string> symptoms List of observed symptoms Returns Type Description string Troubleshooting guide | Edit this page View Source PerformDiagnostics(HardwareConfig, List<string>) Performs comprehensive hardware diagnostic tests Declaration public static List<HardwareDebuggingTools.DebugResult> PerformDiagnostics(HardwareDebuggingTools.HardwareConfig config, List<string> symptoms) Parameters Type Name Description HardwareDebuggingTools.HardwareConfig config Hardware configuration List<string> symptoms Observed symptoms Returns Type Description List<HardwareDebuggingTools.DebugResult> List of diagnostic results"
  },
  "docs/api/CircuitTool.Impedance.html": {
    "href": "docs/api/CircuitTool.Impedance.html",
    "title": "Struct Impedance | CircuitTool Documentation",
    "summary": "Struct Impedance Represents complex impedance for AC circuit analysis Implements IEquatable<Impedance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool Assembly: .dll Syntax public readonly struct Impedance : IEquatable<Impedance> Constructors | Edit this page View Source Impedance(double, double) Creates a new impedance from resistance and reactance Declaration public Impedance(double resistance, double reactance) Parameters Type Name Description double resistance Resistance in ohms double reactance Reactance in ohms | Edit this page View Source Impedance(Complex) Creates a new impedance from a complex number Declaration public Impedance(Complex complex) Parameters Type Name Description Complex complex Complex representation Properties | Edit this page View Source Admittance Gets the admittance (1/Z) Declaration public Admittance Admittance { get; } Property Value Type Description Admittance | Edit this page View Source Complex Gets the complex number representation Declaration public Complex Complex { get; } Property Value Type Description Complex | Edit this page View Source Magnitude Gets the magnitude in ohms Declaration public double Magnitude { get; } Property Value Type Description double | Edit this page View Source Phase Gets the phase angle in radians Declaration public double Phase { get; } Property Value Type Description double | Edit this page View Source PhaseDegrees Gets the phase angle in degrees Declaration public double PhaseDegrees { get; } Property Value Type Description double | Edit this page View Source Reactance Gets the reactance component in ohms Declaration public double Reactance { get; } Property Value Type Description double | Edit this page View Source Resistance Gets the resistance component in ohms Declaration public double Resistance { get; } Property Value Type Description double Methods | Edit this page View Source Capacitor(double, double) Creates impedance for a capacitor at given frequency Declaration public static Impedance Capacitor(double capacitance, double frequency) Parameters Type Name Description double capacitance Capacitance in farads double frequency Frequency in hertz Returns Type Description Impedance | Edit this page View Source Equals(Impedance) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Impedance other) Parameters Type Name Description Impedance other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source FromPolar(double, double) Creates a new impedance from magnitude and phase Declaration public static Impedance FromPolar(double magnitude, double phase) Parameters Type Name Description double magnitude Magnitude in ohms double phase Phase angle in radians Returns Type Description Impedance | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source Inductor(double, double) Creates impedance for an inductor at given frequency Declaration public static Impedance Inductor(double inductance, double frequency) Parameters Type Name Description double inductance Inductance in henries double frequency Frequency in hertz Returns Type Description Impedance | Edit this page View Source Parallel(Impedance, Impedance) Parallel combination of impedances Declaration public static Impedance Parallel(Impedance z1, Impedance z2) Parameters Type Name Description Impedance z1 Impedance z2 Returns Type Description Impedance | Edit this page View Source Resistor(double) Creates impedance for a resistor Declaration public static Impedance Resistor(double resistance) Parameters Type Name Description double resistance Resistance in ohms Returns Type Description Impedance | Edit this page View Source Series(Impedance, Impedance) Series combination of impedances Declaration public static Impedance Series(Impedance z1, Impedance z2) Parameters Type Name Description Impedance z1 Impedance z2 Returns Type Description Impedance | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(string) Declaration public string ToString(string format) Parameters Type Name Description string format Returns Type Description string Operators | Edit this page View Source operator +(Impedance, Impedance) Declaration public static Impedance operator +(Impedance left, Impedance right) Parameters Type Name Description Impedance left Impedance right Returns Type Description Impedance | Edit this page View Source operator /(Impedance, double) Declaration public static Impedance operator /(Impedance impedance, double scalar) Parameters Type Name Description Impedance impedance double scalar Returns Type Description Impedance | Edit this page View Source operator ==(Impedance, Impedance) Declaration public static bool operator ==(Impedance left, Impedance right) Parameters Type Name Description Impedance left Impedance right Returns Type Description bool | Edit this page View Source operator !=(Impedance, Impedance) Declaration public static bool operator !=(Impedance left, Impedance right) Parameters Type Name Description Impedance left Impedance right Returns Type Description bool | Edit this page View Source operator *(Impedance, double) Declaration public static Impedance operator *(Impedance impedance, double scalar) Parameters Type Name Description Impedance impedance double scalar Returns Type Description Impedance | Edit this page View Source operator *(double, Impedance) Declaration public static Impedance operator *(double scalar, Impedance impedance) Parameters Type Name Description double scalar Impedance impedance Returns Type Description Impedance | Edit this page View Source operator -(Impedance, Impedance) Declaration public static Impedance operator -(Impedance left, Impedance right) Parameters Type Name Description Impedance left Impedance right Returns Type Description Impedance Implements IEquatable<T>"
  },
  "docs/api/CircuitTool.InductorCalculator.html": {
    "href": "docs/api/CircuitTool.InductorCalculator.html",
    "title": "Class InductorCalculator | CircuitTool Documentation",
    "summary": "Class InductorCalculator Provides calculations for inductor circuits and characteristics. Inheritance object InductorCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class InductorCalculator Methods | Edit this page View Source CurrentBuildup(double, double, double) Calculates the current buildup in an inductor at time t using I(t) = Ifinal × (1 - e^(-t/τ)). Declaration public static double CurrentBuildup(double finalCurrent, double timeConstant, double time) Parameters Type Name Description double finalCurrent Final steady-state current in amperes (A). double timeConstant Time constant τ in seconds (s). double time Time in seconds (s). Returns Type Description double Inductor current at time t in amperes (A). | Edit this page View Source CurrentDecay(double, double, double) Calculates the current decay in an inductor at time t using I(t) = Iinitial × e^(-t/τ). Declaration public static double CurrentDecay(double initialCurrent, double timeConstant, double time) Parameters Type Name Description double initialCurrent Initial current in amperes (A). double timeConstant Time constant τ in seconds (s). double time Time in seconds (s). Returns Type Description double Inductor current at time t in amperes (A). | Edit this page View Source EnergyStored(double, double) Calculates the energy stored in an inductor using the formula E = 0.5 × L × I². Declaration public static double EnergyStored(double inductance, double current) Parameters Type Name Description double inductance Inductance in henries (H). double current Current through the inductor in amperes (A). Returns Type Description double Energy stored in joules (J). | Edit this page View Source InductiveReactance(double, double) Calculates inductive reactance using the formula XL = 2πfL. Declaration public static double InductiveReactance(double frequency, double inductance) Parameters Type Name Description double frequency Frequency in hertz (Hz). double inductance Inductance in henries (H). Returns Type Description double Inductive reactance in ohms (Ω). | Edit this page View Source ParallelInductance(double[]) Calculates total inductance for inductors in parallel using the formula 1/Ltotal = 1/L1 + 1/L2 + ... Declaration public static double ParallelInductance(double[] inductances) Parameters Type Name Description double[] inductances Array of inductance values in henries (H). Returns Type Description double Total inductance in henries (H). | Edit this page View Source ResonantFrequency(double, double) Calculates the resonant frequency of an LC circuit using f = 1 / (2π√(LC)). Declaration public static double ResonantFrequency(double inductance, double capacitance) Parameters Type Name Description double inductance Inductance in henries (H). double capacitance Capacitance in farads (F). Returns Type Description double Resonant frequency in hertz (Hz). | Edit this page View Source SeriesInductance(double[]) Calculates total inductance for inductors in series using the formula Ltotal = L1 + L2 + ... Declaration public static double SeriesInductance(double[] inductances) Parameters Type Name Description double[] inductances Array of inductance values in henries (H). Returns Type Description double Total inductance in henries (H). | Edit this page View Source TimeConstant(double, double) Calculates the time constant for an RL circuit using the formula τ = L / R. Declaration public static double TimeConstant(double inductance, double resistance) Parameters Type Name Description double inductance Inductance in henries (H). double resistance Resistance in ohms (Ω). Returns Type Description double Time constant in seconds (s)."
  },
  "docs/api/CircuitTool.InteractiveTutorials.html": {
    "href": "docs/api/CircuitTool.InteractiveTutorials.html",
    "title": "Class InteractiveTutorials | CircuitTool Documentation",
    "summary": "Class InteractiveTutorials Interactive tutorial system Inheritance object InteractiveTutorials Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class InteractiveTutorials Methods | Edit this page View Source RunBasicElectronicsTutorial() Declaration public static void RunBasicElectronicsTutorial()"
  },
  "docs/api/CircuitTool.LEDCalculator.html": {
    "href": "docs/api/CircuitTool.LEDCalculator.html",
    "title": "Class LEDCalculator | CircuitTool Documentation",
    "summary": "Class LEDCalculator Provides easy-to-use methods for LED circuit calculations, including resistor values, power, and brightness. Inheritance object LEDCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class LEDCalculator Remarks Example usage: double resistor = LEDCalculator.CalculateResistorValue(5, 2, 0.02); // 150 Ohms double power = LEDCalculator.CalculateLEDPower(5, 0.02); // 0.1W double brightness = LEDCalculator.CalculateBrightness(50); // 0.5 (50%) Methods | Edit this page View Source CalculateBrightness(double) Calculates the brightness ratio when dimming an LED with PWM. Declaration public static double CalculateBrightness(double dutyCycle) Parameters Type Name Description double dutyCycle PWM duty cycle (0-100%). Returns Type Description double Brightness ratio (0-1). Examples double brightness = LEDCalculator.CalculateBrightness(75); // 0.75 | Edit this page View Source CalculateLEDPower(double, double) Calculates the power consumption of an LED circuit using P = V × I. Declaration public static double CalculateLEDPower(double supplyVoltage, double ledCurrent) Parameters Type Name Description double supplyVoltage Supply voltage in volts (V). double ledCurrent LED current in amperes (A). Returns Type Description double Power consumption in watts (W). Examples double power = LEDCalculator.CalculateLEDPower(5, 0.02); // 0.1W | Edit this page View Source CalculateResistorValue(double, double, double) Calculates the required resistor value for an LED circuit using R = (Vs - Vf) / I. Declaration public static double CalculateResistorValue(double supplyVoltage, double ledVoltage, double ledCurrent) Parameters Type Name Description double supplyVoltage Supply voltage in volts (V). double ledVoltage LED forward voltage in volts (V). double ledCurrent Desired LED current in amperes (A). Returns Type Description double Required resistor value in ohms (Ω). Examples double resistor = LEDCalculator.CalculateResistorValue(5, 2, 0.02); // 150 Ohms | Edit this page View Source CalculateSeriesResistor(double, double, int, double) Calculates resistor value for multiple LEDs in series Declaration public static double CalculateSeriesResistor(double supplyVoltage, double ledVoltage, int numLEDs, double ledCurrent) Parameters Type Name Description double supplyVoltage Supply voltage (V) double ledVoltage LED forward voltage (V) int numLEDs Number of LEDs in series double ledCurrent Desired LED current (A) Returns Type Description double Required resistor value in Ohms"
  },
  "docs/api/CircuitTool.Mathematics.FourierTransform.html": {
    "href": "docs/api/CircuitTool.Mathematics.FourierTransform.html",
    "title": "Class FourierTransform | CircuitTool Documentation",
    "summary": "Class FourierTransform Provides basic Fourier transform utilities for circuit analysis Inheritance object FourierTransform Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Mathematics Assembly: .dll Syntax public static class FourierTransform Methods | Edit this page View Source ApplyWindow(double[], WindowType) Applies a window function to reduce spectral leakage Declaration public static double[] ApplyWindow(double[] signal, WindowType windowType = WindowType.Hanning) Parameters Type Name Description double[] signal Input signal WindowType windowType Type of window to apply Returns Type Description double[] Windowed signal | Edit this page View Source CalculateTHD(double[]) Calculates Total Harmonic Distortion (THD) from harmonic content Declaration public static double CalculateTHD(double[] harmonicMagnitudes) Parameters Type Name Description double[] harmonicMagnitudes Harmonic magnitudes (fundamental at index 1) Returns Type Description double THD as a ratio (0-1) | Edit this page View Source DFT(double[]) Computes the DFT of a real-valued signal Declaration public static Complex[] DFT(double[] signal) Parameters Type Name Description double[] signal Real-valued input signal Returns Type Description Complex[] Complex frequency domain representation | Edit this page View Source DFT(Complex[]) Computes the Discrete Fourier Transform (DFT) of a complex signal Declaration public static Complex[] DFT(Complex[] signal) Parameters Type Name Description Complex[] signal Input signal Returns Type Description Complex[] Frequency domain representation | Edit this page View Source ExtractHarmonics(double[], double, double, int) Extracts harmonic content from a periodic signal Declaration public static (double[] magnitudes, double[] phases) ExtractHarmonics(double[] signal, double fundamentalFrequency, double sampleRate, int maxHarmonics = 10) Parameters Type Name Description double[] signal Periodic signal samples double fundamentalFrequency Fundamental frequency in Hz double sampleRate Sample rate in Hz int maxHarmonics Maximum number of harmonics to extract Returns Type Description (double[] magnitudes, double[] phases) Harmonic magnitudes and phases | Edit this page View Source IDFT(Complex[]) Computes the Inverse Discrete Fourier Transform (IDFT) Declaration public static Complex[] IDFT(Complex[] spectrum) Parameters Type Name Description Complex[] spectrum Frequency domain representation Returns Type Description Complex[] Time domain signal | Edit this page View Source PowerSpectralDensity(double[]) Computes power spectral density from a signal Declaration public static double[] PowerSpectralDensity(double[] signal) Parameters Type Name Description double[] signal Input signal Returns Type Description double[] Power spectral density"
  },
  "docs/api/CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.html": {
    "href": "docs/api/CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.html",
    "title": "Class MatrixOperations.ComplexMatrix | CircuitTool Documentation",
    "summary": "Class MatrixOperations.ComplexMatrix Represents a complex matrix for AC circuit analysis Inheritance object MatrixOperations.ComplexMatrix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Mathematics Assembly: .dll Syntax public class MatrixOperations.ComplexMatrix Constructors | Edit this page View Source ComplexMatrix(int, int) Declaration public ComplexMatrix(int rows, int columns) Parameters Type Name Description int rows int columns | Edit this page View Source ComplexMatrix(Complex[,]) Declaration public ComplexMatrix(Complex[,] matrix) Parameters Type Name Description Complex[,] matrix Properties | Edit this page View Source Columns Declaration public int Columns { get; } Property Value Type Description int | Edit this page View Source this[int, int] Declaration public Complex this[int row, int col] { get; set; } Parameters Type Name Description int row int col Property Value Type Description Complex | Edit this page View Source Rows Declaration public int Rows { get; } Property Value Type Description int Methods | Edit this page View Source Determinant() Calculates the determinant (for square matrices only) Declaration public Complex Determinant() Returns Type Description Complex | Edit this page View Source Identity(int) Creates an identity matrix Declaration public static MatrixOperations.ComplexMatrix Identity(int size) Parameters Type Name Description int size Returns Type Description MatrixOperations.ComplexMatrix | Edit this page View Source SolveLinearSystem(ComplexMatrix, Complex[]) Solves the linear system Ax = b using Gaussian elimination Declaration public static Complex[] SolveLinearSystem(MatrixOperations.ComplexMatrix a, Complex[] b) Parameters Type Name Description MatrixOperations.ComplexMatrix a Complex[] b Returns Type Description Complex[] | Edit this page View Source Transpose() Transposes the matrix Declaration public MatrixOperations.ComplexMatrix Transpose() Returns Type Description MatrixOperations.ComplexMatrix Operators | Edit this page View Source operator +(ComplexMatrix, ComplexMatrix) Matrix addition Declaration public static MatrixOperations.ComplexMatrix operator +(MatrixOperations.ComplexMatrix a, MatrixOperations.ComplexMatrix b) Parameters Type Name Description MatrixOperations.ComplexMatrix a MatrixOperations.ComplexMatrix b Returns Type Description MatrixOperations.ComplexMatrix | Edit this page View Source operator *(ComplexMatrix, ComplexMatrix) Matrix multiplication Declaration public static MatrixOperations.ComplexMatrix operator *(MatrixOperations.ComplexMatrix a, MatrixOperations.ComplexMatrix b) Parameters Type Name Description MatrixOperations.ComplexMatrix a MatrixOperations.ComplexMatrix b Returns Type Description MatrixOperations.ComplexMatrix | Edit this page View Source operator *(ComplexMatrix, Complex) Scalar multiplication Declaration public static MatrixOperations.ComplexMatrix operator *(MatrixOperations.ComplexMatrix matrix, Complex scalar) Parameters Type Name Description MatrixOperations.ComplexMatrix matrix Complex scalar Returns Type Description MatrixOperations.ComplexMatrix | Edit this page View Source operator *(Complex, ComplexMatrix) Scalar multiplication Declaration public static MatrixOperations.ComplexMatrix operator *(Complex scalar, MatrixOperations.ComplexMatrix matrix) Parameters Type Name Description Complex scalar MatrixOperations.ComplexMatrix matrix Returns Type Description MatrixOperations.ComplexMatrix | Edit this page View Source operator -(ComplexMatrix, ComplexMatrix) Matrix subtraction Declaration public static MatrixOperations.ComplexMatrix operator -(MatrixOperations.ComplexMatrix a, MatrixOperations.ComplexMatrix b) Parameters Type Name Description MatrixOperations.ComplexMatrix a MatrixOperations.ComplexMatrix b Returns Type Description MatrixOperations.ComplexMatrix"
  },
  "docs/api/CircuitTool.Mathematics.MatrixOperations.html": {
    "href": "docs/api/CircuitTool.Mathematics.MatrixOperations.html",
    "title": "Class MatrixOperations | CircuitTool Documentation",
    "summary": "Class MatrixOperations Provides matrix operations for circuit analysis, particularly for nodal analysis Inheritance object MatrixOperations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Mathematics Assembly: .dll Syntax public static class MatrixOperations Methods | Edit this page View Source CreateNodalAdmittanceMatrix(Complex[], (int from, int to)[], int) Creates a nodal admittance matrix for circuit analysis Declaration public static MatrixOperations.ComplexMatrix CreateNodalAdmittanceMatrix(Complex[] impedances, (int from, int to)[] connections, int numNodes) Parameters Type Name Description Complex[] impedances Array of impedance values (int from, int to)[] connections Array of node connections (from, to) int numNodes Number of nodes in the circuit Returns Type Description MatrixOperations.ComplexMatrix Nodal admittance matrix | Edit this page View Source SolveNodalAnalysis(ComplexMatrix, Complex[]) Solves a nodal analysis problem Declaration public static Complex[] SolveNodalAnalysis(MatrixOperations.ComplexMatrix admittanceMatrix, Complex[] currentVector) Parameters Type Name Description MatrixOperations.ComplexMatrix admittanceMatrix Nodal admittance matrix Complex[] currentVector Current injection vector Returns Type Description Complex[] Node voltages"
  },
  "docs/api/CircuitTool.Mathematics.WindowType.html": {
    "href": "docs/api/CircuitTool.Mathematics.WindowType.html",
    "title": "Enum WindowType | CircuitTool Documentation",
    "summary": "Enum WindowType Window function types for spectral analysis Namespace: CircuitTool.Mathematics Assembly: .dll Syntax public enum WindowType Fields Name Description Blackman Hamming Hanning Rectangular"
  },
  "docs/api/CircuitTool.Mathematics.html": {
    "href": "docs/api/CircuitTool.Mathematics.html",
    "title": "Namespace CircuitTool.Mathematics | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Mathematics Classes FourierTransform Provides basic Fourier transform utilities for circuit analysis MatrixOperations Provides matrix operations for circuit analysis, particularly for nodal analysis MatrixOperations.ComplexMatrix Represents a complex matrix for AC circuit analysis Enums WindowType Window function types for spectral analysis"
  },
  "docs/api/CircuitTool.MotorControlCalculator.MotorType.html": {
    "href": "docs/api/CircuitTool.MotorControlCalculator.MotorType.html",
    "title": "Enum MotorControlCalculator.MotorType | CircuitTool Documentation",
    "summary": "Enum MotorControlCalculator.MotorType Motor types for different calculation methods Namespace: CircuitTool Assembly: .dll Syntax public enum MotorControlCalculator.MotorType Fields Name Description BrushedDC BrushlessDC ServoMotor StepperMotor"
  },
  "docs/api/CircuitTool.MotorControlCalculator.html": {
    "href": "docs/api/CircuitTool.MotorControlCalculator.html",
    "title": "Class MotorControlCalculator | CircuitTool Documentation",
    "summary": "Class MotorControlCalculator Provides specialized calculations for DC motor control and analysis Inheritance object MotorControlCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class MotorControlCalculator Methods | Edit this page View Source CalculateCurrentLimit(MotorType, double, double, double) Calculates current limit for motor protection Declaration public static double CalculateCurrentLimit(MotorControlCalculator.MotorType motorType, double ratedCurrent, double thermalTimeConstant = 300, double operationTime = 60) Parameters Type Name Description MotorControlCalculator.MotorType motorType Type of motor double ratedCurrent Motor rated current double thermalTimeConstant Motor thermal time constant in seconds double operationTime Expected operation time in seconds Returns Type Description double Safe current limit | Edit this page View Source CalculateEncoderResolution(double, double) Calculates encoder resolution requirements Declaration public static int CalculateEncoderResolution(double desiredAccuracy, double gearRatio = 1) Parameters Type Name Description double desiredAccuracy Desired position accuracy in degrees double gearRatio Gear reduction ratio Returns Type Description int Required encoder pulses per revolution | Edit this page View Source CalculateHBridgeCurrent(double, double, double, double) Calculates H-bridge current requirements for DC motor Declaration public static double CalculateHBridgeCurrent(double motorVoltage, double motorCurrent, double stallCurrent, double safetyFactor = 1.8) Parameters Type Name Description double motorVoltage Motor rated voltage double motorCurrent Motor rated current double stallCurrent Motor stall current double safetyFactor Safety factor (typically 1.5-2.0) Returns Type Description double Required H-bridge current rating | Edit this page View Source CalculateMotorDriverThermal(double, double, double, double) Calculates motor driver heat sink requirements Declaration public static double CalculateMotorDriverThermal(double motorCurrent, double driverRdsOn, double ambientTemp = 25, double maxJunctionTemp = 150) Parameters Type Name Description double motorCurrent Motor current in amperes double driverRdsOn Driver MOSFET RDS(on) in ohms double ambientTemp Ambient temperature in °C double maxJunctionTemp Maximum junction temperature in °C Returns Type Description double Required thermal resistance in °C/W | Edit this page View Source CalculatePIDGains(double, double, double) Calculates PID controller gains for motor position control Declaration public static (double Kp, double Ki, double Kd) CalculatePIDGains(double motorInertia, double motorTorqueConstant, double desiredBandwidth) Parameters Type Name Description double motorInertia Motor + load inertia in kg⋅m² double motorTorqueConstant Motor torque constant in Nm/A double desiredBandwidth Desired closed-loop bandwidth in Hz Returns Type Description (double minResistance, double maxResistance, double recommendedResistance) PID gains (Kp, Ki, Kd) | Edit this page View Source CalculateRampTime(double, double) Calculates motor acceleration/deceleration ramp Declaration public static double CalculateRampTime(double targetSpeed, double acceleration) Parameters Type Name Description double targetSpeed Target speed in RPM double acceleration Acceleration in RPM/s Returns Type Description double Ramp time in seconds | Edit this page View Source CalculateRegenerativePower(double, double, double) Calculates regenerative braking power Declaration public static double CalculateRegenerativePower(double motorSpeed, double motorTorque, double efficiency = 0.85) Parameters Type Name Description double motorSpeed Motor speed in RPM double motorTorque Braking torque in Nm double efficiency Motor efficiency (0-1) Returns Type Description double Regenerated power in watts | Edit this page View Source CalculateStepperResolution(int, int, double) Calculates stepper motor step resolution Declaration public static double CalculateStepperResolution(int stepsPerRevolution, int microsteps = 1, double gearRatio = 1) Parameters Type Name Description int stepsPerRevolution Motor steps per revolution int microsteps Microstepping factor double gearRatio Gear reduction ratio (1 = no gears) Returns Type Description double Angular resolution in degrees per step | Edit this page View Source GenerateControlCode(MotorType, string) Generates motor control code template Declaration public static string GenerateControlCode(MotorControlCalculator.MotorType motorType, string controlInterface = \"PWM\") Parameters Type Name Description MotorControlCalculator.MotorType motorType Type of motor string controlInterface Control interface (PWM, SPI, etc.) Returns Type Description string Code template string"
  },
  "docs/api/CircuitTool.OhmsLawCalculator.html": {
    "href": "docs/api/CircuitTool.OhmsLawCalculator.html",
    "title": "Class OhmsLawCalculator | CircuitTool Documentation",
    "summary": "Class OhmsLawCalculator Provides calculations for Ohm's Law (V = I × R). Inheritance object OhmsLawCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class OhmsLawCalculator Methods | Edit this page View Source Current(double, double) Calculates current using Ohm's Law (I = V / R). Declaration public static double Current(double voltage, double resistance) Parameters Type Name Description double voltage Voltage in volts (V). double resistance Resistance in ohms (Ω). Returns Type Description double Current in amperes (A). | Edit this page View Source Resistance(double, double) Calculates resistance using Ohm's Law (R = V / I). Declaration public static double Resistance(double voltage, double current) Parameters Type Name Description double voltage Voltage in volts (V). double current Current in amperes (A). Returns Type Description double Resistance in ohms (Ω). | Edit this page View Source Voltage(double, double) Calculates voltage using Ohm's Law (V = I × R). Declaration public static double Voltage(double current, double resistance) Parameters Type Name Description double current Current in amperes (A). double resistance Resistance in ohms (Ω). Returns Type Description double Voltage in volts (V)."
  },
  "docs/api/CircuitTool.PCBDesignCalculator.PCBStackup.html": {
    "href": "docs/api/CircuitTool.PCBDesignCalculator.PCBStackup.html",
    "title": "Enum PCBDesignCalculator.PCBStackup | CircuitTool Documentation",
    "summary": "Enum PCBDesignCalculator.PCBStackup PCB layer stackup types Namespace: CircuitTool Assembly: .dll Syntax public enum PCBDesignCalculator.PCBStackup Fields Name Description EightLayer FourLayer SixLayer TwoLayer"
  },
  "docs/api/CircuitTool.PCBDesignCalculator.html": {
    "href": "docs/api/CircuitTool.PCBDesignCalculator.html",
    "title": "Class PCBDesignCalculator | CircuitTool Documentation",
    "summary": "Class PCBDesignCalculator Provides calculations and utilities for PCB design and layout Inheritance object PCBDesignCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class PCBDesignCalculator Methods | Edit this page View Source CalculateConductorResistance(double, double, double, double) Calculates PCB conductor resistance Declaration public static double CalculateConductorResistance(double length, double width, double thickness = 1, double temperature = 25) Parameters Type Name Description double length Conductor length in inches double width Conductor width in mils double thickness Copper thickness in oz double temperature Operating temperature in °C Returns Type Description double Resistance in ohms | Edit this page View Source CalculateDifferentialImpedance(double, double, double, double) Calculates differential pair impedance for high-speed signals Declaration public static double CalculateDifferentialImpedance(double traceWidth, double traceSpacing, double dielectricHeight, double dielectricConstant = 4.3) Parameters Type Name Description double traceWidth Trace width in mils double traceSpacing Spacing between traces in mils double dielectricHeight Height above ground plane in mils double dielectricConstant PCB dielectric constant (typically 4.2-4.8) Returns Type Description double Differential impedance in ohms | Edit this page View Source CalculateMinimumAnnularRing(double, int, int) Calculates minimum annular ring for vias Declaration public static double CalculateMinimumAnnularRing(double drillDiameter, int pcbClass = 2, int layerCount = 4) Parameters Type Name Description double drillDiameter Drill diameter in mils int pcbClass PCB class (1, 2, or 3) int layerCount Number of layers Returns Type Description double Minimum annular ring in mils | Edit this page View Source CalculatePCBCapacitance(double, double, double) Calculates PCB capacitance between layers Declaration public static double CalculatePCBCapacitance(double area, double dielectricThickness, double dielectricConstant = 4.3) Parameters Type Name Description double area Overlap area in square inches double dielectricThickness Dielectric thickness in mils double dielectricConstant Dielectric constant Returns Type Description double Capacitance in picofarads | Edit this page View Source CalculateSolderMaskExpansion(double, double) Calculates solder mask expansion Declaration public static double CalculateSolderMaskExpansion(double padDimension, double pitchDistance) Parameters Type Name Description double padDimension Pad dimension in mils double pitchDistance Component pitch in mils Returns Type Description double Recommended solder mask expansion in mils | Edit this page View Source CalculateThermalResistance(double, double, double) Calculates PCB thermal resistance Declaration public static double CalculateThermalResistance(double copperArea, double copperThickness = 1, double airflow = 0) Parameters Type Name Description double copperArea Copper area in square inches double copperThickness Copper thickness in oz double airflow Air flow velocity in m/s (0 for natural convection) Returns Type Description double Thermal resistance in °C/W | Edit this page View Source CalculateTraceWidth(double, double, double, bool) Calculates trace width for current carrying capacity Declaration public static double CalculateTraceWidth(double current, double copperThickness = 1, double temperatureRise = 10, bool isInternal = false) Parameters Type Name Description double current Current in amperes double copperThickness Copper thickness in oz (typically 1 or 2) double temperatureRise Allowable temperature rise in °C bool isInternal True if trace is internal layer Returns Type Description double Required trace width in mils | Edit this page View Source CalculateViaCurrent(double, double, double, double) Calculates via current carrying capacity Declaration public static double CalculateViaCurrent(double viaDiameter, double viaLength, double copperThickness = 1, double temperatureRise = 10) Parameters Type Name Description double viaDiameter Via barrel diameter in mils double viaLength Via length (PCB thickness) in mils double copperThickness Plating thickness in mils double temperatureRise Allowable temperature rise in °C Returns Type Description double Maximum current capacity in amperes | Edit this page View Source GenerateDesignRules(PCBStackup, int, double) Generates PCB design rules summary Declaration public static string GenerateDesignRules(PCBDesignCalculator.PCBStackup stackup, int pcbClass = 2, double signalFrequency = 100) Parameters Type Name Description PCBDesignCalculator.PCBStackup stackup PCB layer stackup int pcbClass PCB class double signalFrequency Maximum signal frequency in MHz Returns Type Description string Design rules text"
  },
  "docs/api/CircuitTool.Performance.BulkOperations.html": {
    "href": "docs/api/CircuitTool.Performance.BulkOperations.html",
    "title": "Class BulkOperations | CircuitTool Documentation",
    "summary": "Class BulkOperations Provides memory-efficient bulk operations for circuit calculations Inheritance object BulkOperations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Performance Assembly: .dll Syntax public static class BulkOperations Methods | Edit this page View Source BulkFrequencyResponse(double[], (double R, double L, double C)[]) Calculates frequency response for multiple circuits efficiently Declaration public static double[][] BulkFrequencyResponse(double[] frequencies, (double R, double L, double C)[] circuits) Parameters Type Name Description double[] frequencies Frequency points (double R, double L, double C)[] circuits Circuit parameters (R, L, C) Returns Type Description double[][] Frequency response magnitudes | Edit this page View Source BulkParallelResistance(IEnumerable<double[]>) Performs bulk parallel resistance calculations with minimal allocations Declaration public static IEnumerable<double> BulkParallelResistance(IEnumerable<double[]> resistanceSets) Parameters Type Name Description IEnumerable<double[]> resistanceSets Sets of resistances to calculate in parallel Returns Type Description IEnumerable<double> Equivalent parallel resistances | Edit this page View Source BulkPowerCalculation(double[], double[], double[]) Efficient batch processing of power calculations Declaration public static (double real, double reactive, double apparent)[] BulkPowerCalculation(double[] voltages, double[] currents, double[] phases) Parameters Type Name Description double[] voltages Voltage values double[] currents Current values double[] phases Phase angles in radians Returns Type Description (double R, double L, double C)[] Complex power values (real, reactive, apparent) | Edit this page View Source StreamingCalculation<TInput, TResult>(IEnumerable<TInput>, Func<TInput[], TResult[]>, int) Memory-efficient streaming calculation for large datasets Declaration public static IEnumerable<TResult> StreamingCalculation<TInput, TResult>(IEnumerable<TInput> data, Func<TInput[], TResult[]> calculator, int batchSize = 1024) Parameters Type Name Description IEnumerable<TInput> data Input data stream Func<TInput[], TResult[]> calculator Calculation function int batchSize Size of processing batches Returns Type Description IEnumerable<TResult> Results stream Type Parameters Name Description TInput TResult"
  },
  "docs/api/CircuitTool.Performance.CalculationCache.html": {
    "href": "docs/api/CircuitTool.Performance.CalculationCache.html",
    "title": "Class CalculationCache | CircuitTool Documentation",
    "summary": "Class CalculationCache Provides caching for expensive electrical calculations Inheritance object CalculationCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Performance Assembly: .dll Syntax public static class CalculationCache Properties | Edit this page View Source MaxCacheSize Gets or sets the maximum cache size Declaration public static int MaxCacheSize { get; set; } Property Value Type Description int Methods | Edit this page View Source Clear() Clears the entire cache Declaration public static void Clear() | Edit this page View Source CreateKey(params object[]) Creates a cache key from multiple parameters Declaration public static string CreateKey(params object[] parameters) Parameters Type Name Description object[] parameters Parameters to include in the key Returns Type Description string Cache key string | Edit this page View Source GetOrCompute<T>(string, Func<T>) Gets a cached result or computes and caches it Declaration public static T GetOrCompute<T>(string key, Func<T> factory) Parameters Type Name Description string key Cache key Func<T> factory Function to compute the result if not cached Returns Type Description T Cached or computed result Type Parameters Name Description T Result type"
  },
  "docs/api/CircuitTool.Performance.PerformanceMonitor.html": {
    "href": "docs/api/CircuitTool.Performance.PerformanceMonitor.html",
    "title": "Class PerformanceMonitor | CircuitTool Documentation",
    "summary": "Class PerformanceMonitor Performance monitoring and optimization utilities Inheritance object PerformanceMonitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Performance Assembly: .dll Syntax public static class PerformanceMonitor Methods | Edit this page View Source ClearStats() Clears all performance metrics Declaration public static void ClearStats() | Edit this page View Source GetAllStats() Gets all performance statistics Declaration public static Dictionary<string, (long callCount, double averageMs, long totalMs)> GetAllStats() Returns Type Description Dictionary<string, (long callCount, double averageMs, long totalMs)> Dictionary of all performance metrics | Edit this page View Source GetStats(string) Gets performance statistics for an operation Declaration public static (long callCount, double averageMs, long totalMs)? GetStats(string operationName) Parameters Type Name Description string operationName Name of the operation Returns Type Description (long callCount, double averageMs, long totalMs)? Performance statistics | Edit this page View Source MeasureOperation<T>(string, Func<T>) Measures and records execution time for a function Declaration public static T MeasureOperation<T>(string operationName, Func<T> operation) Parameters Type Name Description string operationName Name of the operation for tracking Func<T> operation Function to execute and measure Returns Type Description T Result of the operation Type Parameters Name Description T Return type"
  },
  "docs/api/CircuitTool.Performance.VectorizedCalculations.html": {
    "href": "docs/api/CircuitTool.Performance.VectorizedCalculations.html",
    "title": "Class VectorizedCalculations | CircuitTool Documentation",
    "summary": "Class VectorizedCalculations Provides performance-optimized calculations using SIMD operations Inheritance object VectorizedCalculations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Performance Assembly: .dll Syntax public static class VectorizedCalculations Methods | Edit this page View Source ImpedanceMagnitudesVectorized(double[], double[]) Vectorized impedance magnitude calculation for multiple AC circuits Declaration public static double[] ImpedanceMagnitudesVectorized(double[] resistances, double[] reactances) Parameters Type Name Description double[] resistances Array of resistance values double[] reactances Array of reactance values Returns Type Description double[] Array of impedance magnitudes | Edit this page View Source ParallelResistanceVectorized(double[]) Calculates multiple parallel resistances using SIMD operations Declaration public static double ParallelResistanceVectorized(double[] resistances) Parameters Type Name Description double[] resistances Array of resistance values Returns Type Description double Equivalent parallel resistance | Edit this page View Source RMSVectorized(double[][]) Calculates RMS values for multiple signals using SIMD operations Declaration public static double[] RMSVectorized(double[][] signals) Parameters Type Name Description double[][] signals Array of signal arrays Returns Type Description double[] RMS values for each signal | Edit this page View Source RealPowerVectorized(double[], double[], double[]) Vectorized power calculation for multiple circuits Declaration public static double[] RealPowerVectorized(double[] voltages, double[] currents, double[] powerFactors) Parameters Type Name Description double[] voltages Array of voltage values double[] currents Array of current values double[] powerFactors Array of power factor values Returns Type Description double[] Array of real power values"
  },
  "docs/api/CircuitTool.Performance.html": {
    "href": "docs/api/CircuitTool.Performance.html",
    "title": "Namespace CircuitTool.Performance | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Performance Classes BulkOperations Provides memory-efficient bulk operations for circuit calculations CalculationCache Provides caching for expensive electrical calculations PerformanceMonitor Performance monitoring and optimization utilities VectorizedCalculations Provides performance-optimized calculations using SIMD operations"
  },
  "docs/api/CircuitTool.PhysicsCircuitCalculators.html": {
    "href": "docs/api/CircuitTool.PhysicsCircuitCalculators.html",
    "title": "Class PhysicsCircuitCalculators | CircuitTool Documentation",
    "summary": "Class PhysicsCircuitCalculators Provides additional calculators for electrical engineering and physics, including impedance, resonance, Q factor, and more. Inheritance object PhysicsCircuitCalculators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class PhysicsCircuitCalculators Remarks Example usage: double xl = PhysicsCircuitCalculators.InductiveReactance(1000, 0.01); // 62.83 Ohms double zrlc = PhysicsCircuitCalculators.SeriesRLCImpedance(100, 0.01, 0.000001, 1000); // 100.0 Ohms double fres = PhysicsCircuitCalculators.ResonantFrequencyLC(0.01, 0.000001); // 1591.55 Hz double q = PhysicsCircuitCalculators.QFactor(1000, 0.01, 100); // 0.628 double energyL = PhysicsCircuitCalculators.EnergyStoredInductor(0.01, 2); // 0.02 J double pf = PhysicsCircuitCalculators.PowerFactor(100, 80); // 0.8 double rms = PhysicsCircuitCalculators.RMS(new[] {1.0, 2.0, 3.0}); // 2.16 Methods | Edit this page View Source EnergyStoredInductor(double, double) Calculates the energy stored in an inductor (E = 0.5 × L × I²). Declaration public static double EnergyStoredInductor(double inductance, double current) Parameters Type Name Description double inductance Inductance in henries (H). double current Current in amperes (A). Returns Type Description double Energy in joules (J). | Edit this page View Source InductiveReactance(double, double) Calculates inductive reactance (Xl = 2πfL). Declaration public static double InductiveReactance(double frequency, double inductance) Parameters Type Name Description double frequency Frequency in hertz (Hz). double inductance Inductance in henries (H). Returns Type Description double Inductive reactance in ohms (Ω). | Edit this page View Source PowerFactor(double, double) Calculates the power factor (PF = real power / apparent power). Declaration public static double PowerFactor(double realPower, double apparentPower) Parameters Type Name Description double realPower Real power in watts (W). double apparentPower Apparent power in volt-amperes (VA). Returns Type Description double Power factor (0 to 1). | Edit this page View Source QFactor(double, double, double) Calculates Q factor for a series RLC circuit (Q = 1/R * sqrt(L/C)). Declaration public static double QFactor(double resistance, double inductance, double capacitance) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductance Inductance in henries (H). double capacitance Capacitance in farads (F). Returns Type Description double Q factor (dimensionless). | Edit this page View Source RMS(double[]) Calculates the root mean square (RMS) value of a set of values. Declaration public static double RMS(double[] values) Parameters Type Name Description double[] values Array of values. Returns Type Description double RMS value. | Edit this page View Source ResonantFrequencyLC(double, double) Calculates resonant frequency for an LC circuit (f = 1 / (2π√(LC))). Declaration public static double ResonantFrequencyLC(double inductance, double capacitance) Parameters Type Name Description double inductance Inductance in henries (H). double capacitance Capacitance in farads (F). Returns Type Description double Resonant frequency in hertz (Hz). | Edit this page View Source SeriesRCImpedance(double, double, double) Calculates impedance of a series RC circuit (Z = sqrt(R^2 + (Xc)^2)). Declaration public static double SeriesRCImpedance(double resistance, double capacitance, double frequency) Parameters Type Name Description double resistance Resistance in ohms (Ω). double capacitance Capacitance in farads (F). double frequency Frequency in hertz (Hz). Returns Type Description double Impedance in ohms (Ω). | Edit this page View Source SeriesRLCImpedance(double, double, double, double) Calculates impedance of a series RLC circuit (Z = sqrt(R^2 + (Xl - Xc)^2)). Declaration public static double SeriesRLCImpedance(double resistance, double inductance, double capacitance, double frequency) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductance Inductance in henries (H). double capacitance Capacitance in farads (F). double frequency Frequency in hertz (Hz). Returns Type Description double Impedance in ohms (Ω). | Edit this page View Source SeriesRLImpedance(double, double, double) Calculates impedance of a series RL circuit (Z = sqrt(R^2 + (Xl)^2)). Declaration public static double SeriesRLImpedance(double resistance, double inductance, double frequency) Parameters Type Name Description double resistance Resistance in ohms (Ω). double inductance Inductance in henries (H). double frequency Frequency in hertz (Hz). Returns Type Description double Impedance in ohms (Ω)."
  },
  "docs/api/CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.html",
    "title": "Class AdvancedPowerAnalysis | CircuitTool Documentation",
    "summary": "Class AdvancedPowerAnalysis Advanced power analysis including three-phase systems and power quality Inheritance object AdvancedPowerAnalysis Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public static class AdvancedPowerAnalysis Methods | Edit this page View Source AnalyzeHarmonicPower(ACVoltage, ACCurrent, ACVoltage[], ACCurrent[]) Analyzes harmonic content and calculates power quality metrics Declaration public static HarmonicPowerAnalysis AnalyzeHarmonicPower(ACVoltage fundamentalVoltage, ACCurrent fundamentalCurrent, ACVoltage[] voltageHarmonics, ACCurrent[] currentHarmonics) Parameters Type Name Description ACVoltage fundamentalVoltage Fundamental voltage component ACCurrent fundamentalCurrent Fundamental current component ACVoltage[] voltageHarmonics Voltage harmonic components ACCurrent[] currentHarmonics Current harmonic components Returns Type Description HarmonicPowerAnalysis Harmonic power analysis results | Edit this page View Source AnalyzePowerQuality(double[], double[], double, double) Calculates power quality indices Declaration public static PowerQualityAnalysis AnalyzePowerQuality(double[] voltageWaveform, double[] currentWaveform, double nominalVoltage, double nominalFrequency) Parameters Type Name Description double[] voltageWaveform Voltage waveform samples double[] currentWaveform Current waveform samples double nominalVoltage Nominal voltage RMS value double nominalFrequency Nominal frequency in Hz Returns Type Description PowerQualityAnalysis Power quality analysis results | Edit this page View Source CalculateBalancedThreePhasePower(double, double, double, bool) Calculates balanced three-phase power from line values Declaration public static BalancedThreePhasePower CalculateBalancedThreePhasePower(double lineToLineVoltage, double lineCurrent, double powerFactor, bool isLeading = false) Parameters Type Name Description double lineToLineVoltage Line-to-line voltage (RMS) double lineCurrent Line current (RMS) double powerFactor Power factor bool isLeading True if leading power factor Returns Type Description BalancedThreePhasePower Balanced three-phase power results | Edit this page View Source CalculateThreePhasePower(ACVoltage, ACVoltage, ACVoltage, ACCurrent, ACCurrent, ACCurrent) Calculates three-phase power values Declaration public static ThreePhasePower CalculateThreePhasePower(ACVoltage voltageA, ACVoltage voltageB, ACVoltage voltageC, ACCurrent currentA, ACCurrent currentB, ACCurrent currentC) Parameters Type Name Description ACVoltage voltageA Phase A voltage ACVoltage voltageB Phase B voltage ACVoltage voltageC Phase C voltage ACCurrent currentA Phase A current ACCurrent currentB Phase B current ACCurrent currentC Phase C current Returns Type Description ThreePhasePower Three-phase power analysis results"
  },
  "docs/api/CircuitTool.PowerAnalysis.BalancedThreePhasePower.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.BalancedThreePhasePower.html",
    "title": "Struct BalancedThreePhasePower | CircuitTool Documentation",
    "summary": "Struct BalancedThreePhasePower Balanced three-phase power results Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public readonly struct BalancedThreePhasePower Constructors | Edit this page View Source BalancedThreePhasePower(double, double, double, double, double, double, double, double, bool) Declaration public BalancedThreePhasePower(double realPower, double reactivePower, double apparentPower, double lineToLineVoltage, double phaseVoltage, double lineCurrent, double phaseCurrent, double powerFactor, bool isLeading) Parameters Type Name Description double realPower double reactivePower double apparentPower double lineToLineVoltage double phaseVoltage double lineCurrent double phaseCurrent double powerFactor bool isLeading Properties | Edit this page View Source ApparentPower Declaration public double ApparentPower { get; } Property Value Type Description double | Edit this page View Source IsLeading Declaration public bool IsLeading { get; } Property Value Type Description bool | Edit this page View Source LineCurrent Declaration public double LineCurrent { get; } Property Value Type Description double | Edit this page View Source LineToLineVoltage Declaration public double LineToLineVoltage { get; } Property Value Type Description double | Edit this page View Source PhaseCurrent Declaration public double PhaseCurrent { get; } Property Value Type Description double | Edit this page View Source PhaseVoltage Declaration public double PhaseVoltage { get; } Property Value Type Description double | Edit this page View Source PowerFactor Declaration public double PowerFactor { get; } Property Value Type Description double | Edit this page View Source PowerFactorType Declaration public string PowerFactorType { get; } Property Value Type Description string | Edit this page View Source ReactivePower Declaration public double ReactivePower { get; } Property Value Type Description double | Edit this page View Source RealPower Declaration public double RealPower { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.PowerAnalysis.HarmonicPowerAnalysis.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.HarmonicPowerAnalysis.html",
    "title": "Struct HarmonicPowerAnalysis | CircuitTool Documentation",
    "summary": "Struct HarmonicPowerAnalysis Harmonic power analysis results Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public readonly struct HarmonicPowerAnalysis Constructors | Edit this page View Source HarmonicPowerAnalysis(Complex, Complex, Complex, Complex[], double, double, double, double, double) Declaration public HarmonicPowerAnalysis(Complex fundamentalPower, Complex totalHarmonicPower, Complex distortionPower, Complex[] harmonicPowers, double voltageTHD, double currentTHD, double truePowerFactor, double displacementPowerFactor, double distortionFactor) Parameters Type Name Description Complex fundamentalPower Complex totalHarmonicPower Complex distortionPower Complex[] harmonicPowers double voltageTHD double currentTHD double truePowerFactor double displacementPowerFactor double distortionFactor Properties | Edit this page View Source CurrentTHD Declaration public double CurrentTHD { get; } Property Value Type Description double | Edit this page View Source CurrentTHDPercent Declaration public double CurrentTHDPercent { get; } Property Value Type Description double | Edit this page View Source DisplacementPowerFactor Declaration public double DisplacementPowerFactor { get; } Property Value Type Description double | Edit this page View Source DistortionFactor Declaration public double DistortionFactor { get; } Property Value Type Description double | Edit this page View Source DistortionPower Declaration public Complex DistortionPower { get; } Property Value Type Description Complex | Edit this page View Source FundamentalPower Declaration public Complex FundamentalPower { get; } Property Value Type Description Complex | Edit this page View Source HarmonicPowers Declaration public Complex[] HarmonicPowers { get; } Property Value Type Description Complex[] | Edit this page View Source TotalHarmonicPower Declaration public Complex TotalHarmonicPower { get; } Property Value Type Description Complex | Edit this page View Source TruePowerFactor Declaration public double TruePowerFactor { get; } Property Value Type Description double | Edit this page View Source VoltageTHD Declaration public double VoltageTHD { get; } Property Value Type Description double | Edit this page View Source VoltageTHDPercent Declaration public double VoltageTHDPercent { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.PowerAnalysis.PowerQualityAnalysis.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.PowerQualityAnalysis.html",
    "title": "Struct PowerQualityAnalysis | CircuitTool Documentation",
    "summary": "Struct PowerQualityAnalysis Power quality analysis results Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public readonly struct PowerQualityAnalysis Constructors | Edit this page View Source PowerQualityAnalysis(double, double, double, double, double, double, double, double, double) Declaration public PowerQualityAnalysis(double voltageRMS, double currentRMS, double voltageRegulation, double voltageCrestFactor, double currentCrestFactor, double voltageFormFactor, double powerFactor, double frequencyDeviation, double voltageUnbalance) Parameters Type Name Description double voltageRMS double currentRMS double voltageRegulation double voltageCrestFactor double currentCrestFactor double voltageFormFactor double powerFactor double frequencyDeviation double voltageUnbalance Properties | Edit this page View Source CurrentCrestFactor Declaration public double CurrentCrestFactor { get; } Property Value Type Description double | Edit this page View Source CurrentRMS Declaration public double CurrentRMS { get; } Property Value Type Description double | Edit this page View Source FrequencyDeviation Declaration public double FrequencyDeviation { get; } Property Value Type Description double | Edit this page View Source FrequencyDeviationPercent Declaration public double FrequencyDeviationPercent { get; } Property Value Type Description double | Edit this page View Source PowerFactor Declaration public double PowerFactor { get; } Property Value Type Description double | Edit this page View Source VoltageCrestFactor Declaration public double VoltageCrestFactor { get; } Property Value Type Description double | Edit this page View Source VoltageFormFactor Declaration public double VoltageFormFactor { get; } Property Value Type Description double | Edit this page View Source VoltageRMS Declaration public double VoltageRMS { get; } Property Value Type Description double | Edit this page View Source VoltageRegulation Declaration public double VoltageRegulation { get; } Property Value Type Description double | Edit this page View Source VoltageRegulationPercent Declaration public double VoltageRegulationPercent { get; } Property Value Type Description double | Edit this page View Source VoltageUnbalance Declaration public double VoltageUnbalance { get; } Property Value Type Description double | Edit this page View Source VoltageUnbalancePercent Declaration public double VoltageUnbalancePercent { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.PowerAnalysis.SequenceComponents.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.SequenceComponents.html",
    "title": "Struct SequenceComponents | CircuitTool Documentation",
    "summary": "Struct SequenceComponents Sequence components for three-phase analysis Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public readonly struct SequenceComponents Constructors | Edit this page View Source SequenceComponents(ACVoltage, ACVoltage, ACVoltage) Declaration public SequenceComponents(ACVoltage positiveSequence, ACVoltage negativeSequence, ACVoltage zeroSequence) Parameters Type Name Description ACVoltage positiveSequence ACVoltage negativeSequence ACVoltage zeroSequence Properties | Edit this page View Source NegativeSequence Declaration public ACVoltage NegativeSequence { get; } Property Value Type Description ACVoltage | Edit this page View Source PositiveSequence Declaration public ACVoltage PositiveSequence { get; } Property Value Type Description ACVoltage | Edit this page View Source UnbalanceFactor Declaration public double UnbalanceFactor { get; } Property Value Type Description double | Edit this page View Source ZeroSequence Declaration public ACVoltage ZeroSequence { get; } Property Value Type Description ACVoltage Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.PowerAnalysis.ThreePhasePower.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.ThreePhasePower.html",
    "title": "Struct ThreePhasePower | CircuitTool Documentation",
    "summary": "Struct ThreePhasePower Three-phase power analysis results Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.PowerAnalysis Assembly: .dll Syntax public readonly struct ThreePhasePower Constructors | Edit this page View Source ThreePhasePower(double, double, double, Complex, Complex, Complex, double, SequenceComponents) Declaration public ThreePhasePower(double totalRealPower, double totalReactivePower, double totalApparentPower, Complex phaseAPower, Complex phaseBPower, Complex phaseCPower, double lineToLineVoltage, SequenceComponents sequenceComponents) Parameters Type Name Description double totalRealPower double totalReactivePower double totalApparentPower Complex phaseAPower Complex phaseBPower Complex phaseCPower double lineToLineVoltage SequenceComponents sequenceComponents Properties | Edit this page View Source LineToLineVoltage Declaration public double LineToLineVoltage { get; } Property Value Type Description double | Edit this page View Source PhaseAPower Declaration public Complex PhaseAPower { get; } Property Value Type Description Complex | Edit this page View Source PhaseBPower Declaration public Complex PhaseBPower { get; } Property Value Type Description Complex | Edit this page View Source PhaseCPower Declaration public Complex PhaseCPower { get; } Property Value Type Description Complex | Edit this page View Source PowerFactor Declaration public double PowerFactor { get; } Property Value Type Description double | Edit this page View Source SequenceComponents Declaration public SequenceComponents SequenceComponents { get; } Property Value Type Description SequenceComponents | Edit this page View Source TotalApparentPower Declaration public double TotalApparentPower { get; } Property Value Type Description double | Edit this page View Source TotalReactivePower Declaration public double TotalReactivePower { get; } Property Value Type Description double | Edit this page View Source TotalRealPower Declaration public double TotalRealPower { get; } Property Value Type Description double Methods | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString()"
  },
  "docs/api/CircuitTool.PowerAnalysis.html": {
    "href": "docs/api/CircuitTool.PowerAnalysis.html",
    "title": "Namespace CircuitTool.PowerAnalysis | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.PowerAnalysis Classes AdvancedPowerAnalysis Advanced power analysis including three-phase systems and power quality Structs BalancedThreePhasePower Balanced three-phase power results HarmonicPowerAnalysis Harmonic power analysis results PowerQualityAnalysis Power quality analysis results SequenceComponents Sequence components for three-phase analysis ThreePhasePower Three-phase power analysis results"
  },
  "docs/api/CircuitTool.PowerCalculator.html": {
    "href": "docs/api/CircuitTool.PowerCalculator.html",
    "title": "Class PowerCalculator | CircuitTool Documentation",
    "summary": "Class PowerCalculator Provides easy-to-use methods for common electrical power calculations. Inheritance object PowerCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class PowerCalculator Remarks Example usage: double watts = PowerCalculator.Power(12, 2); // 24W double watts2 = PowerCalculator.PowerFromCurrentResistance(2, 10); // 40W double watts3 = PowerCalculator.PowerFromVoltageResistance(12, 6); // 24W Methods | Edit this page View Source Power(double, double) Calculates electrical power using the formula P = V × I. Declaration public static double Power(double voltage, double current) Parameters Type Name Description double voltage The voltage in volts (V). double current The current in amperes (A). Returns Type Description double The calculated power in watts (W). Examples double power = PowerCalculator.Power(5, 2); // 10W | Edit this page View Source PowerFromCurrentResistance(double, double) Calculates electrical power using the formula P = I² × R. Declaration public static double PowerFromCurrentResistance(double current, double resistance) Parameters Type Name Description double current The current in amperes (A). double resistance The resistance in ohms (Ω). Returns Type Description double The calculated power in watts (W). Examples double power = PowerCalculator.PowerFromCurrentResistance(3, 4); // 36W | Edit this page View Source PowerFromVoltageResistance(double, double) Calculates electrical power using the formula P = V² / R. Declaration public static double PowerFromVoltageResistance(double voltage, double resistance) Parameters Type Name Description double voltage The voltage in volts (V). double resistance The resistance in ohms (Ω). Returns Type Description double The calculated power in watts (W). Examples double power = PowerCalculator.PowerFromVoltageResistance(10, 5); // 20W"
  },
  "docs/api/CircuitTool.PowerFactorCalculator.html": {
    "href": "docs/api/CircuitTool.PowerFactorCalculator.html",
    "title": "Class PowerFactorCalculator | CircuitTool Documentation",
    "summary": "Class PowerFactorCalculator Inheritance object PowerFactorCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class PowerFactorCalculator Methods | Edit this page View Source PowerFactor(double, double) Declaration public static double PowerFactor(double realPowerWatts, double apparentPowerVA) Parameters Type Name Description double realPowerWatts double apparentPowerVA Returns Type Description double"
  },
  "docs/api/CircuitTool.PowerSupplyCalculator.PSUTopology.html": {
    "href": "docs/api/CircuitTool.PowerSupplyCalculator.PSUTopology.html",
    "title": "Enum PowerSupplyCalculator.PSUTopology | CircuitTool Documentation",
    "summary": "Enum PowerSupplyCalculator.PSUTopology Power supply topology types Namespace: CircuitTool Assembly: .dll Syntax public enum PowerSupplyCalculator.PSUTopology Fields Name Description Boost Buck BuckBoost Flyback Forward Linear SEPIC"
  },
  "docs/api/CircuitTool.PowerSupplyCalculator.html": {
    "href": "docs/api/CircuitTool.PowerSupplyCalculator.html",
    "title": "Class PowerSupplyCalculator | CircuitTool Documentation",
    "summary": "Class PowerSupplyCalculator Provides calculations and utilities for power supply design and analysis Inheritance object PowerSupplyCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class PowerSupplyCalculator Methods | Edit this page View Source CalculateBoostInductor(double, double, double, double, double) Calculates boost converter inductor value Declaration public static double CalculateBoostInductor(double inputVoltage, double outputVoltage, double outputCurrent, double switchingFrequency, double currentRipple = 0.2) Parameters Type Name Description double inputVoltage Input voltage double outputVoltage Output voltage double outputCurrent Output current double switchingFrequency Switching frequency in Hz double currentRipple Acceptable current ripple (0.1 = 10%) Returns Type Description double Required inductor value in henries | Edit this page View Source CalculateBuckCapacitor(double, double, double, double) Calculates buck converter output capacitor Declaration public static double CalculateBuckCapacitor(double outputCurrent, double switchingFrequency, double voltageRipple, double currentRipple = 0.2) Parameters Type Name Description double outputCurrent Output current double switchingFrequency Switching frequency in Hz double voltageRipple Acceptable voltage ripple in volts double currentRipple Inductor current ripple (0.1 = 10%) Returns Type Description double Required capacitance in farads | Edit this page View Source CalculateBuckInductor(double, double, double, double, double) Calculates buck converter inductor value Declaration public static double CalculateBuckInductor(double inputVoltage, double outputVoltage, double outputCurrent, double switchingFrequency, double currentRipple = 0.2) Parameters Type Name Description double inputVoltage Input voltage double outputVoltage Output voltage double outputCurrent Output current double switchingFrequency Switching frequency in Hz double currentRipple Acceptable current ripple (0.1 = 10%) Returns Type Description double Required inductor value in henries | Edit this page View Source CalculateCurrentSenseResistor(double, double, double) Calculates current sense resistor value Declaration public static (double resistance, double powerRating) CalculateCurrentSenseResistor(double maxCurrent, double senseVoltage = 0.1, double tolerance = 0.01) Parameters Type Name Description double maxCurrent Maximum current to sense double senseVoltage Desired sense voltage (typically 0.1-0.5V) double tolerance Resistor tolerance (0.01 = 1%) Returns Type Description (double referenceResistor, double biasVoltage) Sense resistor value and power rating | Edit this page View Source CalculateEMIFilter(double, double, double) Calculates EMI filter components for switching power supply Declaration public static (double commonModeInductor, double differentialModeInductor, double commonModeCapacitor, double differentialModeCapacitor) CalculateEMIFilter(double switchingFrequency, double inputCurrent, double cableLength = 1) Parameters Type Name Description double switchingFrequency Switching frequency in Hz double inputCurrent Input current double cableLength Input cable length in meters Returns Type Description (double setupTime, double holdTime, double riseTime, double fallTime) Common mode and differential mode filter values | Edit this page View Source CalculateFlybackTurnsRatio(double, double, double, double, double) Calculates flyback transformer turns ratio Declaration public static double CalculateFlybackTurnsRatio(double inputVoltageMin, double inputVoltageMax, double outputVoltage, double forwardVoltageOutput = 0.7, double maxDutyCycle = 0.45) Parameters Type Name Description double inputVoltageMin Minimum input voltage double inputVoltageMax Maximum input voltage double outputVoltage Output voltage double forwardVoltageOutput Output diode forward voltage double maxDutyCycle Maximum duty cycle (typically 0.45) Returns Type Description double Primary to secondary turns ratio | Edit this page View Source CalculateHoldupTime(double, double, double, double, double) Calculates holdup time for power supply Declaration public static double CalculateHoldupTime(double inputCapacitance, double nominalVoltage, double minimumVoltage, double outputPower, double efficiency = 0.85) Parameters Type Name Description double inputCapacitance Input capacitance in farads double nominalVoltage Nominal input voltage double minimumVoltage Minimum operating voltage double outputPower Output power in watts double efficiency Power supply efficiency (0-1) Returns Type Description double Holdup time in seconds | Edit this page View Source CalculateLinearRegulator(double, double, double) Calculates linear regulator heat dissipation and efficiency Declaration public static (double powerDissipation, double efficiency) CalculateLinearRegulator(double inputVoltage, double outputVoltage, double outputCurrent) Parameters Type Name Description double inputVoltage Input voltage double outputVoltage Output voltage double outputCurrent Output current Returns Type Description (double referenceResistor, double biasVoltage) Power dissipation and efficiency | Edit this page View Source EstimateEfficiency(PSUTopology, double, double, double) Calculates power supply efficiency at different loads Declaration public static double EstimateEfficiency(PowerSupplyCalculator.PSUTopology topology, double inputVoltage, double outputVoltage, double loadPercentage) Parameters Type Name Description PowerSupplyCalculator.PSUTopology topology Power supply topology double inputVoltage Input voltage double outputVoltage Output voltage double loadPercentage Load as percentage of maximum (0-1) Returns Type Description double Estimated efficiency | Edit this page View Source GenerateDesignChecklist(PSUTopology, double, bool) Generates power supply design checklist Declaration public static string GenerateDesignChecklist(PowerSupplyCalculator.PSUTopology topology, double outputPower, bool isIsolated = false) Parameters Type Name Description PowerSupplyCalculator.PSUTopology topology Power supply topology double outputPower Output power in watts bool isIsolated Whether isolation is required Returns Type Description string Design checklist"
  },
  "docs/api/CircuitTool.RaspberryPiModel.html": {
    "href": "docs/api/CircuitTool.RaspberryPiModel.html",
    "title": "Enum RaspberryPiModel | CircuitTool Documentation",
    "summary": "Enum RaspberryPiModel Raspberry Pi model enumeration Namespace: CircuitTool Assembly: .dll Syntax public enum RaspberryPiModel Fields Name Description Pi3B Pi400 Pi4B PiZero PiZero2W"
  },
  "docs/api/CircuitTool.RaspberryPiTools.GPIOPin.html": {
    "href": "docs/api/CircuitTool.RaspberryPiTools.GPIOPin.html",
    "title": "Enum RaspberryPiTools.GPIOPin | CircuitTool Documentation",
    "summary": "Enum RaspberryPiTools.GPIOPin GPIO pin mapping for different Raspberry Pi models Namespace: CircuitTool Assembly: .dll Syntax public enum RaspberryPiTools.GPIOPin Fields Name Description GPIO10 GPIO11 GPIO12 GPIO13 GPIO14 GPIO15 GPIO16 GPIO17 GPIO18 GPIO19 GPIO2 GPIO20 GPIO21 GPIO22 GPIO23 GPIO24 GPIO25 GPIO26 GPIO27 GPIO3 GPIO4 GPIO5 GPIO6 GPIO7 GPIO8 GPIO9"
  },
  "docs/api/CircuitTool.RaspberryPiTools.PWMConfig.html": {
    "href": "docs/api/CircuitTool.RaspberryPiTools.PWMConfig.html",
    "title": "Struct RaspberryPiTools.PWMConfig | CircuitTool Documentation",
    "summary": "Struct RaspberryPiTools.PWMConfig PWM configuration settings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool Assembly: .dll Syntax public struct RaspberryPiTools.PWMConfig Properties | Edit this page View Source DutyCycle Declaration public double DutyCycle { readonly get; set; } Property Value Type Description double | Edit this page View Source Frequency Declaration public double Frequency { readonly get; set; } Property Value Type Description double | Edit this page View Source Voltage Declaration public double Voltage { readonly get; set; } Property Value Type Description double"
  },
  "docs/api/CircuitTool.RaspberryPiTools.html": {
    "href": "docs/api/CircuitTool.RaspberryPiTools.html",
    "title": "Class RaspberryPiTools | CircuitTool Documentation",
    "summary": "Class RaspberryPiTools Provides calculations and utilities for Raspberry Pi projects Inheritance object RaspberryPiTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class RaspberryPiTools Methods | Edit this page View Source CalculateLEDResistor(double, double, double) Calculates current limiting resistor for LED connected to GPIO pin Declaration public static double CalculateLEDResistor(double ledVoltage, double ledCurrent, double gpioVoltage = 3.3) Parameters Type Name Description double ledVoltage LED forward voltage in volts double ledCurrent LED forward current in amperes double gpioVoltage GPIO output voltage (typically 3.3V) Returns Type Description double Required resistor value in ohms | Edit this page View Source CalculateMaxSPIFrequency(double, double) Calculates SPI clock frequency limits Declaration public static double CalculateMaxSPIFrequency(double cableLength, double loadCapacitance = 5E-11) Parameters Type Name Description double cableLength SPI cable length in meters double loadCapacitance Load capacitance in farads Returns Type Description double Maximum safe SPI frequency in Hz | Edit this page View Source CalculateMotorPWM(double, double, double) Calculates PWM settings for motor speed control Declaration public static double CalculateMotorPWM(double motorVoltage, double supplyVoltage, double speedPercentage) Parameters Type Name Description double motorVoltage Motor rated voltage double supplyVoltage Power supply voltage double speedPercentage Desired speed as percentage (0-100) Returns Type Description double PWM duty cycle (0-1) | Edit this page View Source CalculatePowerConsumption(RaspberryPiModel, double) Calculates power consumption for Raspberry Pi project Declaration public static double CalculatePowerConsumption(RaspberryPiModel piModel, double peripheralPower = 0) Parameters Type Name Description RaspberryPiModel piModel Pi model power consumption double peripheralPower Additional peripheral power in watts Returns Type Description double Total power consumption in watts | Edit this page View Source CalculatePullResistor(double, double, double) Calculates pull-up/pull-down resistor value for GPIO inputs Declaration public static double CalculatePullResistor(double inputVoltage = 3.3, double leakageCurrent = 1E-06, double noiseMargin = 0.5) Parameters Type Name Description double inputVoltage Input signal voltage double leakageCurrent Maximum leakage current (typically 1µA) double noiseMargin Desired noise margin voltage (typically 0.5V) Returns Type Description double Recommended resistor value in ohms | Edit this page View Source GenerateI2CScanCode() Generates I2C address scanning code Declaration public static string GenerateI2CScanCode() Returns Type Description string Python code for I2C address scanning"
  },
  "docs/api/CircuitTool.ResistorCalculator.html": {
    "href": "docs/api/CircuitTool.ResistorCalculator.html",
    "title": "Class ResistorCalculator | CircuitTool Documentation",
    "summary": "Class ResistorCalculator Provides methods for resistor calculations, including Ohm's Law, series, and parallel combinations. Inheritance object ResistorCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ResistorCalculator Remarks Example usage: double r = ResistorCalculator.Resistance(10, 2); // 5 Ohms double series = ResistorCalculator.Series(10, 20, 30); // 60 Ohms double parallel = ResistorCalculator.Parallel(10, 20); // 6.67 Ohms Methods | Edit this page View Source Parallel(params double[]) Calculates total resistance for resistors in parallel: 1/Rtotal = 1/R1 + 1/R2 + ... Declaration public static double Parallel(params double[] resistors) Parameters Type Name Description double[] resistors Resistor values in ohms (Ω). Returns Type Description double Total parallel resistance in ohms (Ω). Examples double total = ResistorCalculator.Parallel(10, 20); // 6.67 Ohms | Edit this page View Source Resistance(double, double) Calculates resistance using Ohm's Law: R = V / I. Declaration public static double Resistance(double voltage, double current) Parameters Type Name Description double voltage Voltage in volts (V). double current Current in amperes (A). Returns Type Description double Resistance in ohms (Ω). Examples double r = ResistorCalculator.Resistance(10, 2); // 5 Ohms | Edit this page View Source Series(params double[]) Calculates total resistance for resistors in series: Rtotal = R1 + R2 + ... Declaration public static double Series(params double[] resistors) Parameters Type Name Description double[] resistors Resistor values in ohms (Ω). Returns Type Description double Total series resistance in ohms (Ω). Examples double total = ResistorCalculator.Series(10, 20, 30); // 60 Ohms"
  },
  "docs/api/CircuitTool.SensorInterfaceCalculator.SensorType.html": {
    "href": "docs/api/CircuitTool.SensorInterfaceCalculator.SensorType.html",
    "title": "Enum SensorInterfaceCalculator.SensorType | CircuitTool Documentation",
    "summary": "Enum SensorInterfaceCalculator.SensorType Common sensor types and their characteristics Namespace: CircuitTool Assembly: .dll Syntax public enum SensorInterfaceCalculator.SensorType Fields Name Description Accelerometer Gyroscope HallEffect Photoresistor RTD StrainGauge Thermistor Thermocouple"
  },
  "docs/api/CircuitTool.SensorInterfaceCalculator.html": {
    "href": "docs/api/CircuitTool.SensorInterfaceCalculator.html",
    "title": "Class SensorInterfaceCalculator | CircuitTool Documentation",
    "summary": "Class SensorInterfaceCalculator Provides calculations and utilities for sensor interfacing and signal conditioning Inheritance object SensorInterfaceCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class SensorInterfaceCalculator Methods | Edit this page View Source CalculateADCResolution(double, double, double) Calculates ADC resolution requirements for sensor measurement Declaration public static int CalculateADCResolution(double sensorRange, double requiredAccuracy, double noiseBits = 2) Parameters Type Name Description double sensorRange Full-scale sensor output range double requiredAccuracy Required measurement accuracy double noiseBits Effective noise in LSBs (typically 1-3) Returns Type Description int Required ADC resolution in bits | Edit this page View Source CalculateAmplifierGain(double, double, double, int, double) Calculates amplifier gain for sensor signal conditioning Declaration public static double CalculateAmplifierGain(double sensorSignalMin, double sensorSignalMax, double adcReferenceVoltage, int adcResolution, double utilizationFactor = 0.8) Parameters Type Name Description double sensorSignalMin Minimum sensor signal voltage double sensorSignalMax Maximum sensor signal voltage double adcReferenceVoltage ADC reference voltage int adcResolution ADC resolution in bits double utilizationFactor Desired ADC range utilization (0-1) Returns Type Description double Required amplifier gain | Edit this page View Source CalculateLinearCalibration(double[], double[]) Calculates sensor calibration coefficients (linear) Declaration public static (double slope, double offset) CalculateLinearCalibration(double[] rawValues, double[] referenceValues) Parameters Type Name Description double[] rawValues Array of raw sensor readings double[] referenceValues Array of reference values Returns Type Description (double referenceResistor, double biasVoltage) Calibration slope and offset | Edit this page View Source CalculateResistiveSensorDivider(double, double, double, double) Calculates voltage divider for resistive sensor conditioning Declaration public static (double referenceResistor, double biasVoltage) CalculateResistiveSensorDivider(double sensorResistanceMin, double sensorResistanceMax, double supplyVoltage, double targetVoltageRange = 2.5) Parameters Type Name Description double sensorResistanceMin Minimum sensor resistance double sensorResistanceMax Maximum sensor resistance double supplyVoltage Supply voltage double targetVoltageRange Desired output voltage range Returns Type Description (double referenceResistor, double biasVoltage) Reference resistor value and bias voltage | Edit this page View Source CalculateSensorFilter(double, double, double) Calculates low-pass filter for sensor noise reduction Declaration public static (double resistance, double capacitance) CalculateSensorFilter(double signalFrequency, double noiseFrequency, double attenuationDb = 40) Parameters Type Name Description double signalFrequency Maximum signal frequency of interest double noiseFrequency Noise frequency to attenuate double attenuationDb Desired attenuation in dB Returns Type Description (double referenceResistor, double biasVoltage) Filter resistance and capacitance values | Edit this page View Source GenerateSensorCode(SensorType, string) Generates sensor interface code template Declaration public static string GenerateSensorCode(SensorInterfaceCalculator.SensorType sensorType, string interface_ = \"Analog\") Parameters Type Name Description SensorInterfaceCalculator.SensorType sensorType Type of sensor string interface_ Interface type (Analog, I2C, SPI) Returns Type Description string Code template | Edit this page View Source RTDTemperature(double, double, double) Calculates RTD temperature from resistance Declaration public static double RTDTemperature(double resistance, double r0 = 100, double alpha = 0.00385) Parameters Type Name Description double resistance RTD resistance in ohms double r0 RTD resistance at 0°C (typically 100Ω for PT100) double alpha Temperature coefficient (0.00385 for PT100) Returns Type Description double Temperature in Celsius | Edit this page View Source StrainGaugeBridgeOutput(double, double, double, double) Calculates Wheatstone bridge output for strain gauge Declaration public static double StrainGaugeBridgeOutput(double strain, double gaugeFactor = 2, double bridgeVoltage = 5, double nominalResistance = 350) Parameters Type Name Description double strain Applied strain (µε) double gaugeFactor Strain gauge factor (typically 2.0) double bridgeVoltage Bridge excitation voltage double nominalResistance Gauge nominal resistance Returns Type Description double Bridge output voltage | Edit this page View Source ThermistorTemperature(double, double, double, double) Calculates thermistor temperature from resistance using Steinhart-Hart equation Declaration public static double ThermistorTemperature(double resistance, double a = 0.001009249522, double b = 0.0002378405444, double c = 2.019202697E-07) Parameters Type Name Description double resistance Thermistor resistance in ohms double a Steinhart-Hart coefficient A double b Steinhart-Hart coefficient B double c Steinhart-Hart coefficient C Returns Type Description double Temperature in Celsius"
  },
  "docs/api/CircuitTool.Serialization.CircuitImportExport.html": {
    "href": "docs/api/CircuitTool.Serialization.CircuitImportExport.html",
    "title": "Class CircuitImportExport | CircuitTool Documentation",
    "summary": "Class CircuitImportExport Extensions for circuit import/export functionality Inheritance object CircuitImportExport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Serialization Assembly: .dll Syntax public static class CircuitImportExport Methods | Edit this page View Source ExportToFile(Circuit, string, ExportFormat) Exports circuit configuration to file Declaration public static void ExportToFile(Circuit circuit, string filePath, ExportFormat format = ExportFormat.Json) Parameters Type Name Description Circuit circuit Circuit to export string filePath File path for export ExportFormat format Export format (JSON or XML) | Edit this page View Source ImportFromFile(string, ExportFormat) Imports circuit configuration from file Declaration public static Circuit ImportFromFile(string filePath, ExportFormat format = ExportFormat.Json) Parameters Type Name Description string filePath File path to import from ExportFormat format Import format (JSON or XML) Returns Type Description Circuit Imported circuit"
  },
  "docs/api/CircuitTool.Serialization.CircuitSerialization.html": {
    "href": "docs/api/CircuitTool.Serialization.CircuitSerialization.html",
    "title": "Class CircuitSerialization | CircuitTool Documentation",
    "summary": "Class CircuitSerialization Provides JSON serialization support for circuit configurations Inheritance object CircuitSerialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Serialization Assembly: .dll Syntax public static class CircuitSerialization Methods | Edit this page View Source FromJson(string) Deserializes a circuit from JSON format Declaration public static Circuit FromJson(string json) Parameters Type Name Description string json JSON representation of the circuit Returns Type Description Circuit Reconstructed circuit | Edit this page View Source FromXml(string) Deserializes a circuit from XML format Declaration public static Circuit FromXml(string xml) Parameters Type Name Description string xml XML representation of the circuit Returns Type Description Circuit Reconstructed circuit | Edit this page View Source ToJson(Circuit) Serializes a circuit to JSON format Declaration public static string ToJson(Circuit circuit) Parameters Type Name Description Circuit circuit Circuit to serialize Returns Type Description string JSON representation of the circuit | Edit this page View Source ToXml(Circuit) Serializes a circuit to XML format Declaration public static string ToXml(Circuit circuit) Parameters Type Name Description Circuit circuit Circuit to serialize Returns Type Description string XML representation of the circuit"
  },
  "docs/api/CircuitTool.Serialization.ExportFormat.html": {
    "href": "docs/api/CircuitTool.Serialization.ExportFormat.html",
    "title": "Enum ExportFormat | CircuitTool Documentation",
    "summary": "Enum ExportFormat Export/Import format options Namespace: CircuitTool.Serialization Assembly: .dll Syntax public enum ExportFormat Fields Name Description Json Xml"
  },
  "docs/api/CircuitTool.Serialization.html": {
    "href": "docs/api/CircuitTool.Serialization.html",
    "title": "Namespace CircuitTool.Serialization | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Serialization Classes CircuitImportExport Extensions for circuit import/export functionality CircuitSerialization Provides JSON serialization support for circuit configurations Enums ExportFormat Export/Import format options"
  },
  "docs/api/CircuitTool.SignalIntegrityCalculator.html": {
    "href": "docs/api/CircuitTool.SignalIntegrityCalculator.html",
    "title": "Class SignalIntegrityCalculator | CircuitTool Documentation",
    "summary": "Class SignalIntegrityCalculator Provides calculations for signal integrity analysis Inheritance object SignalIntegrityCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class SignalIntegrityCalculator Methods | Edit this page View Source CrosstalkCoupling(double, double, double) Calculates crosstalk coupling coefficient between parallel traces Declaration public static double CrosstalkCoupling(double traceSpacing, double traceWidth, double dielectricHeight) Parameters Type Name Description double traceSpacing Spacing between traces in meters double traceWidth Trace width in meters double dielectricHeight Height above ground plane in meters Returns Type Description double Coupling coefficient (0-1) | Edit this page View Source MicrostripImpedance(double, double, double) Calculates the characteristic impedance of a microstrip transmission line Declaration public static double MicrostripImpedance(double traceWidth, double dielectricThickness, double dielectricConstant) Parameters Type Name Description double traceWidth Trace width in meters double dielectricThickness Dielectric thickness in meters double dielectricConstant Relative dielectric constant Returns Type Description double Characteristic impedance in ohms | Edit this page View Source PropagationDelay(double, double) Calculates the propagation delay of a transmission line Declaration public static double PropagationDelay(double length, double effectiveDielectric) Parameters Type Name Description double length Line length in meters double effectiveDielectric Effective dielectric constant Returns Type Description double Propagation delay in seconds | Edit this page View Source RiseTimeDegradation(double, double) Calculates the rise time degradation due to transmission line effects Declaration public static double RiseTimeDegradation(double originalRiseTime, double propagationDelay) Parameters Type Name Description double originalRiseTime Original rise time in seconds double propagationDelay Propagation delay in seconds Returns Type Description double Degraded rise time in seconds"
  },
  "docs/api/CircuitTool.ThermalCalculator.html": {
    "href": "docs/api/CircuitTool.ThermalCalculator.html",
    "title": "Class ThermalCalculator | CircuitTool Documentation",
    "summary": "Class ThermalCalculator Provides thermal analysis calculations for electronic components Inheritance object ThermalCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class ThermalCalculator Methods | Edit this page View Source ConvectiveHeatTransfer(double, double, double) Calculates convective heat transfer coefficient Declaration public static double ConvectiveHeatTransfer(double airVelocity, double characteristicLength, double temperatureDifference) Parameters Type Name Description double airVelocity Air velocity in m/s double characteristicLength Characteristic length in meters double temperatureDifference Temperature difference in °C Returns Type Description double Heat transfer coefficient in W/(m²·°C) | Edit this page View Source JunctionTemperature(double, double, double) Calculates junction temperature of a component Declaration public static double JunctionTemperature(double powerDissipation, double thermalResistanceJunctionToAmbient, double ambientTemperature) Parameters Type Name Description double powerDissipation Power dissipation in watts double thermalResistanceJunctionToAmbient Thermal resistance from junction to ambient in °C/W double ambientTemperature Ambient temperature in °C Returns Type Description double Junction temperature in °C | Edit this page View Source RequiredHeatSinkThermalResistance(double, double, double, double) Calculates the required heat sink thermal resistance Declaration public static double RequiredHeatSinkThermalResistance(double maxJunctionTemp, double ambientTemp, double powerDissipation, double thermalResistanceJunctionToCase) Parameters Type Name Description double maxJunctionTemp Maximum allowable junction temperature in °C double ambientTemp Ambient temperature in °C double powerDissipation Power dissipation in watts double thermalResistanceJunctionToCase Junction-to-case thermal resistance in °C/W Returns Type Description double Required heat sink thermal resistance in °C/W | Edit this page View Source ThermalTimeConstant(double, double) Calculates thermal time constant for transient analysis Declaration public static double ThermalTimeConstant(double thermalCapacitance, double thermalResistance) Parameters Type Name Description double thermalCapacitance Thermal capacitance in J/°C double thermalResistance Thermal resistance in °C/W Returns Type Description double Thermal time constant in seconds"
  },
  "docs/api/CircuitTool.TransformerCalculator.html": {
    "href": "docs/api/CircuitTool.TransformerCalculator.html",
    "title": "Class TransformerCalculator | CircuitTool Documentation",
    "summary": "Class TransformerCalculator Provides calculations for transformer design and characteristics. Inheritance object TransformerCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class TransformerCalculator Methods | Edit this page View Source ApparentPower(double, double) Calculates the apparent power rating of a transformer. Declaration public static double ApparentPower(double voltage, double current) Parameters Type Name Description double voltage Voltage in volts (V). double current Current in amperes (A). Returns Type Description double Apparent power in volt-amperes (VA). | Edit this page View Source Efficiency(double, double) Calculates the transformer efficiency using η = (Pout / Pin) × 100%. Declaration public static double Efficiency(double outputPower, double inputPower) Parameters Type Name Description double outputPower Output power in watts (W). double inputPower Input power in watts (W). Returns Type Description double Efficiency as a percentage (%). | Edit this page View Source PowerLoss(double, double) Calculates the power losses in a transformer. Declaration public static double PowerLoss(double inputPower, double outputPower) Parameters Type Name Description double inputPower Input power in watts (W). double outputPower Output power in watts (W). Returns Type Description double Power losses in watts (W). | Edit this page View Source PrimaryCurrent(double, double, double) Calculates the primary current using the transformer ratio Ip = Is × (Ns / Np). Declaration public static double PrimaryCurrent(double secondaryCurrent, double primaryTurns, double secondaryTurns) Parameters Type Name Description double secondaryCurrent Secondary current in amperes (A). double primaryTurns Number of primary turns. double secondaryTurns Number of secondary turns. Returns Type Description double Primary current in amperes (A). | Edit this page View Source Regulation(double, double) Calculates the regulation of a transformer using Regulation = ((Vnl - Vfl) / Vfl) × 100%. Declaration public static double Regulation(double noLoadVoltage, double fullLoadVoltage) Parameters Type Name Description double noLoadVoltage No-load voltage in volts (V). double fullLoadVoltage Full-load voltage in volts (V). Returns Type Description double Regulation as a percentage (%). | Edit this page View Source RequiredSecondaryTurns(double, double, double) Calculates the required number of secondary turns for a desired voltage. Declaration public static double RequiredSecondaryTurns(double primaryVoltage, double secondaryVoltage, double primaryTurns) Parameters Type Name Description double primaryVoltage Primary voltage in volts (V). double secondaryVoltage Desired secondary voltage in volts (V). double primaryTurns Number of primary turns. Returns Type Description double Required number of secondary turns. | Edit this page View Source SecondaryVoltage(double, double, double) Calculates the secondary voltage using the transformer ratio Vs = Vp × (Ns / Np). Declaration public static double SecondaryVoltage(double primaryVoltage, double primaryTurns, double secondaryTurns) Parameters Type Name Description double primaryVoltage Primary voltage in volts (V). double primaryTurns Number of primary turns. double secondaryTurns Number of secondary turns. Returns Type Description double Secondary voltage in volts (V). | Edit this page View Source TurnsRatio(double, double) Calculates the turns ratio of a transformer (Np / Ns). Declaration public static double TurnsRatio(double primaryTurns, double secondaryTurns) Parameters Type Name Description double primaryTurns Number of primary turns. double secondaryTurns Number of secondary turns. Returns Type Description double Turns ratio (unitless). | Edit this page View Source VoltageRatio(double, double) Calculates the voltage ratio of a transformer (Vp / Vs). Declaration public static double VoltageRatio(double primaryVoltage, double secondaryVoltage) Parameters Type Name Description double primaryVoltage Primary voltage in volts (V). double secondaryVoltage Secondary voltage in volts (V). Returns Type Description double Voltage ratio (unitless)."
  },
  "docs/api/CircuitTool.UnitConverter.html": {
    "href": "docs/api/CircuitTool.UnitConverter.html",
    "title": "Class UnitConverter | CircuitTool Documentation",
    "summary": "Class UnitConverter Inheritance object UnitConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class UnitConverter Methods | Edit this page View Source AmpsToKVA(double, double) Declaration public static double AmpsToKVA(double amps, double volts) Parameters Type Name Description double amps double volts Returns Type Description double | Edit this page View Source AmpsToKW(double, double, double) Declaration public static double AmpsToKW(double amps, double volts, double powerFactor = 1) Parameters Type Name Description double amps double volts double powerFactor Returns Type Description double | Edit this page View Source AmpsToVA(double, double) Declaration public static double AmpsToVA(double amps, double volts) Parameters Type Name Description double amps double volts Returns Type Description double | Edit this page View Source AmpsToVolts(double, double) Declaration public static double AmpsToVolts(double watts, double amps) Parameters Type Name Description double watts double amps Returns Type Description double | Edit this page View Source AmpsToWatts(double, double) Declaration public static double AmpsToWatts(double amps, double volts) Parameters Type Name Description double amps double volts Returns Type Description double | Edit this page View Source EVToVolts(double) Declaration public static double EVToVolts(double eV) Parameters Type Name Description double eV Returns Type Description double | Edit this page View Source JoulesToVolts(double, double) Declaration public static double JoulesToVolts(double joules, double coulombs) Parameters Type Name Description double joules double coulombs Returns Type Description double | Edit this page View Source JoulesToWatts(double, double) Declaration public static double JoulesToWatts(double joules, double seconds) Parameters Type Name Description double joules double seconds Returns Type Description double | Edit this page View Source KVAToAmps(double, double) Declaration public static double KVAToAmps(double kVA, double volts) Parameters Type Name Description double kVA double volts Returns Type Description double | Edit this page View Source KVAToKW(double, double) Declaration public static double KVAToKW(double kVA, double powerFactor = 1) Parameters Type Name Description double kVA double powerFactor Returns Type Description double | Edit this page View Source KVAToVA(double) Declaration public static double KVAToVA(double kVA) Parameters Type Name Description double kVA Returns Type Description double | Edit this page View Source KVAToWatts(double, double) Declaration public static double KVAToWatts(double kVA, double powerFactor = 1) Parameters Type Name Description double kVA double powerFactor Returns Type Description double | Edit this page View Source KWToAmps(double, double, double) Declaration public static double KWToAmps(double kW, double volts, double powerFactor = 1) Parameters Type Name Description double kW double volts double powerFactor Returns Type Description double | Edit this page View Source KWToKVA(double, double) Declaration public static double KWToKVA(double kW, double powerFactor = 1) Parameters Type Name Description double kW double powerFactor Returns Type Description double | Edit this page View Source KWToKWh(double, double) Declaration public static double KWToKWh(double kW, double hours) Parameters Type Name Description double kW double hours Returns Type Description double | Edit this page View Source KWToVA(double, double) Declaration public static double KWToVA(double kW, double powerFactor = 1) Parameters Type Name Description double kW double powerFactor Returns Type Description double | Edit this page View Source KWToVolts(double, double, double) Declaration public static double KWToVolts(double kW, double amps, double powerFactor = 1) Parameters Type Name Description double kW double amps double powerFactor Returns Type Description double | Edit this page View Source KWhToKW(double, double) Declaration public static double KWhToKW(double kWh, double hours) Parameters Type Name Description double kWh double hours Returns Type Description double | Edit this page View Source KWhToWatts(double, double) Declaration public static double KWhToWatts(double kWh, double hours) Parameters Type Name Description double kWh double hours Returns Type Description double | Edit this page View Source VAToAmps(double, double) Declaration public static double VAToAmps(double va, double volts) Parameters Type Name Description double va double volts Returns Type Description double | Edit this page View Source VAToKVA(double) Declaration public static double VAToKVA(double va) Parameters Type Name Description double va Returns Type Description double | Edit this page View Source VAToKW(double, double) Declaration public static double VAToKW(double va, double powerFactor = 1) Parameters Type Name Description double va double powerFactor Returns Type Description double | Edit this page View Source VAToWatts(double, double) Declaration public static double VAToWatts(double va, double powerFactor = 1) Parameters Type Name Description double va double powerFactor Returns Type Description double | Edit this page View Source VoltsToAmps(double, double) Declaration public static double VoltsToAmps(double watts, double volts) Parameters Type Name Description double watts double volts Returns Type Description double | Edit this page View Source VoltsToEV(double) Declaration public static double VoltsToEV(double volts) Parameters Type Name Description double volts Returns Type Description double | Edit this page View Source VoltsToJoules(double, double) Declaration public static double VoltsToJoules(double volts, double coulombs) Parameters Type Name Description double volts double coulombs Returns Type Description double | Edit this page View Source VoltsToKW(double, double, double) Declaration public static double VoltsToKW(double volts, double amps, double powerFactor = 1) Parameters Type Name Description double volts double amps double powerFactor Returns Type Description double | Edit this page View Source VoltsToWatts(double, double) Declaration public static double VoltsToWatts(double volts, double amps) Parameters Type Name Description double volts double amps Returns Type Description double | Edit this page View Source WattsToAmps(double, double) Declaration public static double WattsToAmps(double watts, double volts) Parameters Type Name Description double watts double volts Returns Type Description double | Edit this page View Source WattsToJoules(double, double) Declaration public static double WattsToJoules(double watts, double seconds) Parameters Type Name Description double watts double seconds Returns Type Description double | Edit this page View Source WattsToKVA(double, double) Declaration public static double WattsToKVA(double watts, double powerFactor = 1) Parameters Type Name Description double watts double powerFactor Returns Type Description double | Edit this page View Source WattsToKWh(double, double) Declaration public static double WattsToKWh(double watts, double hours) Parameters Type Name Description double watts double hours Returns Type Description double | Edit this page View Source WattsToVA(double, double) Declaration public static double WattsToVA(double watts, double powerFactor = 1) Parameters Type Name Description double watts double powerFactor Returns Type Description double | Edit this page View Source WattsToVolts(double, double) Declaration public static double WattsToVolts(double watts, double amps) Parameters Type Name Description double watts double amps Returns Type Description double"
  },
  "docs/api/CircuitTool.Units.Capacitance.html": {
    "href": "docs/api/CircuitTool.Units.Capacitance.html",
    "title": "Struct Capacitance | CircuitTool Documentation",
    "summary": "Struct Capacitance Represents a strongly-typed capacitance measurement with automatic unit conversion Implements IEquatable<Capacitance> IComparable<Capacitance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Capacitance : IEquatable<Capacitance>, IComparable<Capacitance> Constructors | Edit this page View Source Capacitance(double, CapacitanceUnit) Creates a new capacitance measurement Declaration public Capacitance(double value, CapacitanceUnit unit) Parameters Type Name Description double value The value in the specified unit CapacitanceUnit unit The unit of measurement Properties | Edit this page View Source Farads Gets the capacitance value in farads Declaration public double Farads { get; } Property Value Type Description double | Edit this page View Source Kilofarads Gets the capacitance value in kilofarads Declaration public double Kilofarads { get; } Property Value Type Description double | Edit this page View Source Microfarads Gets the capacitance value in microfarads Declaration public double Microfarads { get; } Property Value Type Description double | Edit this page View Source Millifarads Gets the capacitance value in millifarads Declaration public double Millifarads { get; } Property Value Type Description double | Edit this page View Source Nanofarads Gets the capacitance value in nanofarads Declaration public double Nanofarads { get; } Property Value Type Description double | Edit this page View Source Picofarads Gets the capacitance value in picofarads Declaration public double Picofarads { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Capacitance) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Capacitance other) Parameters Type Name Description Capacitance other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source ConvertTo(CapacitanceUnit) Declaration public double ConvertTo(CapacitanceUnit unit) Parameters Type Name Description CapacitanceUnit unit Returns Type Description double | Edit this page View Source Equals(Capacitance) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Capacitance other) Parameters Type Name Description Capacitance other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(CapacitanceUnit) Declaration public string ToString(CapacitanceUnit unit) Parameters Type Name Description CapacitanceUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Capacitance, Capacitance) Declaration public static Capacitance operator +(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description Capacitance | Edit this page View Source operator /(Capacitance, double) Declaration public static Capacitance operator /(Capacitance capacitance, double scalar) Parameters Type Name Description Capacitance capacitance double scalar Returns Type Description Capacitance | Edit this page View Source operator ==(Capacitance, Capacitance) Declaration public static bool operator ==(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator >(Capacitance, Capacitance) Declaration public static bool operator >(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator >=(Capacitance, Capacitance) Declaration public static bool operator >=(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator !=(Capacitance, Capacitance) Declaration public static bool operator !=(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator <(Capacitance, Capacitance) Declaration public static bool operator <(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator <=(Capacitance, Capacitance) Declaration public static bool operator <=(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description bool | Edit this page View Source operator *(Capacitance, double) Declaration public static Capacitance operator *(Capacitance capacitance, double scalar) Parameters Type Name Description Capacitance capacitance double scalar Returns Type Description Capacitance | Edit this page View Source operator *(double, Capacitance) Declaration public static Capacitance operator *(double scalar, Capacitance capacitance) Parameters Type Name Description double scalar Capacitance capacitance Returns Type Description Capacitance | Edit this page View Source operator -(Capacitance, Capacitance) Declaration public static Capacitance operator -(Capacitance left, Capacitance right) Parameters Type Name Description Capacitance left Capacitance right Returns Type Description Capacitance Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.CapacitanceUnit.html": {
    "href": "docs/api/CircuitTool.Units.CapacitanceUnit.html",
    "title": "Enum CapacitanceUnit | CircuitTool Documentation",
    "summary": "Enum CapacitanceUnit Represents capacitance measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum CapacitanceUnit Fields Name Description Farads Farads (F) Kilofarads Kilofarads (kF) Microfarads Microfarads (μF) Millifarads Millifarads (mF) Nanofarads Nanofarads (nF) Picofarads Picofarads (pF)"
  },
  "docs/api/CircuitTool.Units.Current.html": {
    "href": "docs/api/CircuitTool.Units.Current.html",
    "title": "Struct Current | CircuitTool Documentation",
    "summary": "Struct Current Represents a strongly-typed current measurement with automatic unit conversion Implements IEquatable<Current> IComparable<Current> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Current : IEquatable<Current>, IComparable<Current> Constructors | Edit this page View Source Current(double, CurrentUnit) Creates a new current measurement Declaration public Current(double value, CurrentUnit unit) Parameters Type Name Description double value The value in the specified unit CurrentUnit unit The unit of measurement Properties | Edit this page View Source Amperes Gets the current value in amperes Declaration public double Amperes { get; } Property Value Type Description double | Edit this page View Source Microamperes Gets the current value in microamperes Declaration public double Microamperes { get; } Property Value Type Description double | Edit this page View Source Milliamperes Gets the current value in milliamperes Declaration public double Milliamperes { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Current) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Current other) Parameters Type Name Description Current other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Equals(Current) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Current other) Parameters Type Name Description Current other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source GetValue(CurrentUnit) Gets the current value in the specified unit Declaration public double GetValue(CurrentUnit unit) Parameters Type Name Description CurrentUnit unit The desired unit Returns Type Description double The current value in the specified unit | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(CurrentUnit) Declaration public string ToString(CurrentUnit unit) Parameters Type Name Description CurrentUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Current, Current) Declaration public static Current operator +(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description Current | Edit this page View Source operator /(Current, double) Declaration public static Current operator /(Current current, double divisor) Parameters Type Name Description Current current double divisor Returns Type Description Current | Edit this page View Source operator ==(Current, Current) Declaration public static bool operator ==(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source operator >(Current, Current) Declaration public static bool operator >(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source operator >=(Current, Current) Declaration public static bool operator >=(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source implicit operator double(Current) Declaration public static implicit operator double(Current current) Parameters Type Name Description Current current Returns Type Description double | Edit this page View Source implicit operator Current(double) Declaration public static implicit operator Current(double amperes) Parameters Type Name Description double amperes Returns Type Description Current | Edit this page View Source operator !=(Current, Current) Declaration public static bool operator !=(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source operator <(Current, Current) Declaration public static bool operator <(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source operator <=(Current, Current) Declaration public static bool operator <=(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description bool | Edit this page View Source operator *(Current, double) Declaration public static Current operator *(Current current, double multiplier) Parameters Type Name Description Current current double multiplier Returns Type Description Current | Edit this page View Source operator -(Current, Current) Declaration public static Current operator -(Current left, Current right) Parameters Type Name Description Current left Current right Returns Type Description Current Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.CurrentUnit.html": {
    "href": "docs/api/CircuitTool.Units.CurrentUnit.html",
    "title": "Enum CurrentUnit | CircuitTool Documentation",
    "summary": "Enum CurrentUnit Represents current measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum CurrentUnit Fields Name Description Amperes Amperes (A) Kiloamperes Kiloamperes (kA) Microamperes Microamperes (μA) Milliamperes Milliamperes (mA) Nanoamperes Nanoamperes (nA)"
  },
  "docs/api/CircuitTool.Units.Frequency.html": {
    "href": "docs/api/CircuitTool.Units.Frequency.html",
    "title": "Struct Frequency | CircuitTool Documentation",
    "summary": "Struct Frequency Represents a strongly-typed frequency measurement with automatic unit conversion Implements IEquatable<Frequency> IComparable<Frequency> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Frequency : IEquatable<Frequency>, IComparable<Frequency> Constructors | Edit this page View Source Frequency(double, FrequencyUnit) Creates a new frequency measurement Declaration public Frequency(double value, FrequencyUnit unit) Parameters Type Name Description double value The value in the specified unit FrequencyUnit unit The unit of measurement Properties | Edit this page View Source AngularFrequency Gets the angular frequency (ω = 2πf) in radians per second Declaration public double AngularFrequency { get; } Property Value Type Description double | Edit this page View Source Gigahertz Gets the frequency value in gigahertz Declaration public double Gigahertz { get; } Property Value Type Description double | Edit this page View Source Hertz Gets the frequency value in hertz Declaration public double Hertz { get; } Property Value Type Description double | Edit this page View Source Kilohertz Gets the frequency value in kilohertz Declaration public double Kilohertz { get; } Property Value Type Description double | Edit this page View Source Megahertz Gets the frequency value in megahertz Declaration public double Megahertz { get; } Property Value Type Description double | Edit this page View Source Period Gets the period (T = 1/f) in seconds Declaration public double Period { get; } Property Value Type Description double | Edit this page View Source Terahertz Gets the frequency value in terahertz Declaration public double Terahertz { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Frequency) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Frequency other) Parameters Type Name Description Frequency other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source ConvertTo(FrequencyUnit) Declaration public double ConvertTo(FrequencyUnit unit) Parameters Type Name Description FrequencyUnit unit Returns Type Description double | Edit this page View Source Equals(Frequency) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Frequency other) Parameters Type Name Description Frequency other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(FrequencyUnit) Declaration public string ToString(FrequencyUnit unit) Parameters Type Name Description FrequencyUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Frequency, Frequency) Declaration public static Frequency operator +(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description Frequency | Edit this page View Source operator /(Frequency, double) Declaration public static Frequency operator /(Frequency frequency, double scalar) Parameters Type Name Description Frequency frequency double scalar Returns Type Description Frequency | Edit this page View Source operator ==(Frequency, Frequency) Declaration public static bool operator ==(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator >(Frequency, Frequency) Declaration public static bool operator >(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator >=(Frequency, Frequency) Declaration public static bool operator >=(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator !=(Frequency, Frequency) Declaration public static bool operator !=(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator <(Frequency, Frequency) Declaration public static bool operator <(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator <=(Frequency, Frequency) Declaration public static bool operator <=(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description bool | Edit this page View Source operator *(Frequency, double) Declaration public static Frequency operator *(Frequency frequency, double scalar) Parameters Type Name Description Frequency frequency double scalar Returns Type Description Frequency | Edit this page View Source operator *(double, Frequency) Declaration public static Frequency operator *(double scalar, Frequency frequency) Parameters Type Name Description double scalar Frequency frequency Returns Type Description Frequency | Edit this page View Source operator -(Frequency, Frequency) Declaration public static Frequency operator -(Frequency left, Frequency right) Parameters Type Name Description Frequency left Frequency right Returns Type Description Frequency Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.FrequencyUnit.html": {
    "href": "docs/api/CircuitTool.Units.FrequencyUnit.html",
    "title": "Enum FrequencyUnit | CircuitTool Documentation",
    "summary": "Enum FrequencyUnit Represents frequency measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum FrequencyUnit Fields Name Description Gigahertz Gigahertz (GHz) Hertz Hertz (Hz) Kilohertz Kilohertz (kHz) Megahertz Megahertz (MHz) Terahertz Terahertz (THz)"
  },
  "docs/api/CircuitTool.Units.Inductance.html": {
    "href": "docs/api/CircuitTool.Units.Inductance.html",
    "title": "Struct Inductance | CircuitTool Documentation",
    "summary": "Struct Inductance Represents a strongly-typed inductance measurement with automatic unit conversion Implements IEquatable<Inductance> IComparable<Inductance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Inductance : IEquatable<Inductance>, IComparable<Inductance> Constructors | Edit this page View Source Inductance(double, InductanceUnit) Creates a new inductance measurement Declaration public Inductance(double value, InductanceUnit unit) Parameters Type Name Description double value The value in the specified unit InductanceUnit unit The unit of measurement Properties | Edit this page View Source Henries Gets the inductance value in henries Declaration public double Henries { get; } Property Value Type Description double | Edit this page View Source Kilohenries Gets the inductance value in kilohenries Declaration public double Kilohenries { get; } Property Value Type Description double | Edit this page View Source Microhenries Gets the inductance value in microhenries Declaration public double Microhenries { get; } Property Value Type Description double | Edit this page View Source Millihenries Gets the inductance value in millihenries Declaration public double Millihenries { get; } Property Value Type Description double | Edit this page View Source Nanohenries Gets the inductance value in nanohenries Declaration public double Nanohenries { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Inductance) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Inductance other) Parameters Type Name Description Inductance other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source ConvertTo(InductanceUnit) Declaration public double ConvertTo(InductanceUnit unit) Parameters Type Name Description InductanceUnit unit Returns Type Description double | Edit this page View Source Equals(Inductance) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Inductance other) Parameters Type Name Description Inductance other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(InductanceUnit) Declaration public string ToString(InductanceUnit unit) Parameters Type Name Description InductanceUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Inductance, Inductance) Declaration public static Inductance operator +(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description Inductance | Edit this page View Source operator /(Inductance, double) Declaration public static Inductance operator /(Inductance inductance, double scalar) Parameters Type Name Description Inductance inductance double scalar Returns Type Description Inductance | Edit this page View Source operator ==(Inductance, Inductance) Declaration public static bool operator ==(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator >(Inductance, Inductance) Declaration public static bool operator >(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator >=(Inductance, Inductance) Declaration public static bool operator >=(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator !=(Inductance, Inductance) Declaration public static bool operator !=(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator <(Inductance, Inductance) Declaration public static bool operator <(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator <=(Inductance, Inductance) Declaration public static bool operator <=(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description bool | Edit this page View Source operator *(Inductance, double) Declaration public static Inductance operator *(Inductance inductance, double scalar) Parameters Type Name Description Inductance inductance double scalar Returns Type Description Inductance | Edit this page View Source operator *(double, Inductance) Declaration public static Inductance operator *(double scalar, Inductance inductance) Parameters Type Name Description double scalar Inductance inductance Returns Type Description Inductance | Edit this page View Source operator -(Inductance, Inductance) Declaration public static Inductance operator -(Inductance left, Inductance right) Parameters Type Name Description Inductance left Inductance right Returns Type Description Inductance Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.InductanceUnit.html": {
    "href": "docs/api/CircuitTool.Units.InductanceUnit.html",
    "title": "Enum InductanceUnit | CircuitTool Documentation",
    "summary": "Enum InductanceUnit Represents inductance measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum InductanceUnit Fields Name Description Henries Henries (H) Kilohenries Kilohenries (kH) Microhenries Microhenries (μH) Millihenries Millihenries (mH) Nanohenries Nanohenries (nH)"
  },
  "docs/api/CircuitTool.Units.Power.html": {
    "href": "docs/api/CircuitTool.Units.Power.html",
    "title": "Struct Power | CircuitTool Documentation",
    "summary": "Struct Power Represents a strongly-typed power measurement with automatic unit conversion Implements IEquatable<Power> IComparable<Power> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Power : IEquatable<Power>, IComparable<Power> Constructors | Edit this page View Source Power(double, PowerUnit) Creates a new power measurement Declaration public Power(double value, PowerUnit unit) Parameters Type Name Description double value The value in the specified unit PowerUnit unit The unit of measurement Properties | Edit this page View Source Gigawatts Gets the power value in gigawatts Declaration public double Gigawatts { get; } Property Value Type Description double | Edit this page View Source Kilowatts Gets the power value in kilowatts Declaration public double Kilowatts { get; } Property Value Type Description double | Edit this page View Source Megawatts Gets the power value in megawatts Declaration public double Megawatts { get; } Property Value Type Description double | Edit this page View Source Microwatts Gets the power value in microwatts Declaration public double Microwatts { get; } Property Value Type Description double | Edit this page View Source Milliwatts Gets the power value in milliwatts Declaration public double Milliwatts { get; } Property Value Type Description double | Edit this page View Source Nanowatts Gets the power value in nanowatts Declaration public double Nanowatts { get; } Property Value Type Description double | Edit this page View Source Watts Gets the power value in watts Declaration public double Watts { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Power) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Power other) Parameters Type Name Description Power other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source ConvertTo(PowerUnit) Declaration public double ConvertTo(PowerUnit unit) Parameters Type Name Description PowerUnit unit Returns Type Description double | Edit this page View Source Equals(Power) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Power other) Parameters Type Name Description Power other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(PowerUnit) Declaration public string ToString(PowerUnit unit) Parameters Type Name Description PowerUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Power, Power) Declaration public static Power operator +(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description Power | Edit this page View Source operator /(Power, double) Declaration public static Power operator /(Power power, double scalar) Parameters Type Name Description Power power double scalar Returns Type Description Power | Edit this page View Source operator ==(Power, Power) Declaration public static bool operator ==(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator >(Power, Power) Declaration public static bool operator >(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator >=(Power, Power) Declaration public static bool operator >=(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator !=(Power, Power) Declaration public static bool operator !=(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator <(Power, Power) Declaration public static bool operator <(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator <=(Power, Power) Declaration public static bool operator <=(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description bool | Edit this page View Source operator *(Power, double) Declaration public static Power operator *(Power power, double scalar) Parameters Type Name Description Power power double scalar Returns Type Description Power | Edit this page View Source operator *(double, Power) Declaration public static Power operator *(double scalar, Power power) Parameters Type Name Description double scalar Power power Returns Type Description Power | Edit this page View Source operator -(Power, Power) Declaration public static Power operator -(Power left, Power right) Parameters Type Name Description Power left Power right Returns Type Description Power Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.PowerUnit.html": {
    "href": "docs/api/CircuitTool.Units.PowerUnit.html",
    "title": "Enum PowerUnit | CircuitTool Documentation",
    "summary": "Enum PowerUnit Represents power measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum PowerUnit Fields Name Description Gigawatts Gigawatts (GW) Kilowatts Kilowatts (kW) Megawatts Megawatts (MW) Microwatts Microwatts (μW) Milliwatts Milliwatts (mW) Nanowatts Nanowatts (nW) Watts Watts (W)"
  },
  "docs/api/CircuitTool.Units.Resistance.html": {
    "href": "docs/api/CircuitTool.Units.Resistance.html",
    "title": "Struct Resistance | CircuitTool Documentation",
    "summary": "Struct Resistance Represents a strongly-typed resistance measurement with automatic unit conversion Implements IEquatable<Resistance> IComparable<Resistance> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Resistance : IEquatable<Resistance>, IComparable<Resistance> Constructors | Edit this page View Source Resistance(double, ResistanceUnit) Creates a new resistance measurement Declaration public Resistance(double value, ResistanceUnit unit) Parameters Type Name Description double value The value in the specified unit ResistanceUnit unit The unit of measurement Properties | Edit this page View Source Kiloohms Gets the resistance value in kiloohms Declaration public double Kiloohms { get; } Property Value Type Description double | Edit this page View Source Megaohms Gets the resistance value in megaohms Declaration public double Megaohms { get; } Property Value Type Description double | Edit this page View Source Ohms Gets the resistance value in ohms Declaration public double Ohms { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Resistance) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Resistance other) Parameters Type Name Description Resistance other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Equals(Resistance) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Resistance other) Parameters Type Name Description Resistance other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source GetValue(ResistanceUnit) Gets the resistance value in the specified unit Declaration public double GetValue(ResistanceUnit unit) Parameters Type Name Description ResistanceUnit unit The desired unit Returns Type Description double The resistance value in the specified unit | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(ResistanceUnit) Declaration public string ToString(ResistanceUnit unit) Parameters Type Name Description ResistanceUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Resistance, Resistance) Declaration public static Resistance operator +(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description Resistance | Edit this page View Source operator &(Resistance, Resistance) Declaration public static Resistance operator &(Resistance r1, Resistance r2) Parameters Type Name Description Resistance r1 Resistance r2 Returns Type Description Resistance | Edit this page View Source operator /(Resistance, double) Declaration public static Resistance operator /(Resistance resistance, double divisor) Parameters Type Name Description Resistance resistance double divisor Returns Type Description Resistance | Edit this page View Source operator ==(Resistance, Resistance) Declaration public static bool operator ==(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source operator >(Resistance, Resistance) Declaration public static bool operator >(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source operator >=(Resistance, Resistance) Declaration public static bool operator >=(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source implicit operator double(Resistance) Declaration public static implicit operator double(Resistance resistance) Parameters Type Name Description Resistance resistance Returns Type Description double | Edit this page View Source implicit operator Resistance(double) Declaration public static implicit operator Resistance(double ohms) Parameters Type Name Description double ohms Returns Type Description Resistance | Edit this page View Source operator !=(Resistance, Resistance) Declaration public static bool operator !=(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source operator <(Resistance, Resistance) Declaration public static bool operator <(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source operator <=(Resistance, Resistance) Declaration public static bool operator <=(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description bool | Edit this page View Source operator *(Resistance, double) Declaration public static Resistance operator *(Resistance resistance, double multiplier) Parameters Type Name Description Resistance resistance double multiplier Returns Type Description Resistance | Edit this page View Source operator -(Resistance, Resistance) Declaration public static Resistance operator -(Resistance left, Resistance right) Parameters Type Name Description Resistance left Resistance right Returns Type Description Resistance Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.ResistanceUnit.html": {
    "href": "docs/api/CircuitTool.Units.ResistanceUnit.html",
    "title": "Enum ResistanceUnit | CircuitTool Documentation",
    "summary": "Enum ResistanceUnit Represents resistance measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum ResistanceUnit Fields Name Description Gigaohms Gigaohms (GΩ) Kiloohms Kiloohms (kΩ) Megaohms Megaohms (MΩ) Milliohms Milliohms (mΩ) Ohms Ohms (Ω)"
  },
  "docs/api/CircuitTool.Units.TypedOhmsLawCalculator.html": {
    "href": "docs/api/CircuitTool.Units.TypedOhmsLawCalculator.html",
    "title": "Class TypedOhmsLawCalculator | CircuitTool Documentation",
    "summary": "Class TypedOhmsLawCalculator Provides strongly-typed Ohm's Law calculations using units to prevent errors Inheritance object TypedOhmsLawCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool.Units Assembly: .dll Syntax public static class TypedOhmsLawCalculator Methods | Edit this page View Source CalculateCurrent(Voltage, Resistance) Calculates current using Ohm's Law (I = V / R) Declaration public static Current CalculateCurrent(Voltage voltage, Resistance resistance) Parameters Type Name Description Voltage voltage Voltage Resistance resistance Resistance Returns Type Description Current Current | Edit this page View Source CalculatePower(Current, Resistance) Calculates power using P = I² × R Declaration public static double CalculatePower(Current current, Resistance resistance) Parameters Type Name Description Current current Current Resistance resistance Resistance Returns Type Description double Power in watts | Edit this page View Source CalculatePower(Voltage, Current) Calculates power using P = V × I Declaration public static double CalculatePower(Voltage voltage, Current current) Parameters Type Name Description Voltage voltage Voltage Current current Current Returns Type Description double Power in watts | Edit this page View Source CalculatePower(Voltage, Resistance) Calculates power using P = V² / R Declaration public static double CalculatePower(Voltage voltage, Resistance resistance) Parameters Type Name Description Voltage voltage Voltage Resistance resistance Resistance Returns Type Description double Power in watts | Edit this page View Source CalculateResistance(Voltage, Current) Calculates resistance using Ohm's Law (R = V / I) Declaration public static Resistance CalculateResistance(Voltage voltage, Current current) Parameters Type Name Description Voltage voltage Voltage Current current Current Returns Type Description Resistance Resistance | Edit this page View Source CalculateVoltage(Current, Resistance) Calculates voltage using Ohm's Law (V = I × R) Declaration public static Voltage CalculateVoltage(Current current, Resistance resistance) Parameters Type Name Description Current current Current Resistance resistance Resistance Returns Type Description Voltage Voltage"
  },
  "docs/api/CircuitTool.Units.Voltage.html": {
    "href": "docs/api/CircuitTool.Units.Voltage.html",
    "title": "Struct Voltage | CircuitTool Documentation",
    "summary": "Struct Voltage Represents a strongly-typed voltage measurement with automatic unit conversion Implements IEquatable<Voltage> IComparable<Voltage> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: CircuitTool.Units Assembly: .dll Syntax public readonly struct Voltage : IEquatable<Voltage>, IComparable<Voltage> Constructors | Edit this page View Source Voltage(double, VoltageUnit) Creates a new voltage measurement Declaration public Voltage(double value, VoltageUnit unit) Parameters Type Name Description double value The value in the specified unit VoltageUnit unit The unit of measurement Properties | Edit this page View Source Kilovolts Gets the voltage value in kilovolts Declaration public double Kilovolts { get; } Property Value Type Description double | Edit this page View Source Millivolts Gets the voltage value in millivolts Declaration public double Millivolts { get; } Property Value Type Description double | Edit this page View Source Volts Gets the voltage value in volts Declaration public double Volts { get; } Property Value Type Description double Methods | Edit this page View Source CompareTo(Voltage) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Voltage other) Parameters Type Name Description Voltage other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Equals(Voltage) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Voltage other) Parameters Type Name Description Voltage other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Edit this page View Source GetValue(VoltageUnit) Gets the voltage value in the specified unit Declaration public double GetValue(VoltageUnit unit) Parameters Type Name Description VoltageUnit unit The desired unit Returns Type Description double The voltage value in the specified unit | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description string The fully qualified type name. Overrides ValueType.ToString() | Edit this page View Source ToString(VoltageUnit) Declaration public string ToString(VoltageUnit unit) Parameters Type Name Description VoltageUnit unit Returns Type Description string Operators | Edit this page View Source operator +(Voltage, Voltage) Declaration public static Voltage operator +(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description Voltage | Edit this page View Source operator /(Voltage, double) Declaration public static Voltage operator /(Voltage voltage, double divisor) Parameters Type Name Description Voltage voltage double divisor Returns Type Description Voltage | Edit this page View Source operator ==(Voltage, Voltage) Declaration public static bool operator ==(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source operator >(Voltage, Voltage) Declaration public static bool operator >(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source operator >=(Voltage, Voltage) Declaration public static bool operator >=(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source implicit operator double(Voltage) Declaration public static implicit operator double(Voltage voltage) Parameters Type Name Description Voltage voltage Returns Type Description double | Edit this page View Source implicit operator Voltage(double) Declaration public static implicit operator Voltage(double volts) Parameters Type Name Description double volts Returns Type Description Voltage | Edit this page View Source operator !=(Voltage, Voltage) Declaration public static bool operator !=(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source operator <(Voltage, Voltage) Declaration public static bool operator <(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source operator <=(Voltage, Voltage) Declaration public static bool operator <=(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description bool | Edit this page View Source operator *(Voltage, double) Declaration public static Voltage operator *(Voltage voltage, double multiplier) Parameters Type Name Description Voltage voltage double multiplier Returns Type Description Voltage | Edit this page View Source operator -(Voltage, Voltage) Declaration public static Voltage operator -(Voltage left, Voltage right) Parameters Type Name Description Voltage left Voltage right Returns Type Description Voltage Implements IEquatable<T> IComparable<T>"
  },
  "docs/api/CircuitTool.Units.VoltageUnit.html": {
    "href": "docs/api/CircuitTool.Units.VoltageUnit.html",
    "title": "Enum VoltageUnit | CircuitTool Documentation",
    "summary": "Enum VoltageUnit Represents voltage measurement units Namespace: CircuitTool.Units Assembly: .dll Syntax public enum VoltageUnit Fields Name Description Kilovolts Kilovolts (kV) Megavolts Megavolts (MV) Microvolts Microvolts (μV) Millivolts Millivolts (mV) Nanovolts Nanovolts (nV) Volts Volts (V)"
  },
  "docs/api/CircuitTool.Units.html": {
    "href": "docs/api/CircuitTool.Units.html",
    "title": "Namespace CircuitTool.Units | CircuitTool Documentation",
    "summary": "Namespace CircuitTool.Units Classes TypedOhmsLawCalculator Provides strongly-typed Ohm's Law calculations using units to prevent errors Structs Capacitance Represents a strongly-typed capacitance measurement with automatic unit conversion Current Represents a strongly-typed current measurement with automatic unit conversion Frequency Represents a strongly-typed frequency measurement with automatic unit conversion Inductance Represents a strongly-typed inductance measurement with automatic unit conversion Power Represents a strongly-typed power measurement with automatic unit conversion Resistance Represents a strongly-typed resistance measurement with automatic unit conversion Voltage Represents a strongly-typed voltage measurement with automatic unit conversion Enums CapacitanceUnit Represents capacitance measurement units CurrentUnit Represents current measurement units FrequencyUnit Represents frequency measurement units InductanceUnit Represents inductance measurement units PowerUnit Represents power measurement units ResistanceUnit Represents resistance measurement units VoltageUnit Represents voltage measurement units"
  },
  "docs/api/CircuitTool.UseCaseTemplates.FilterDesign.html": {
    "href": "docs/api/CircuitTool.UseCaseTemplates.FilterDesign.html",
    "title": "Class UseCaseTemplates.FilterDesign | CircuitTool Documentation",
    "summary": "Class UseCaseTemplates.FilterDesign Template for RC filter design Inheritance object UseCaseTemplates.FilterDesign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class UseCaseTemplates.FilterDesign Methods | Edit this page View Source DesignLowPassFilter(double) Declaration public static (double R, double C) DesignLowPassFilter(double cutoffFrequency) Parameters Type Name Description double cutoffFrequency Returns Type Description (double referenceResistor, double biasVoltage) | Edit this page View Source GenerateLowPassCode(double) Declaration public static string GenerateLowPassCode(double cutoffFrequency) Parameters Type Name Description double cutoffFrequency Returns Type Description string"
  },
  "docs/api/CircuitTool.UseCaseTemplates.LEDResistorCalculator.html": {
    "href": "docs/api/CircuitTool.UseCaseTemplates.LEDResistorCalculator.html",
    "title": "Class UseCaseTemplates.LEDResistorCalculator | CircuitTool Documentation",
    "summary": "Class UseCaseTemplates.LEDResistorCalculator Template for LED current limiting resistor Inheritance object UseCaseTemplates.LEDResistorCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class UseCaseTemplates.LEDResistorCalculator Methods | Edit this page View Source CalculateCurrentLimitingResistor(double, double, double) Declaration public static double CalculateCurrentLimitingResistor(double supplyVoltage, double ledVoltage, double ledCurrent) Parameters Type Name Description double supplyVoltage double ledVoltage double ledCurrent Returns Type Description double | Edit this page View Source GenerateCode(double, double, double) Declaration public static string GenerateCode(double supplyVoltage, double ledVoltage, double ledCurrent) Parameters Type Name Description double supplyVoltage double ledVoltage double ledCurrent Returns Type Description string"
  },
  "docs/api/CircuitTool.UseCaseTemplates.VoltageDividerDesign.html": {
    "href": "docs/api/CircuitTool.UseCaseTemplates.VoltageDividerDesign.html",
    "title": "Class UseCaseTemplates.VoltageDividerDesign | CircuitTool Documentation",
    "summary": "Class UseCaseTemplates.VoltageDividerDesign Template for designing a voltage divider Inheritance object UseCaseTemplates.VoltageDividerDesign Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class UseCaseTemplates.VoltageDividerDesign Methods | Edit this page View Source DesignVoltageDivider(double, double, double) Declaration public static (double R1, double R2) DesignVoltageDivider(double inputVoltage, double outputVoltage, double totalCurrent = 0.001) Parameters Type Name Description double inputVoltage double outputVoltage double totalCurrent Returns Type Description (double referenceResistor, double biasVoltage) | Edit this page View Source GenerateCode(double, double) Declaration public static string GenerateCode(double inputVoltage, double outputVoltage) Parameters Type Name Description double inputVoltage double outputVoltage Returns Type Description string"
  },
  "docs/api/CircuitTool.UseCaseTemplates.html": {
    "href": "docs/api/CircuitTool.UseCaseTemplates.html",
    "title": "Class UseCaseTemplates | CircuitTool Documentation",
    "summary": "Class UseCaseTemplates Common use case templates for quick implementation Inheritance object UseCaseTemplates Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class UseCaseTemplates"
  },
  "docs/api/CircuitTool.VoltageCalculator.html": {
    "href": "docs/api/CircuitTool.VoltageCalculator.html",
    "title": "Class VoltageCalculator | CircuitTool Documentation",
    "summary": "Class VoltageCalculator Inheritance object VoltageCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class VoltageCalculator Methods | Edit this page View Source VoltageDivider(double, double, double) Declaration public static double VoltageDivider(double vin, double r1, double r2) Parameters Type Name Description double vin double r1 double r2 Returns Type Description double | Edit this page View Source VoltageDrop(double, double) Declaration public static double VoltageDrop(double current, double resistance) Parameters Type Name Description double current double resistance Returns Type Description double"
  },
  "docs/api/CircuitTool.VoltageDividerCalculator.html": {
    "href": "docs/api/CircuitTool.VoltageDividerCalculator.html",
    "title": "Class VoltageDividerCalculator | CircuitTool Documentation",
    "summary": "Class VoltageDividerCalculator Inheritance object VoltageDividerCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class VoltageDividerCalculator Methods | Edit this page View Source Calculate(double, double, double) Declaration public static double Calculate(double vin, double r1, double r2) Parameters Type Name Description double vin double r1 double r2 Returns Type Description double"
  },
  "docs/api/CircuitTool.VoltageDropCalculator.html": {
    "href": "docs/api/CircuitTool.VoltageDropCalculator.html",
    "title": "Class VoltageDropCalculator | CircuitTool Documentation",
    "summary": "Class VoltageDropCalculator Inheritance object VoltageDropCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class VoltageDropCalculator Methods | Edit this page View Source Calculate(double, double) Declaration public static double Calculate(double current, double resistance) Parameters Type Name Description double current double resistance Returns Type Description double"
  },
  "docs/api/CircuitTool.WattsVoltsAmpsOhmsCalculator.html": {
    "href": "docs/api/CircuitTool.WattsVoltsAmpsOhmsCalculator.html",
    "title": "Class WattsVoltsAmpsOhmsCalculator | CircuitTool Documentation",
    "summary": "Class WattsVoltsAmpsOhmsCalculator Provides quick conversions between watts, volts, amps, and ohms. Inheritance object WattsVoltsAmpsOhmsCalculator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: CircuitTool Assembly: .dll Syntax public static class WattsVoltsAmpsOhmsCalculator Remarks Example usage: double w = WattsVoltsAmpsOhmsCalculator.Watts(12, 2); // 24W double v = WattsVoltsAmpsOhmsCalculator.Volts(24, 2); // 12V double a = WattsVoltsAmpsOhmsCalculator.Amps(24, 12); // 2A double r = WattsVoltsAmpsOhmsCalculator.Ohms(12, 2); // 6 Ohms Methods | Edit this page View Source Amps(double, double) Calculates current from watts and volts: A = W / V. Declaration public static double Amps(double watts, double volts) Parameters Type Name Description double watts Power in watts (W). double volts Voltage in volts (V). Returns Type Description double Current in amperes (A). | Edit this page View Source Ohms(double, double) Calculates resistance from volts and amps: R = V / A. Declaration public static double Ohms(double volts, double amps) Parameters Type Name Description double volts Voltage in volts (V). double amps Current in amperes (A). Returns Type Description double Resistance in ohms (Ω). | Edit this page View Source Volts(double, double) Calculates voltage from watts and amps: V = W / A. Declaration public static double Volts(double watts, double amps) Parameters Type Name Description double watts Power in watts (W). double amps Current in amperes (A). Returns Type Description double Voltage in volts (V). | Edit this page View Source Watts(double, double) Calculates power in watts from volts and amps: W = V × A. Declaration public static double Watts(double volts, double amps) Parameters Type Name Description double volts Voltage in volts (V). double amps Current in amperes (A). Returns Type Description double Power in watts (W)."
  },
  "docs/api/CircuitTool.WiFiMode.html": {
    "href": "docs/api/CircuitTool.WiFiMode.html",
    "title": "Enum WiFiMode | CircuitTool Documentation",
    "summary": "Enum WiFiMode ESP32 WiFi operation modes Namespace: CircuitTool Assembly: .dll Syntax public enum WiFiMode Fields Name Description Active DeepSleep LightSleep ModemSleep Transmitting"
  },
  "docs/api/CircuitTool.html": {
    "href": "docs/api/CircuitTool.html",
    "title": "Namespace CircuitTool | CircuitTool Documentation",
    "summary": "Namespace CircuitTool Classes ACCircuitCalculator Provides calculations for AC circuit analysis and characteristics. AntennaCalculator Provides calculations for antenna design and analysis ArduinoTools Provides Arduino-specific calculations and utilities BeginnerCalculators Popular calculators for electronics beginners CapacitorCalculator Provides easy-to-use methods for capacitor circuit calculations, including reactance, energy, time constants, and more. CircuitCalculations ComPortTools Provides comprehensive COM port utilities for hardware communication and monitoring ComPortTools.SerialConfig Serial port configuration ComPortTools.SerialPortInfo Serial port information CommunicationProtocolTools Provides tools and calculators for various hardware communication protocols CommunicationProtocolTools.I2CConfig I2C communication parameters CommunicationProtocolTools.SPIConfig SPI communication parameters CommunicationProtocolTools.UARTConfig UART communication parameters DocumentationExamples Interactive documentation examples demonstrating common use cases DocumentationExamples.ACAnalysis AC circuit analysis example DocumentationExamples.BasicOhmsLaw Basic Ohm's Law calculations example DocumentationExamples.CircuitBuilding Circuit building example using basic calculations DocumentationExamples.EnergyCalculations Energy calculation example EMCCalculator Provides electromagnetic compatibility (EMC) calculations ESP32Tools Provides ESP32-specific calculations and utilities ElectricityBillCalculator Provides a simple method to calculate electricity bills. EnergyCalculator EnergyConsumptionCalculator FilterCalculator Provides calculations for electronic filter design and analysis. HardwareDebuggingTools Provides hardware debugging and troubleshooting tools for embedded systems HardwareDebuggingTools.DebugResult Debugging test result HardwareDebuggingTools.HardwareConfig Hardware configuration for debugging InductorCalculator Provides calculations for inductor circuits and characteristics. InteractiveTutorials Interactive tutorial system LEDCalculator Provides easy-to-use methods for LED circuit calculations, including resistor values, power, and brightness. MotorControlCalculator Provides specialized calculations for DC motor control and analysis OhmsLawCalculator Provides calculations for Ohm's Law (V = I × R). PCBDesignCalculator Provides calculations and utilities for PCB design and layout PhysicsCircuitCalculators Provides additional calculators for electrical engineering and physics, including impedance, resonance, Q factor, and more. PowerCalculator Provides easy-to-use methods for common electrical power calculations. PowerFactorCalculator PowerSupplyCalculator Provides calculations and utilities for power supply design and analysis RaspberryPiTools Provides calculations and utilities for Raspberry Pi projects ResistorCalculator Provides methods for resistor calculations, including Ohm's Law, series, and parallel combinations. SensorInterfaceCalculator Provides calculations and utilities for sensor interfacing and signal conditioning SignalIntegrityCalculator Provides calculations for signal integrity analysis ThermalCalculator Provides thermal analysis calculations for electronic components TransformerCalculator Provides calculations for transformer design and characteristics. UnitConverter UseCaseTemplates Common use case templates for quick implementation UseCaseTemplates.FilterDesign Template for RC filter design UseCaseTemplates.LEDResistorCalculator Template for LED current limiting resistor UseCaseTemplates.VoltageDividerDesign Template for designing a voltage divider VoltageCalculator VoltageDividerCalculator VoltageDropCalculator WattsVoltsAmpsOhmsCalculator Provides quick conversions between watts, volts, amps, and ohms. Structs ACCurrent Represents an AC current with magnitude and phase ACVoltage Represents an AC voltage with magnitude and phase Admittance Represents complex admittance for AC circuit analysis Impedance Represents complex impedance for AC circuit analysis RaspberryPiTools.PWMConfig PWM configuration settings Enums ComPortTools.SerialHandshake Serial port handshake options (compatibility for older frameworks) ComPortTools.SerialParity Serial port parity options (compatibility for older frameworks) ComPortTools.SerialStopBits Serial port stop bits options (compatibility for older frameworks) CommunicationProtocolTools.SPIMode SPI communication modes HardwareDebuggingTools.ProblemCategory Common hardware problem categories MotorControlCalculator.MotorType Motor types for different calculation methods PCBDesignCalculator.PCBStackup PCB layer stackup types PowerSupplyCalculator.PSUTopology Power supply topology types RaspberryPiModel Raspberry Pi model enumeration RaspberryPiTools.GPIOPin GPIO pin mapping for different Raspberry Pi models SensorInterfaceCalculator.SensorType Common sensor types and their characteristics WiFiMode ESP32 WiFi operation modes"
  },
  "docs/examples/index.html": {
    "href": "docs/examples/index.html",
    "title": "CircuitTool Examples | CircuitTool Documentation",
    "summary": "CircuitTool Examples This section contains practical examples and real-world use cases for CircuitTool. Quick Examples LED Strip Current Calculation Calculate the total current required for an LED strip: using CircuitTool; // LED strip specifications int numberOfLEDs = 60; // 60 LEDs per meter double ledCurrent = 0.02; // 20mA per LED double supplyVoltage = 12.0; // 12V power supply double ledVoltage = 3.2; // Forward voltage per LED // Calculate total current double totalCurrent = numberOfLEDs * ledCurrent; Console.WriteLine($\"Total LED current: {totalCurrent}A\"); // Calculate power consumption double totalPower = supplyVoltage * totalCurrent; Console.WriteLine($\"Total power consumption: {totalPower}W\"); // Calculate current limiting resistor if needed if (supplyVoltage > ledVoltage) { var resistorResult = LEDCalculator.CalculateCurrentLimitingResistor( supplyVoltage, ledVoltage, ledCurrent); Console.WriteLine($\"Current limiting resistor: {resistorResult.resistance}Ω\"); } Arduino Project: Temperature Sensor Design a temperature monitoring system with Arduino: using CircuitTool; // Generate Arduino code for temperature sensor string tempSensorCode = ArduinoTools.GenerateAnalogSensorCode( sensorPin: 0, sensorName: \"LM35\", conversionFormula: \"voltage * 100\", // LM35: 10mV/°C units: \"°C\" ); // Calculate pull-up resistor for I2C temperature sensor var i2cConfig = new CommunicationProtocolTools.I2CConfig { ClockFrequency = 100000, // 100kHz SupplyVoltage = 3.3, // 3.3V system NumberOfDevices = 2 // Temperature sensor + RTC }; var (minR, maxR, recommendedR) = CommunicationProtocolTools.CalculateI2CPullUpResistors(i2cConfig); Console.WriteLine($\"I2C pull-up resistor: {recommendedR}Ω\"); // Generate I2C scanner code string scannerCode = CommunicationProtocolTools.GenerateI2CScannerCode(); Power Supply Design Design a linear power supply: using CircuitTool; // Input specifications double inputVoltage = 15.0; // 15V input double outputVoltage = 5.0; // 5V output double outputCurrent = 2.0; // 2A output current // Calculate linear regulator requirements var (powerDissipation, efficiency) = PowerSupplyCalculator.CalculateLinearRegulator( inputVoltage, outputVoltage, outputCurrent); Console.WriteLine($\"Power dissipation: {powerDissipation}W\"); Console.WriteLine($\"Efficiency: {efficiency * 100:F1}%\"); // Calculate heat sink requirements double thermalResistance = ThermalCalculator.CalculateHeatSinkRequirements( powerDissipation: powerDissipation, ambientTemp: 25.0, maxJunctionTemp: 85.0, junctionToCase: 2.0 // Thermal resistance junction-to-case ); Console.WriteLine($\"Required heat sink thermal resistance: {thermalResistance:F2} °C/W\"); // Calculate filter capacitor double filterCap = PowerSupplyCalculator.CalculateBuckCapacitor( outputCurrent: outputCurrent, switchingFrequency: 100000, // 100kHz (for ripple estimation) voltageRipple: 0.05 // 50mV ripple ); Console.WriteLine($\"Output filter capacitor: {filterCap * 1e6:F0}µF\"); Motor Control System Design a DC motor control circuit: using CircuitTool; // Motor specifications double motorVoltage = 12.0; // 12V motor double motorCurrent = 5.0; // 5A stall current double pwmFrequency = 20000; // 20kHz PWM // Calculate H-bridge requirements var hBridgeReq = MotorControlCalculator.CalculateHBridgeRequirements( motorVoltage, motorCurrent, pwmFrequency, safetyFactor: 1.5); Console.WriteLine($\"MOSFET voltage rating: {hBridgeReq.mosfetVoltageRating}V\"); Console.WriteLine($\"MOSFET current rating: {hBridgeReq.mosfetCurrentRating}A\"); Console.WriteLine($\"Gate drive requirements: {hBridgeReq.gateDriverRequirements}\"); // Generate Arduino motor control code string motorCode = MotorControlCalculator.GenerateArduinoMotorCode( enablePin: 9, directionPin1: 7, directionPin2: 8, pwmFrequency: 1000 ); // Calculate thermal requirements var thermalAnalysis = MotorControlCalculator.CalculateThermalRequirements( motorCurrent, pwmFrequency, ambientTemp: 25.0); Console.WriteLine($\"Heat sink required: {thermalAnalysis.heatSinkRequired}\"); Console.WriteLine($\"Estimated temperature rise: {thermalAnalysis.temperatureRise:F1}°C\"); Signal Integrity Analysis Analyze high-speed digital signals: using CircuitTool; // PCB trace specifications double traceWidth = 0.1; // 0.1mm trace width double traceLength = 50.0; // 50mm trace length double frequency = 100e6; // 100MHz signal // Calculate trace impedance double impedance = PCBDesignCalculator.CalculateTraceImpedance( traceWidth: traceWidth, traceThickness: 0.035, // 35µm copper dielectricHeight: 0.2, // 0.2mm dielectric dielectricConstant: 4.5 // FR4 εr ); Console.WriteLine($\"Trace impedance: {impedance:F1}Ω\"); // Calculate maximum frequency for clean signals double maxFrequency = SignalIntegrityCalculator.CalculateMaximumFrequency( traceLength: traceLength, riseTime: 1e-9 // 1ns rise time ); Console.WriteLine($\"Maximum recommended frequency: {maxFrequency / 1e6:F1}MHz\"); // EMC considerations var emcAnalysis = EMCCalculator.AnalyzeEMCCompliance( frequency: frequency, traceLength: traceLength, current: 0.1 // 100mA switching current ); Console.WriteLine($\"EMI risk level: {emcAnalysis.riskLevel}\"); Console.WriteLine($\"Recommended mitigation: {emcAnalysis.recommendations}\"); Communication Protocol Optimization Optimize I2C, SPI, and UART settings: using CircuitTool; // I2C Bus Analysis var i2cConfig = new CommunicationProtocolTools.I2CConfig { ClockFrequency = 400000, // Fast mode I2C SupplyVoltage = 3.3, BusCapacitance = 200e-12, // 200pF bus capacitance NumberOfDevices = 4 }; // Calculate optimal pull-up resistors var (minRes, maxRes, optimalRes) = CommunicationProtocolTools.CalculateI2CPullUpResistors(i2cConfig); Console.WriteLine($\"Optimal I2C pull-up: {optimalRes}Ω\"); // SPI Frequency Optimization var spiConfig = new CommunicationProtocolTools.SPIConfig { ClockFrequency = 10000000, // 10MHz desired CableLength = 0.1, // 10cm cable Mode = CommunicationProtocolTools.SPIMode.Mode0 }; double maxSpiFreq = CommunicationProtocolTools.CalculateMaxSPIFrequency(spiConfig); Console.WriteLine($\"Maximum safe SPI frequency: {maxSpiFreq / 1e6:F1}MHz\"); // UART Error Rate Analysis var uartConfig = new CommunicationProtocolTools.UARTConfig { BaudRate = 115200, DataBits = 8, StopBits = 1, Parity = \"None\" }; double bitErrorRate = CommunicationProtocolTools.CalculateUARTBitErrorRate( uartConfig, clockAccuracyPpm: 100); Console.WriteLine($\"Estimated bit error rate: {bitErrorRate:P4}\"); Hardware Debugging Diagnose hardware problems automatically: using CircuitTool; // Hardware configuration var hwConfig = new HardwareDebuggingTools.HardwareConfig { SupplyVoltage = 3.25, // Slightly low voltage OperatingFrequency = 16e6, // 16MHz crystal AmbientTemperature = 35.0, // Elevated temperature HasCrystal = true, HasBrownoutDetection = true }; // Reported symptoms var symptoms = new List<string> { \"Random resets\", \"I2C communication errors\", \"Timing issues with UART\" }; // Run comprehensive diagnostics var diagnosticResults = HardwareDebuggingTools.PerformDiagnostics(hwConfig, symptoms); foreach (var result in diagnosticResults) { Console.WriteLine($\"Test: {result.TestName}\"); Console.WriteLine($\"Status: {(result.Passed ? \"PASS\" : \"FAIL\")}\"); Console.WriteLine($\"Details: {result.Details}\"); Console.WriteLine($\"Recommendation: {result.Recommendation}\"); Console.WriteLine(); } // Generate troubleshooting guide string troubleshootingGuide = HardwareDebuggingTools.GenerateTroubleshootingGuide(symptoms); Console.WriteLine(troubleshootingGuide); // Generate Arduino diagnostic sketch string diagnosticSketch = HardwareDebuggingTools.GenerateArduinoDiagnosticSketch( new List<string> { \"power\", \"timing\", \"memory\", \"pins\" }); Complete Project Examples Smart Home Sensor Node A complete IoT sensor node project: // 1. Power budget analysis double sensorCurrent = 0.001; // 1mA sensor double mcuActiveCurrent = 0.020; // 20mA MCU active double mcuSleepCurrent = 0.0001; // 0.1mA MCU sleep double dutyCycle = 0.01; // 1% duty cycle double averageCurrent = (mcuActiveCurrent * dutyCycle) + (mcuSleepCurrent * (1 - dutyCycle)) + sensorCurrent; // 2. Battery life calculation double batteryCapacity = 2000; // 2000mAh battery double batteryLife = batteryCapacity / averageCurrent; Console.WriteLine($\"Estimated battery life: {batteryLife:F0} hours\"); // 3. Communication setup string espCode = ESP32Tools.GenerateWiFiCode(\"MyNetwork\", \"password\"); string sensorCode = ArduinoTools.GenerateAnalogSensorCode(0, \"BME280\", \"readBME280()\", \"°C/RH%\"); // 4. Power supply design var powerResult = PowerSupplyCalculator.CalculateLinearRegulator( inputVoltage: 3.7, // Li-ion battery outputVoltage: 3.3, // ESP32 supply outputCurrent: averageCurrent ); RF Circuit Design Design and analyze RF circuits: // Antenna calculations double frequency = 2.4e9; // 2.4GHz WiFi var antennaResult = AntennaCalculator.CalculateDipoleAntenna(frequency); Console.WriteLine($\"Dipole length: {antennaResult.totalLength * 1000:F1}mm\"); Console.WriteLine($\"Each element: {antennaResult.elementLength * 1000:F1}mm\"); // Transmission line analysis double characteristicImpedance = 50.0; double lineLength = 0.1; // 10cm var transmissionLine = AntennaCalculator.CalculateTransmissionLine( frequency, characteristicImpedance, lineLength); Console.WriteLine($\"Electrical length: {transmissionLine.electricalLength:F1}°\"); Console.WriteLine($\"Propagation delay: {transmissionLine.propagationDelay * 1e9:F2}ns\"); These examples demonstrate the versatility and power of CircuitTool across different domains of electrical engineering and embedded systems development."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "CircuitTool Documentation | CircuitTool Documentation",
    "summary": "CircuitTool Documentation Welcome to the comprehensive documentation for CircuitTool - a powerful C# library for electrical engineering and electronics calculations. Quick Start CircuitTool provides a wide range of calculators and tools for: Basic Electrical Calculations - Ohm's Law, Power, Voltage, Current Component Analysis - Resistors, Capacitors, Inductors, Transformers AC Circuit Analysis - Impedance, Phase, Frequency Response Hardware Tools - Arduino, ESP32, Raspberry Pi support Communication Protocols - I2C, SPI, UART, COM Port tools Advanced Analysis - Signal Integrity, EMC, Thermal Analysis Performance Optimization - Vectorized calculations, Caching Getting Started Installation Install CircuitTool via NuGet Package Manager: dotnet add package CircuitTool Or via Package Manager Console: Install-Package CircuitTool Basic Usage using CircuitTool; // Basic Ohm's Law calculation double voltage = OhmsLawCalculator.CalculateVoltage(current: 2.0, resistance: 100.0); Console.WriteLine($\"Voltage: {voltage}V\"); // Output: Voltage: 200V // LED current limiting resistor var ledResult = LEDCalculator.CalculateCurrentLimitingResistor( supplyVoltage: 5.0, ledVoltage: 2.1, ledCurrent: 0.02); Console.WriteLine($\"Required resistor: {ledResult.resistance}Ω\"); // Arduino GPIO code generation string gpioCode = ArduinoTools.GenerateGPIOCode(pin: 13, mode: \"OUTPUT\"); Key Features \uD83E\uDDEE Comprehensive Calculators 23 specialized calculator classes covering all aspects of electrical engineering Cross-platform compatibility (.NET Framework 4.5+ to .NET 8.0) Unit conversion with automatic handling of different measurement systems \uD83D\uDD27 Hardware Integration Embedded platform support for Arduino, ESP32, and Raspberry Pi Communication protocol tools for I2C, SPI, UART analysis Code generation for common hardware tasks and configurations \uD83D\uDCCA Advanced Analysis Signal integrity calculations for high-speed designs EMC analysis for electromagnetic compatibility Thermal management tools for heat dissipation analysis Power analysis for efficiency optimization ⚡ Performance Optimized Vectorized calculations using SIMD instructions Caching system for repeated calculations Asynchronous support for long-running operations Bulk processing for large datasets Documentation Sections API Reference - Complete API documentation Tutorials - Step-by-step guides Examples - Practical code examples Hardware Guides - Platform-specific documentation Support & Contributing GitHub Repository: https://github.com/jomardyan/CircuitTool Issues & Bug Reports: GitHub Issues License: MIT License - see LICENSE CircuitTool v2.0.0 - © 2025 Jomardyan - MIT License"
  },
  "docs/tutorials/index.html": {
    "href": "docs/tutorials/index.html",
    "title": "Getting Started with CircuitTool | CircuitTool Documentation",
    "summary": "Getting Started with CircuitTool This tutorial will guide you through the basics of using CircuitTool for electrical engineering calculations. Prerequisites .NET Framework 4.5+ or .NET 6.0+ Basic understanding of electrical engineering concepts Visual Studio, VS Code, or any .NET-compatible IDE Installation Via NuGet Package Manager (Recommended) Using Package Manager Console: Install-Package CircuitTool Using .NET CLI: dotnet add package CircuitTool Using PackageReference in .csproj: <PackageReference Include=\"CircuitTool\" Version=\"2.0.0\" /> Basic Usage Examples 1. Ohm's Law Calculations using CircuitTool; // Calculate voltage when current and resistance are known double voltage = OhmsLawCalculator.CalculateVoltage(current: 2.5, resistance: 100.0); Console.WriteLine($\"Voltage: {voltage}V\"); // Output: 250V // Calculate current when voltage and resistance are known double current = OhmsLawCalculator.CalculateCurrent(voltage: 12.0, resistance: 1000.0); Console.WriteLine($\"Current: {current}A\"); // Output: 0.012A // Calculate resistance when voltage and current are known double resistance = OhmsLawCalculator.CalculateResistance(voltage: 5.0, current: 0.1); Console.WriteLine($\"Resistance: {resistance}Ω\"); // Output: 50Ω 2. Power Calculations // Power using voltage and current double power1 = PowerCalculator.CalculatePower(voltage: 12.0, current: 2.0); Console.WriteLine($\"Power: {power1}W\"); // Output: 24W // Power using voltage and resistance double power2 = PowerCalculator.CalculatePowerFromVoltageResistance(voltage: 12.0, resistance: 6.0); Console.WriteLine($\"Power: {power2}W\"); // Output: 24W // Power using current and resistance double power3 = PowerCalculator.CalculatePowerFromCurrentResistance(current: 2.0, resistance: 6.0); Console.WriteLine($\"Power: {power3}W\"); // Output: 24W 3. LED Calculations // Calculate current limiting resistor for LED var ledResult = LEDCalculator.CalculateCurrentLimitingResistor( supplyVoltage: 5.0, // 5V supply ledVoltage: 2.1, // Red LED forward voltage ledCurrent: 0.02 // 20mA desired current ); Console.WriteLine($\"Required resistor: {ledResult.resistance}Ω\"); Console.WriteLine($\"Power dissipation: {ledResult.powerDissipation}W\"); Console.WriteLine($\"Nearest standard value: {ledResult.nearestStandardResistor}Ω\"); 4. Resistor Networks // Series resistance calculation double[] seriesResistors = { 100, 220, 330, 470 }; double totalSeries = ResistorCalculator.CalculateSeriesResistance(seriesResistors); Console.WriteLine($\"Total series resistance: {totalSeries}Ω\"); // Output: 1120Ω // Parallel resistance calculation double[] parallelResistors = { 1000, 1000, 1000 }; double totalParallel = ResistorCalculator.CalculateParallelResistance(parallelResistors); Console.WriteLine($\"Total parallel resistance: {totalParallel:F2}Ω\"); // Output: 333.33Ω 5. Unit Conversions // Convert between different units double milliAmps = UnitConverter.ConvertCurrent(2.5, \"A\", \"mA\"); Console.WriteLine($\"2.5A = {milliAmps}mA\"); // Output: 2500mA double kiloOhms = UnitConverter.ConvertResistance(4700, \"Ω\", \"kΩ\"); Console.WriteLine($\"4700Ω = {kiloOhms}kΩ\"); // Output: 4.7kΩ double milliVolts = UnitConverter.ConvertVoltage(3.3, \"V\", \"mV\"); Console.WriteLine($\"3.3V = {milliVolts}mV\"); // Output: 3300mV Next Steps Hardware Integration Tutorial - Learn to use Arduino and ESP32 tools Advanced Calculations - AC circuits, filters, and transformers Communication Protocols - I2C, SPI, UART tools API Reference - Complete documentation of all classes and methods Common Patterns Error Handling try { double result = OhmsLawCalculator.CalculateVoltage(current: 0, resistance: 100); } catch (ArgumentException ex) { Console.WriteLine($\"Invalid input: {ex.Message}\"); } Batch Calculations // Calculate multiple LED resistors at once var ledConfigs = new[] { new { Supply = 5.0, LedV = 2.1, Current = 0.02 }, new { Supply = 12.0, LedV = 3.3, Current = 0.03 }, new { Supply = 3.3, LedV = 1.8, Current = 0.01 } }; foreach (var config in ledConfigs) { var result = LEDCalculator.CalculateCurrentLimitingResistor( config.Supply, config.LedV, config.Current); Console.WriteLine($\"Supply: {config.Supply}V, LED: {config.LedV}V, \" + $\"Current: {config.Current}A → Resistor: {result.resistance}Ω\"); } Performance Tips Use caching for repeated calculations: // The library automatically caches common calculations var calc1 = OhmsLawCalculator.CalculateVoltage(2.0, 100.0); var calc2 = OhmsLawCalculator.CalculateVoltage(2.0, 100.0); // Retrieved from cache Use bulk operations for large datasets: // For processing many values efficiently var resistanceValues = new double[] { 100, 220, 330, 470, 680, 1000 }; var results = BulkOperations.CalculateMultipleOhmsLaw(current: 0.01, resistanceValues); Use async methods for long-running calculations: var result = await AsyncCalculations.CalculateComplexCircuitAsync(circuitData); Ready to dive deeper? Check out our Hardware Integration Tutorial next!"
  },
  "index.html": {
    "href": "index.html",
    "title": "CircuitTool Documentation | CircuitTool Documentation",
    "summary": "CircuitTool Documentation Welcome to the CircuitTool documentation! CircuitTool is a comprehensive C# library for electrical engineering and electronics calculations, designed for embedded systems development and hardware design. Quick Start using CircuitTool; // Basic Ohm's Law calculation double voltage = OhmsLawCalculator.CalculateVoltage(current: 2.0, resistance: 100.0); Console.WriteLine($\"Voltage: {voltage}V\"); // Output: 200V // LED current limiting resistor var ledResult = LEDCalculator.CalculateCurrentLimitingResistor( supplyVoltage: 5.0, ledVoltage: 2.1, ledCurrent: 0.02); Console.WriteLine($\"Resistor needed: {ledResult.resistance}Ω\"); // Arduino GPIO configuration string gpioCode = ArduinoTools.GenerateGPIOCode(pin: 13, mode: \"OUTPUT\"); Features \uD83E\uDDEE Core Calculations Ohm's Law - Voltage, current, resistance calculations Power Calculations - Power dissipation and efficiency AC Circuit Analysis - Impedance, phase, frequency response Component Calculations - Resistors, capacitors, inductors \uD83D\uDD27 Hardware Support Arduino Tools - GPIO, PWM, and peripheral calculations ESP32 Tools - WiFi, Bluetooth, and ESP32-specific features Raspberry Pi Tools - GPIO current limits and hardware interface COM Port Tools - Serial communication and device detection \uD83D\uDCCA Advanced Analysis Signal Integrity - Signal quality and timing analysis Thermal Calculations - Heat dissipation and thermal management EMC Analysis - Electromagnetic compatibility calculations Power Analysis - Complex power system analysis ⚡ Performance Features Vectorized Calculations - SIMD-optimized operations Async Support - Asynchronous calculation processing Caching System - Result caching for improved performance Bulk Operations - Efficient batch processing Supported Platforms .NET Framework 4.5+ .NET Framework 4.6.2+ .NET 6.0+ .NET 8.0+ .NET Standard 2.0+ .NET Standard 2.1+ Installation dotnet add package CircuitTool Or via Package Manager Console: Install-Package CircuitTool Module Overview Module Classes Description Calculators 23 Core electrical and electronics calculations Hardware 10 Platform-specific tools and communication protocols Analysis 5 Advanced analysis and simulation tools Performance 6 Performance optimization and monitoring Documentation 4 Examples and educational resources Math 2 Advanced mathematical operations Serialization 1 Data import/export functionality Units 3 Unit conversion and management Getting Help \uD83D\uDCD6 API Reference - Browse the complete API documentation \uD83D\uDCA1 Examples - Check out practical examples and tutorials \uD83D\uDC1B Issues - Report bugs or request features on GitHub \uD83D\uDCAC Discussions - Join the community discussions License CircuitTool is licensed under the MIT License, making it free for both commercial and non-commercial use."
  }
}