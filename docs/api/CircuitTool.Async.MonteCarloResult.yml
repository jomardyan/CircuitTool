### YamlMime:ManagedReference
items:
- uid: CircuitTool.Async.MonteCarloResult
  commentId: T:CircuitTool.Async.MonteCarloResult
  id: MonteCarloResult
  parent: CircuitTool.Async
  children:
  - CircuitTool.Async.MonteCarloResult.#ctor(System.Double[])
  - CircuitTool.Async.MonteCarloResult.GetPercentile(System.Double)
  - CircuitTool.Async.MonteCarloResult.Maximum
  - CircuitTool.Async.MonteCarloResult.Mean
  - CircuitTool.Async.MonteCarloResult.Minimum
  - CircuitTool.Async.MonteCarloResult.SampleCount
  - CircuitTool.Async.MonteCarloResult.StandardDeviation
  - CircuitTool.Async.MonteCarloResult.ToString
  langs:
  - csharp
  - vb
  name: MonteCarloResult
  nameWithType: MonteCarloResult
  fullName: CircuitTool.Async.MonteCarloResult
  type: Struct
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: MonteCarloResult
    path: src/Performance/AsyncCalculations.cs
    startLine: 164
  namespace: CircuitTool.Async
  summary: Results from Monte Carlo analysis
  example: []
  syntax:
    content: public readonly struct MonteCarloResult
    content.vb: Public Structure MonteCarloResult
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: CircuitTool.Async.MonteCarloResult.#ctor(System.Double[])
  commentId: M:CircuitTool.Async.MonteCarloResult.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: MonteCarloResult(double[])
  nameWithType: MonteCarloResult.MonteCarloResult(double[])
  fullName: CircuitTool.Async.MonteCarloResult.MonteCarloResult(double[])
  type: Constructor
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: .ctor
    path: src/Performance/AsyncCalculations.cs
    startLine: 168
  namespace: CircuitTool.Async
  syntax:
    content: public MonteCarloResult(double[] results)
    parameters:
    - id: results
      type: System.Double[]
    content.vb: Public Sub New(results As Double())
  overload: CircuitTool.Async.MonteCarloResult.#ctor*
  nameWithType.vb: MonteCarloResult.New(Double())
  fullName.vb: CircuitTool.Async.MonteCarloResult.New(Double())
  name.vb: New(Double())
- uid: CircuitTool.Async.MonteCarloResult.Mean
  commentId: P:CircuitTool.Async.MonteCarloResult.Mean
  id: Mean
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Mean
  nameWithType: MonteCarloResult.Mean
  fullName: CircuitTool.Async.MonteCarloResult.Mean
  type: Property
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Mean
    path: src/Performance/AsyncCalculations.cs
    startLine: 190
  namespace: CircuitTool.Async
  syntax:
    content: public double Mean { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Mean As Double
  overload: CircuitTool.Async.MonteCarloResult.Mean*
- uid: CircuitTool.Async.MonteCarloResult.StandardDeviation
  commentId: P:CircuitTool.Async.MonteCarloResult.StandardDeviation
  id: StandardDeviation
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: StandardDeviation
  nameWithType: MonteCarloResult.StandardDeviation
  fullName: CircuitTool.Async.MonteCarloResult.StandardDeviation
  type: Property
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: StandardDeviation
    path: src/Performance/AsyncCalculations.cs
    startLine: 191
  namespace: CircuitTool.Async
  syntax:
    content: public double StandardDeviation { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property StandardDeviation As Double
  overload: CircuitTool.Async.MonteCarloResult.StandardDeviation*
- uid: CircuitTool.Async.MonteCarloResult.Minimum
  commentId: P:CircuitTool.Async.MonteCarloResult.Minimum
  id: Minimum
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Minimum
  nameWithType: MonteCarloResult.Minimum
  fullName: CircuitTool.Async.MonteCarloResult.Minimum
  type: Property
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Minimum
    path: src/Performance/AsyncCalculations.cs
    startLine: 192
  namespace: CircuitTool.Async
  syntax:
    content: public double Minimum { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Minimum As Double
  overload: CircuitTool.Async.MonteCarloResult.Minimum*
- uid: CircuitTool.Async.MonteCarloResult.Maximum
  commentId: P:CircuitTool.Async.MonteCarloResult.Maximum
  id: Maximum
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: Maximum
  nameWithType: MonteCarloResult.Maximum
  fullName: CircuitTool.Async.MonteCarloResult.Maximum
  type: Property
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Maximum
    path: src/Performance/AsyncCalculations.cs
    startLine: 193
  namespace: CircuitTool.Async
  syntax:
    content: public double Maximum { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Maximum As Double
  overload: CircuitTool.Async.MonteCarloResult.Maximum*
- uid: CircuitTool.Async.MonteCarloResult.SampleCount
  commentId: P:CircuitTool.Async.MonteCarloResult.SampleCount
  id: SampleCount
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: SampleCount
  nameWithType: MonteCarloResult.SampleCount
  fullName: CircuitTool.Async.MonteCarloResult.SampleCount
  type: Property
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SampleCount
    path: src/Performance/AsyncCalculations.cs
    startLine: 194
  namespace: CircuitTool.Async
  syntax:
    content: public int SampleCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SampleCount As Integer
  overload: CircuitTool.Async.MonteCarloResult.SampleCount*
- uid: CircuitTool.Async.MonteCarloResult.GetPercentile(System.Double)
  commentId: M:CircuitTool.Async.MonteCarloResult.GetPercentile(System.Double)
  id: GetPercentile(System.Double)
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: GetPercentile(double)
  nameWithType: MonteCarloResult.GetPercentile(double)
  fullName: CircuitTool.Async.MonteCarloResult.GetPercentile(double)
  type: Method
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: GetPercentile
    path: src/Performance/AsyncCalculations.cs
    startLine: 196
  namespace: CircuitTool.Async
  syntax:
    content: public double GetPercentile(double percentile)
    parameters:
    - id: percentile
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Function GetPercentile(percentile As Double) As Double
  overload: CircuitTool.Async.MonteCarloResult.GetPercentile*
  nameWithType.vb: MonteCarloResult.GetPercentile(Double)
  fullName.vb: CircuitTool.Async.MonteCarloResult.GetPercentile(Double)
  name.vb: GetPercentile(Double)
- uid: CircuitTool.Async.MonteCarloResult.ToString
  commentId: M:CircuitTool.Async.MonteCarloResult.ToString
  id: ToString
  parent: CircuitTool.Async.MonteCarloResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MonteCarloResult.ToString()
  fullName: CircuitTool.Async.MonteCarloResult.ToString()
  type: Method
  source:
    remote:
      path: src/Performance/AsyncCalculations.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: ToString
    path: src/Performance/AsyncCalculations.cs
    startLine: 205
  namespace: CircuitTool.Async
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The fully qualified type name.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: CircuitTool.Async.MonteCarloResult.ToString*
references:
- uid: CircuitTool.Async
  commentId: N:CircuitTool.Async
  href: CircuitTool.html
  name: CircuitTool.Async
  nameWithType: CircuitTool.Async
  fullName: CircuitTool.Async
  spec.csharp:
  - uid: CircuitTool
    name: CircuitTool
    href: CircuitTool.html
  - name: .
  - uid: CircuitTool.Async
    name: Async
    href: CircuitTool.Async.html
  spec.vb:
  - uid: CircuitTool
    name: CircuitTool
    href: CircuitTool.html
  - name: .
  - uid: CircuitTool.Async
    name: Async
    href: CircuitTool.Async.html
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CircuitTool.Async.MonteCarloResult.#ctor*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.#ctor
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult__ctor_System_Double___
  name: MonteCarloResult
  nameWithType: MonteCarloResult.MonteCarloResult
  fullName: CircuitTool.Async.MonteCarloResult.MonteCarloResult
  nameWithType.vb: MonteCarloResult.New
  fullName.vb: CircuitTool.Async.MonteCarloResult.New
  name.vb: New
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: CircuitTool.Async.MonteCarloResult.Mean*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.Mean
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_Mean
  name: Mean
  nameWithType: MonteCarloResult.Mean
  fullName: CircuitTool.Async.MonteCarloResult.Mean
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: CircuitTool.Async.MonteCarloResult.StandardDeviation*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.StandardDeviation
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_StandardDeviation
  name: StandardDeviation
  nameWithType: MonteCarloResult.StandardDeviation
  fullName: CircuitTool.Async.MonteCarloResult.StandardDeviation
- uid: CircuitTool.Async.MonteCarloResult.Minimum*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.Minimum
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_Minimum
  name: Minimum
  nameWithType: MonteCarloResult.Minimum
  fullName: CircuitTool.Async.MonteCarloResult.Minimum
- uid: CircuitTool.Async.MonteCarloResult.Maximum*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.Maximum
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_Maximum
  name: Maximum
  nameWithType: MonteCarloResult.Maximum
  fullName: CircuitTool.Async.MonteCarloResult.Maximum
- uid: CircuitTool.Async.MonteCarloResult.SampleCount*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.SampleCount
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_SampleCount
  name: SampleCount
  nameWithType: MonteCarloResult.SampleCount
  fullName: CircuitTool.Async.MonteCarloResult.SampleCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CircuitTool.Async.MonteCarloResult.GetPercentile*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.GetPercentile
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_GetPercentile_System_Double_
  name: GetPercentile
  nameWithType: MonteCarloResult.GetPercentile
  fullName: CircuitTool.Async.MonteCarloResult.GetPercentile
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: CircuitTool.Async.MonteCarloResult.ToString*
  commentId: Overload:CircuitTool.Async.MonteCarloResult.ToString
  href: CircuitTool.Async.MonteCarloResult.html#CircuitTool_Async_MonteCarloResult_ToString
  name: ToString
  nameWithType: MonteCarloResult.ToString
  fullName: CircuitTool.Async.MonteCarloResult.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
