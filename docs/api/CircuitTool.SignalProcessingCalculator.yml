### YamlMime:ManagedReference
items:
- uid: CircuitTool.SignalProcessingCalculator
  commentId: T:CircuitTool.SignalProcessingCalculator
  id: SignalProcessingCalculator
  parent: CircuitTool
  children:
  - CircuitTool.SignalProcessingCalculator.DynamicRange(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.ENOB(System.Double)
  - CircuitTool.SignalProcessingCalculator.JohnsonNoise(System.Double,System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.NoiseBandwidth(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.SINAD(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.SNR(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.SettlingTime(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.SlewRate(System.Double,System.Double)
  - CircuitTool.SignalProcessingCalculator.THD(System.Double,System.Double[])
  langs:
  - csharp
  - vb
  name: SignalProcessingCalculator
  nameWithType: SignalProcessingCalculator
  fullName: CircuitTool.SignalProcessingCalculator
  type: Class
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SignalProcessingCalculator
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 16
  namespace: CircuitTool
  summary: Provides calculations for signal processing applications.
  remarks: >-
    <p>Example usage:</p>


    <pre><code class="lang-csharp">double snr = SignalProcessingCalculator.SNR(100, 10); // 20 dB

    double thd = SignalProcessingCalculator.THD(100, new[] {5.0, 3.0, 2.0}); // Total Harmonic Distortion

    double bw = SignalProcessingCalculator.NoiseBandwidth(1000, 0.707); // Noise bandwidth</code></pre>
  example: []
  syntax:
    content: public static class SignalProcessingCalculator
    content.vb: Public Module SignalProcessingCalculator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: CircuitTool.SignalProcessingCalculator.SNR(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.SNR(System.Double,System.Double)
  id: SNR(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: SNR(double, double)
  nameWithType: SignalProcessingCalculator.SNR(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.SNR(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SNR
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 27
  namespace: CircuitTool
  summary: Calculates Signal-to-Noise Ratio (SNR) in dB.
  example:
  - double snr = SignalProcessingCalculator.SNR(100, 10); // 20 dB
  syntax:
    content: public static double SNR(double signalPower, double noisePower)
    parameters:
    - id: signalPower
      type: System.Double
      description: Signal power in watts or any unit.
    - id: noisePower
      type: System.Double
      description: Noise power in the same unit as signal power.
    return:
      type: System.Double
      description: SNR in dB.
    content.vb: Public Shared Function SNR(signalPower As Double, noisePower As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.SNR*
  nameWithType.vb: SignalProcessingCalculator.SNR(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.SNR(Double, Double)
  name.vb: SNR(Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.SINAD(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.SINAD(System.Double,System.Double)
  id: SINAD(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: SINAD(double, double)
  nameWithType: SignalProcessingCalculator.SINAD(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.SINAD(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SINAD
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 40
  namespace: CircuitTool
  summary: Calculates Signal-to-Noise and Distortion Ratio (SINAD) in dB.
  example: []
  syntax:
    content: public static double SINAD(double signalPower, double noiseAndDistortionPower)
    parameters:
    - id: signalPower
      type: System.Double
      description: Signal power in watts or any unit.
    - id: noiseAndDistortionPower
      type: System.Double
      description: Combined noise and distortion power.
    return:
      type: System.Double
      description: SINAD in dB.
    content.vb: Public Shared Function SINAD(signalPower As Double, noiseAndDistortionPower As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.SINAD*
  nameWithType.vb: SignalProcessingCalculator.SINAD(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.SINAD(Double, Double)
  name.vb: SINAD(Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.THD(System.Double,System.Double[])
  commentId: M:CircuitTool.SignalProcessingCalculator.THD(System.Double,System.Double[])
  id: THD(System.Double,System.Double[])
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: THD(double, double[])
  nameWithType: SignalProcessingCalculator.THD(double, double[])
  fullName: CircuitTool.SignalProcessingCalculator.THD(double, double[])
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: THD
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 56
  namespace: CircuitTool
  summary: Calculates Total Harmonic Distortion (THD) as a percentage.
  example:
  - double thd = SignalProcessingCalculator.THD(100, new[] {5.0, 3.0, 2.0}); // Total Harmonic Distortion
  syntax:
    content: public static double THD(double fundamentalAmplitude, double[] harmonicAmplitudes)
    parameters:
    - id: fundamentalAmplitude
      type: System.Double
      description: Amplitude of the fundamental frequency.
    - id: harmonicAmplitudes
      type: System.Double[]
      description: Array of harmonic amplitudes.
    return:
      type: System.Double
      description: THD as a percentage.
    content.vb: Public Shared Function THD(fundamentalAmplitude As Double, harmonicAmplitudes As Double()) As Double
  overload: CircuitTool.SignalProcessingCalculator.THD*
  nameWithType.vb: SignalProcessingCalculator.THD(Double, Double())
  fullName.vb: CircuitTool.SignalProcessingCalculator.THD(Double, Double())
  name.vb: THD(Double, Double())
- uid: CircuitTool.SignalProcessingCalculator.DynamicRange(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.DynamicRange(System.Double,System.Double)
  id: DynamicRange(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: DynamicRange(double, double)
  nameWithType: SignalProcessingCalculator.DynamicRange(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.DynamicRange(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: DynamicRange
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 75
  namespace: CircuitTool
  summary: Calculates the dynamic range in dB.
  example: []
  syntax:
    content: public static double DynamicRange(double maxSignal, double noiseFloor)
    parameters:
    - id: maxSignal
      type: System.Double
      description: Maximum signal level.
    - id: noiseFloor
      type: System.Double
      description: Noise floor level.
    return:
      type: System.Double
      description: Dynamic range in dB.
    content.vb: Public Shared Function DynamicRange(maxSignal As Double, noiseFloor As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.DynamicRange*
  nameWithType.vb: SignalProcessingCalculator.DynamicRange(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.DynamicRange(Double, Double)
  name.vb: DynamicRange(Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.ENOB(System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.ENOB(System.Double)
  id: ENOB(System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: ENOB(double)
  nameWithType: SignalProcessingCalculator.ENOB(double)
  fullName: CircuitTool.SignalProcessingCalculator.ENOB(double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: ENOB
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 87
  namespace: CircuitTool
  summary: Calculates the effective number of bits (ENOB) for an ADC.
  example: []
  syntax:
    content: public static double ENOB(double sinad)
    parameters:
    - id: sinad
      type: System.Double
      description: SINAD value in dB.
    return:
      type: System.Double
      description: Effective number of bits.
    content.vb: Public Shared Function ENOB(sinad As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.ENOB*
  nameWithType.vb: SignalProcessingCalculator.ENOB(Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.ENOB(Double)
  name.vb: ENOB(Double)
- uid: CircuitTool.SignalProcessingCalculator.NoiseBandwidth(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.NoiseBandwidth(System.Double,System.Double)
  id: NoiseBandwidth(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: NoiseBandwidth(double, double)
  nameWithType: SignalProcessingCalculator.NoiseBandwidth(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.NoiseBandwidth(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: NoiseBandwidth
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 101
  namespace: CircuitTool
  summary: Calculates noise bandwidth for a given filter.
  example:
  - double bw = SignalProcessingCalculator.NoiseBandwidth(1000, 0.707); // Noise bandwidth
  syntax:
    content: public static double NoiseBandwidth(double centerFrequency, double qualityFactor)
    parameters:
    - id: centerFrequency
      type: System.Double
      description: Center frequency in Hz.
    - id: qualityFactor
      type: System.Double
      description: Quality factor (Q) of the filter.
    return:
      type: System.Double
      description: Noise bandwidth in Hz.
    content.vb: Public Shared Function NoiseBandwidth(centerFrequency As Double, qualityFactor As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.NoiseBandwidth*
  nameWithType.vb: SignalProcessingCalculator.NoiseBandwidth(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.NoiseBandwidth(Double, Double)
  name.vb: NoiseBandwidth(Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.SettlingTime(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.SettlingTime(System.Double,System.Double)
  id: SettlingTime(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: SettlingTime(double, double)
  nameWithType: SignalProcessingCalculator.SettlingTime(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.SettlingTime(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SettlingTime
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 114
  namespace: CircuitTool
  summary: Calculates the settling time for a step response.
  example: []
  syntax:
    content: public static double SettlingTime(double timeConstant, double accuracyPercent)
    parameters:
    - id: timeConstant
      type: System.Double
      description: Time constant in seconds.
    - id: accuracyPercent
      type: System.Double
      description: Desired accuracy as a percentage (e.g., 1 for 1%).
    return:
      type: System.Double
      description: Settling time in seconds.
    content.vb: Public Shared Function SettlingTime(timeConstant As Double, accuracyPercent As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.SettlingTime*
  nameWithType.vb: SignalProcessingCalculator.SettlingTime(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.SettlingTime(Double, Double)
  name.vb: SettlingTime(Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.JohnsonNoise(System.Double,System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.JohnsonNoise(System.Double,System.Double,System.Double)
  id: JohnsonNoise(System.Double,System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: JohnsonNoise(double, double, double)
  nameWithType: SignalProcessingCalculator.JohnsonNoise(double, double, double)
  fullName: CircuitTool.SignalProcessingCalculator.JohnsonNoise(double, double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: JohnsonNoise
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 128
  namespace: CircuitTool
  summary: Calculates the Johnson noise voltage for a resistor.
  example: []
  syntax:
    content: public static double JohnsonNoise(double resistance, double bandwidth, double temperature = 290)
    parameters:
    - id: resistance
      type: System.Double
      description: Resistance in ohms (Ω).
    - id: bandwidth
      type: System.Double
      description: Bandwidth in Hz.
    - id: temperature
      type: System.Double
      description: 'Temperature in Kelvin (default: 290K).'
    return:
      type: System.Double
      description: RMS noise voltage in volts (V).
    content.vb: Public Shared Function JohnsonNoise(resistance As Double, bandwidth As Double, temperature As Double = 290) As Double
  overload: CircuitTool.SignalProcessingCalculator.JohnsonNoise*
  nameWithType.vb: SignalProcessingCalculator.JohnsonNoise(Double, Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.JohnsonNoise(Double, Double, Double)
  name.vb: JohnsonNoise(Double, Double, Double)
- uid: CircuitTool.SignalProcessingCalculator.SlewRate(System.Double,System.Double)
  commentId: M:CircuitTool.SignalProcessingCalculator.SlewRate(System.Double,System.Double)
  id: SlewRate(System.Double,System.Double)
  parent: CircuitTool.SignalProcessingCalculator
  langs:
  - csharp
  - vb
  name: SlewRate(double, double)
  nameWithType: SignalProcessingCalculator.SlewRate(double, double)
  fullName: CircuitTool.SignalProcessingCalculator.SlewRate(double, double)
  type: Method
  source:
    remote:
      path: src/Calculators/SignalProcessingCalculator.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: SlewRate
    path: src/Calculators/SignalProcessingCalculator.cs
    startLine: 142
  namespace: CircuitTool
  summary: Calculates the slew rate required for a given frequency and amplitude.
  example: []
  syntax:
    content: public static double SlewRate(double frequency, double amplitude)
    parameters:
    - id: frequency
      type: System.Double
      description: Frequency in Hz.
    - id: amplitude
      type: System.Double
      description: Peak amplitude in volts.
    return:
      type: System.Double
      description: Required slew rate in V/s.
    content.vb: Public Shared Function SlewRate(frequency As Double, amplitude As Double) As Double
  overload: CircuitTool.SignalProcessingCalculator.SlewRate*
  nameWithType.vb: SignalProcessingCalculator.SlewRate(Double, Double)
  fullName.vb: CircuitTool.SignalProcessingCalculator.SlewRate(Double, Double)
  name.vb: SlewRate(Double, Double)
references:
- uid: CircuitTool
  commentId: N:CircuitTool
  href: CircuitTool.html
  name: CircuitTool
  nameWithType: CircuitTool
  fullName: CircuitTool
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CircuitTool.SignalProcessingCalculator.SNR*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.SNR
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_SNR_System_Double_System_Double_
  name: SNR
  nameWithType: SignalProcessingCalculator.SNR
  fullName: CircuitTool.SignalProcessingCalculator.SNR
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: CircuitTool.SignalProcessingCalculator.SINAD*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.SINAD
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_SINAD_System_Double_System_Double_
  name: SINAD
  nameWithType: SignalProcessingCalculator.SINAD
  fullName: CircuitTool.SignalProcessingCalculator.SINAD
- uid: CircuitTool.SignalProcessingCalculator.THD*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.THD
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_THD_System_Double_System_Double___
  name: THD
  nameWithType: SignalProcessingCalculator.THD
  fullName: CircuitTool.SignalProcessingCalculator.THD
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: CircuitTool.SignalProcessingCalculator.DynamicRange*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.DynamicRange
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_DynamicRange_System_Double_System_Double_
  name: DynamicRange
  nameWithType: SignalProcessingCalculator.DynamicRange
  fullName: CircuitTool.SignalProcessingCalculator.DynamicRange
- uid: CircuitTool.SignalProcessingCalculator.ENOB*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.ENOB
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_ENOB_System_Double_
  name: ENOB
  nameWithType: SignalProcessingCalculator.ENOB
  fullName: CircuitTool.SignalProcessingCalculator.ENOB
- uid: CircuitTool.SignalProcessingCalculator.NoiseBandwidth*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.NoiseBandwidth
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_NoiseBandwidth_System_Double_System_Double_
  name: NoiseBandwidth
  nameWithType: SignalProcessingCalculator.NoiseBandwidth
  fullName: CircuitTool.SignalProcessingCalculator.NoiseBandwidth
- uid: CircuitTool.SignalProcessingCalculator.SettlingTime*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.SettlingTime
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_SettlingTime_System_Double_System_Double_
  name: SettlingTime
  nameWithType: SignalProcessingCalculator.SettlingTime
  fullName: CircuitTool.SignalProcessingCalculator.SettlingTime
- uid: CircuitTool.SignalProcessingCalculator.JohnsonNoise*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.JohnsonNoise
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_JohnsonNoise_System_Double_System_Double_System_Double_
  name: JohnsonNoise
  nameWithType: SignalProcessingCalculator.JohnsonNoise
  fullName: CircuitTool.SignalProcessingCalculator.JohnsonNoise
- uid: CircuitTool.SignalProcessingCalculator.SlewRate*
  commentId: Overload:CircuitTool.SignalProcessingCalculator.SlewRate
  href: CircuitTool.SignalProcessingCalculator.html#CircuitTool_SignalProcessingCalculator_SlewRate_System_Double_System_Double_
  name: SlewRate
  nameWithType: SignalProcessingCalculator.SlewRate
  fullName: CircuitTool.SignalProcessingCalculator.SlewRate
