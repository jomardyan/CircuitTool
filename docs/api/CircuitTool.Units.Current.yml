### YamlMime:ManagedReference
items:
- uid: CircuitTool.Units.Current
  commentId: T:CircuitTool.Units.Current
  id: Current
  parent: CircuitTool.Units
  children:
  - CircuitTool.Units.Current.#ctor(System.Double,CircuitTool.Units.CurrentUnit)
  - CircuitTool.Units.Current.Amperes
  - CircuitTool.Units.Current.CompareTo(CircuitTool.Units.Current)
  - CircuitTool.Units.Current.Equals(CircuitTool.Units.Current)
  - CircuitTool.Units.Current.Equals(System.Object)
  - CircuitTool.Units.Current.GetHashCode
  - CircuitTool.Units.Current.GetValue(CircuitTool.Units.CurrentUnit)
  - CircuitTool.Units.Current.Microamperes
  - CircuitTool.Units.Current.Milliamperes
  - CircuitTool.Units.Current.ToString
  - CircuitTool.Units.Current.ToString(CircuitTool.Units.CurrentUnit)
  - CircuitTool.Units.Current.op_Addition(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_Division(CircuitTool.Units.Current,System.Double)
  - CircuitTool.Units.Current.op_Equality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_GreaterThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_GreaterThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_Implicit(CircuitTool.Units.Current)~System.Double
  - CircuitTool.Units.Current.op_Implicit(System.Double)~CircuitTool.Units.Current
  - CircuitTool.Units.Current.op_Inequality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_LessThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_LessThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  - CircuitTool.Units.Current.op_Multiply(CircuitTool.Units.Current,System.Double)
  - CircuitTool.Units.Current.op_Subtraction(CircuitTool.Units.Current,CircuitTool.Units.Current)
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: Current
  fullName: CircuitTool.Units.Current
  type: Struct
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Current
    path: src/Units/CurrentUnit.cs
    startLine: 25
  namespace: CircuitTool.Units
  summary: Represents a strongly-typed current measurement with automatic unit conversion
  example: []
  syntax:
    content: 'public readonly struct Current : IEquatable<Current>, IComparable<Current>'
    content.vb: Public Structure Current Implements IEquatable(Of Current), IComparable(Of Current)
  implements:
  - System.IEquatable{CircuitTool.Units.Current}
  - System.IComparable{CircuitTool.Units.Current}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: CircuitTool.Units.Current.#ctor(System.Double,CircuitTool.Units.CurrentUnit)
  commentId: M:CircuitTool.Units.Current.#ctor(System.Double,CircuitTool.Units.CurrentUnit)
  id: '#ctor(System.Double,CircuitTool.Units.CurrentUnit)'
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Current(double, CurrentUnit)
  nameWithType: Current.Current(double, CurrentUnit)
  fullName: CircuitTool.Units.Current.Current(double, CircuitTool.Units.CurrentUnit)
  type: Constructor
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: .ctor
    path: src/Units/CurrentUnit.cs
    startLine: 34
  namespace: CircuitTool.Units
  summary: Creates a new current measurement
  example: []
  syntax:
    content: public Current(double value, CurrentUnit unit)
    parameters:
    - id: value
      type: System.Double
      description: The value in the specified unit
    - id: unit
      type: CircuitTool.Units.CurrentUnit
      description: The unit of measurement
    content.vb: Public Sub New(value As Double, unit As CurrentUnit)
  overload: CircuitTool.Units.Current.#ctor*
  nameWithType.vb: Current.New(Double, CurrentUnit)
  fullName.vb: CircuitTool.Units.Current.New(Double, CircuitTool.Units.CurrentUnit)
  name.vb: New(Double, CurrentUnit)
- uid: CircuitTool.Units.Current.Amperes
  commentId: P:CircuitTool.Units.Current.Amperes
  id: Amperes
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Amperes
  nameWithType: Current.Amperes
  fullName: CircuitTool.Units.Current.Amperes
  type: Property
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Amperes
    path: src/Units/CurrentUnit.cs
    startLine: 42
  namespace: CircuitTool.Units
  summary: Gets the current value in amperes
  example: []
  syntax:
    content: public double Amperes { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Amperes As Double
  overload: CircuitTool.Units.Current.Amperes*
- uid: CircuitTool.Units.Current.Milliamperes
  commentId: P:CircuitTool.Units.Current.Milliamperes
  id: Milliamperes
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Milliamperes
  nameWithType: Current.Milliamperes
  fullName: CircuitTool.Units.Current.Milliamperes
  type: Property
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Milliamperes
    path: src/Units/CurrentUnit.cs
    startLine: 47
  namespace: CircuitTool.Units
  summary: Gets the current value in milliamperes
  example: []
  syntax:
    content: public double Milliamperes { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Milliamperes As Double
  overload: CircuitTool.Units.Current.Milliamperes*
- uid: CircuitTool.Units.Current.Microamperes
  commentId: P:CircuitTool.Units.Current.Microamperes
  id: Microamperes
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Microamperes
  nameWithType: Current.Microamperes
  fullName: CircuitTool.Units.Current.Microamperes
  type: Property
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Microamperes
    path: src/Units/CurrentUnit.cs
    startLine: 52
  namespace: CircuitTool.Units
  summary: Gets the current value in microamperes
  example: []
  syntax:
    content: public double Microamperes { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Microamperes As Double
  overload: CircuitTool.Units.Current.Microamperes*
- uid: CircuitTool.Units.Current.GetValue(CircuitTool.Units.CurrentUnit)
  commentId: M:CircuitTool.Units.Current.GetValue(CircuitTool.Units.CurrentUnit)
  id: GetValue(CircuitTool.Units.CurrentUnit)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: GetValue(CurrentUnit)
  nameWithType: Current.GetValue(CurrentUnit)
  fullName: CircuitTool.Units.Current.GetValue(CircuitTool.Units.CurrentUnit)
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: GetValue
    path: src/Units/CurrentUnit.cs
    startLine: 59
  namespace: CircuitTool.Units
  summary: Gets the current value in the specified unit
  example: []
  syntax:
    content: public double GetValue(CurrentUnit unit)
    parameters:
    - id: unit
      type: CircuitTool.Units.CurrentUnit
      description: The desired unit
    return:
      type: System.Double
      description: The current value in the specified unit
    content.vb: Public Function GetValue(unit As CurrentUnit) As Double
  overload: CircuitTool.Units.Current.GetValue*
- uid: CircuitTool.Units.Current.op_Addition(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_Addition(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_Addition(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator +(Current, Current)
  nameWithType: Current.operator +(Current, Current)
  fullName: CircuitTool.Units.Current.operator +(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Addition
    path: src/Units/CurrentUnit.cs
    startLine: 86
  namespace: CircuitTool.Units
  syntax:
    content: public static Current operator +(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: CircuitTool.Units.Current
    content.vb: Public Shared Operator +(left As Current, right As Current) As Current
  overload: CircuitTool.Units.Current.op_Addition*
  nameWithType.vb: Current.+(Current, Current)
  fullName.vb: CircuitTool.Units.Current.+(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: +(Current, Current)
- uid: CircuitTool.Units.Current.op_Subtraction(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_Subtraction(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_Subtraction(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator -(Current, Current)
  nameWithType: Current.operator -(Current, Current)
  fullName: CircuitTool.Units.Current.operator -(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Subtraction
    path: src/Units/CurrentUnit.cs
    startLine: 87
  namespace: CircuitTool.Units
  syntax:
    content: public static Current operator -(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: CircuitTool.Units.Current
    content.vb: Public Shared Operator -(left As Current, right As Current) As Current
  overload: CircuitTool.Units.Current.op_Subtraction*
  nameWithType.vb: Current.-(Current, Current)
  fullName.vb: CircuitTool.Units.Current.-(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: -(Current, Current)
- uid: CircuitTool.Units.Current.op_Multiply(CircuitTool.Units.Current,System.Double)
  commentId: M:CircuitTool.Units.Current.op_Multiply(CircuitTool.Units.Current,System.Double)
  id: op_Multiply(CircuitTool.Units.Current,System.Double)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator *(Current, double)
  nameWithType: Current.operator *(Current, double)
  fullName: CircuitTool.Units.Current.operator *(CircuitTool.Units.Current, double)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Multiply
    path: src/Units/CurrentUnit.cs
    startLine: 88
  namespace: CircuitTool.Units
  syntax:
    content: public static Current operator *(Current current, double multiplier)
    parameters:
    - id: current
      type: CircuitTool.Units.Current
    - id: multiplier
      type: System.Double
    return:
      type: CircuitTool.Units.Current
    content.vb: Public Shared Operator *(current As Current, multiplier As Double) As Current
  overload: CircuitTool.Units.Current.op_Multiply*
  nameWithType.vb: Current.*(Current, Double)
  fullName.vb: CircuitTool.Units.Current.*(CircuitTool.Units.Current, Double)
  name.vb: '*(Current, Double)'
- uid: CircuitTool.Units.Current.op_Division(CircuitTool.Units.Current,System.Double)
  commentId: M:CircuitTool.Units.Current.op_Division(CircuitTool.Units.Current,System.Double)
  id: op_Division(CircuitTool.Units.Current,System.Double)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator /(Current, double)
  nameWithType: Current.operator /(Current, double)
  fullName: CircuitTool.Units.Current.operator /(CircuitTool.Units.Current, double)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Division
    path: src/Units/CurrentUnit.cs
    startLine: 89
  namespace: CircuitTool.Units
  syntax:
    content: public static Current operator /(Current current, double divisor)
    parameters:
    - id: current
      type: CircuitTool.Units.Current
    - id: divisor
      type: System.Double
    return:
      type: CircuitTool.Units.Current
    content.vb: Public Shared Operator /(current As Current, divisor As Double) As Current
  overload: CircuitTool.Units.Current.op_Division*
  nameWithType.vb: Current./(Current, Double)
  fullName.vb: CircuitTool.Units.Current./(CircuitTool.Units.Current, Double)
  name.vb: /(Current, Double)
- uid: CircuitTool.Units.Current.op_Equality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_Equality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_Equality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator ==(Current, Current)
  nameWithType: Current.operator ==(Current, Current)
  fullName: CircuitTool.Units.Current.operator ==(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Equality
    path: src/Units/CurrentUnit.cs
    startLine: 92
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator ==(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_Equality*
  nameWithType.vb: Current.=(Current, Current)
  fullName.vb: CircuitTool.Units.Current.=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: =(Current, Current)
- uid: CircuitTool.Units.Current.op_Inequality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_Inequality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_Inequality(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator !=(Current, Current)
  nameWithType: Current.operator !=(Current, Current)
  fullName: CircuitTool.Units.Current.operator !=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Inequality
    path: src/Units/CurrentUnit.cs
    startLine: 93
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator !=(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_Inequality*
  nameWithType.vb: Current.<>(Current, Current)
  fullName.vb: CircuitTool.Units.Current.<>(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: <>(Current, Current)
- uid: CircuitTool.Units.Current.op_LessThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_LessThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_LessThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator <(Current, Current)
  nameWithType: Current.operator <(Current, Current)
  fullName: CircuitTool.Units.Current.operator <(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_LessThan
    path: src/Units/CurrentUnit.cs
    startLine: 94
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator <(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_LessThan*
  nameWithType.vb: Current.<(Current, Current)
  fullName.vb: CircuitTool.Units.Current.<(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: <(Current, Current)
- uid: CircuitTool.Units.Current.op_GreaterThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_GreaterThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_GreaterThan(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator >(Current, Current)
  nameWithType: Current.operator >(Current, Current)
  fullName: CircuitTool.Units.Current.operator >(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_GreaterThan
    path: src/Units/CurrentUnit.cs
    startLine: 95
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator >(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_GreaterThan*
  nameWithType.vb: Current.>(Current, Current)
  fullName.vb: CircuitTool.Units.Current.>(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: '>(Current, Current)'
- uid: CircuitTool.Units.Current.op_LessThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_LessThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_LessThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator <=(Current, Current)
  nameWithType: Current.operator <=(Current, Current)
  fullName: CircuitTool.Units.Current.operator <=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_LessThanOrEqual
    path: src/Units/CurrentUnit.cs
    startLine: 96
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator <=(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_LessThanOrEqual*
  nameWithType.vb: Current.<=(Current, Current)
  fullName.vb: CircuitTool.Units.Current.<=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: <=(Current, Current)
- uid: CircuitTool.Units.Current.op_GreaterThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.op_GreaterThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  id: op_GreaterThanOrEqual(CircuitTool.Units.Current,CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: operator >=(Current, Current)
  nameWithType: Current.operator >=(Current, Current)
  fullName: CircuitTool.Units.Current.operator >=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_GreaterThanOrEqual
    path: src/Units/CurrentUnit.cs
    startLine: 97
  namespace: CircuitTool.Units
  syntax:
    content: public static bool operator >=(Current left, Current right)
    parameters:
    - id: left
      type: CircuitTool.Units.Current
    - id: right
      type: CircuitTool.Units.Current
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(left As Current, right As Current) As Boolean
  overload: CircuitTool.Units.Current.op_GreaterThanOrEqual*
  nameWithType.vb: Current.>=(Current, Current)
  fullName.vb: CircuitTool.Units.Current.>=(CircuitTool.Units.Current, CircuitTool.Units.Current)
  name.vb: '>=(Current, Current)'
- uid: CircuitTool.Units.Current.op_Implicit(System.Double)~CircuitTool.Units.Current
  commentId: M:CircuitTool.Units.Current.op_Implicit(System.Double)~CircuitTool.Units.Current
  id: op_Implicit(System.Double)~CircuitTool.Units.Current
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: implicit operator Current(double)
  nameWithType: Current.implicit operator Current(double)
  fullName: CircuitTool.Units.Current.implicit operator CircuitTool.Units.Current(double)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Implicit
    path: src/Units/CurrentUnit.cs
    startLine: 100
  namespace: CircuitTool.Units
  syntax:
    content: public static implicit operator Current(double amperes)
    parameters:
    - id: amperes
      type: System.Double
    return:
      type: CircuitTool.Units.Current
    content.vb: Public Shared Widening Operator CType(amperes As Double) As Current
  overload: CircuitTool.Units.Current.op_Implicit*
  nameWithType.vb: Current.CType(Double)
  fullName.vb: CircuitTool.Units.Current.CType(Double)
  name.vb: CType(Double)
- uid: CircuitTool.Units.Current.op_Implicit(CircuitTool.Units.Current)~System.Double
  commentId: M:CircuitTool.Units.Current.op_Implicit(CircuitTool.Units.Current)~System.Double
  id: op_Implicit(CircuitTool.Units.Current)~System.Double
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: implicit operator double(Current)
  nameWithType: Current.implicit operator double(Current)
  fullName: CircuitTool.Units.Current.implicit operator double(CircuitTool.Units.Current)
  type: Operator
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: op_Implicit
    path: src/Units/CurrentUnit.cs
    startLine: 101
  namespace: CircuitTool.Units
  syntax:
    content: public static implicit operator double(Current current)
    parameters:
    - id: current
      type: CircuitTool.Units.Current
    return:
      type: System.Double
    content.vb: Public Shared Widening Operator CType(current As Current) As Double
  overload: CircuitTool.Units.Current.op_Implicit*
  nameWithType.vb: Current.CType(Current)
  fullName.vb: CircuitTool.Units.Current.CType(CircuitTool.Units.Current)
  name.vb: CType(Current)
- uid: CircuitTool.Units.Current.Equals(CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.Equals(CircuitTool.Units.Current)
  id: Equals(CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Equals(Current)
  nameWithType: Current.Equals(Current)
  fullName: CircuitTool.Units.Current.Equals(CircuitTool.Units.Current)
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Equals
    path: src/Units/CurrentUnit.cs
    startLine: 103
  namespace: CircuitTool.Units
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(Current other)
    parameters:
    - id: other
      type: CircuitTool.Units.Current
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As Current) As Boolean
  overload: CircuitTool.Units.Current.Equals*
  implements:
  - System.IEquatable{CircuitTool.Units.Current}.Equals(CircuitTool.Units.Current)
- uid: CircuitTool.Units.Current.Equals(System.Object)
  commentId: M:CircuitTool.Units.Current.Equals(System.Object)
  id: Equals(System.Object)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: Current.Equals(object?)
  fullName: CircuitTool.Units.Current.Equals(object?)
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: Equals
    path: src/Units/CurrentUnit.cs
    startLine: 104
  namespace: CircuitTool.Units
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: CircuitTool.Units.Current.Equals*
  nameWithType.vb: Current.Equals(Object)
  fullName.vb: CircuitTool.Units.Current.Equals(Object)
  name.vb: Equals(Object)
- uid: CircuitTool.Units.Current.GetHashCode
  commentId: M:CircuitTool.Units.Current.GetHashCode
  id: GetHashCode
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Current.GetHashCode()
  fullName: CircuitTool.Units.Current.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: GetHashCode
    path: src/Units/CurrentUnit.cs
    startLine: 105
  namespace: CircuitTool.Units
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: CircuitTool.Units.Current.GetHashCode*
- uid: CircuitTool.Units.Current.CompareTo(CircuitTool.Units.Current)
  commentId: M:CircuitTool.Units.Current.CompareTo(CircuitTool.Units.Current)
  id: CompareTo(CircuitTool.Units.Current)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: CompareTo(Current)
  nameWithType: Current.CompareTo(Current)
  fullName: CircuitTool.Units.Current.CompareTo(CircuitTool.Units.Current)
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: CompareTo
    path: src/Units/CurrentUnit.cs
    startLine: 106
  namespace: CircuitTool.Units
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  example: []
  syntax:
    content: public int CompareTo(Current other)
    parameters:
    - id: other
      type: CircuitTool.Units.Current
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: >-
        A value that indicates the relative order of the objects being compared. The return value has these meanings:  

         <table><thead><tr><th class="term"> Value</th><th class="description"> Meaning</th></tr></thead><tbody><tr><td class="term"> Less than zero</td><td class="description"> This instance precedes <code class="paramref">other</code> in the sort order.</td></tr><tr><td class="term"> Zero</td><td class="description"> This instance occurs in the same position in the sort order as <code class="paramref">other</code>.</td></tr><tr><td class="term"> Greater than zero</td><td class="description"> This instance follows <code class="paramref">other</code> in the sort order.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(other As Current) As Integer
  overload: CircuitTool.Units.Current.CompareTo*
  implements:
  - System.IComparable{CircuitTool.Units.Current}.CompareTo(CircuitTool.Units.Current)
- uid: CircuitTool.Units.Current.ToString
  commentId: M:CircuitTool.Units.Current.ToString
  id: ToString
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Current.ToString()
  fullName: CircuitTool.Units.Current.ToString()
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: ToString
    path: src/Units/CurrentUnit.cs
    startLine: 108
  namespace: CircuitTool.Units
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The fully qualified type name.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: CircuitTool.Units.Current.ToString*
- uid: CircuitTool.Units.Current.ToString(CircuitTool.Units.CurrentUnit)
  commentId: M:CircuitTool.Units.Current.ToString(CircuitTool.Units.CurrentUnit)
  id: ToString(CircuitTool.Units.CurrentUnit)
  parent: CircuitTool.Units.Current
  langs:
  - csharp
  - vb
  name: ToString(CurrentUnit)
  nameWithType: Current.ToString(CurrentUnit)
  fullName: CircuitTool.Units.Current.ToString(CircuitTool.Units.CurrentUnit)
  type: Method
  source:
    remote:
      path: src/Units/CurrentUnit.cs
      branch: main
      repo: https://github.com/jomardyan/CircuitTool
    id: ToString
    path: src/Units/CurrentUnit.cs
    startLine: 109
  namespace: CircuitTool.Units
  syntax:
    content: public string ToString(CurrentUnit unit)
    parameters:
    - id: unit
      type: CircuitTool.Units.CurrentUnit
    return:
      type: System.String
    content.vb: Public Function ToString(unit As CurrentUnit) As String
  overload: CircuitTool.Units.Current.ToString*
references:
- uid: CircuitTool.Units
  commentId: N:CircuitTool.Units
  href: CircuitTool.html
  name: CircuitTool.Units
  nameWithType: CircuitTool.Units
  fullName: CircuitTool.Units
  spec.csharp:
  - uid: CircuitTool
    name: CircuitTool
    href: CircuitTool.html
  - name: .
  - uid: CircuitTool.Units
    name: Units
    href: CircuitTool.Units.html
  spec.vb:
  - uid: CircuitTool
    name: CircuitTool
    href: CircuitTool.html
  - name: .
  - uid: CircuitTool.Units
    name: Units
    href: CircuitTool.Units.html
- uid: System.IEquatable{CircuitTool.Units.Current}
  commentId: T:System.IEquatable{CircuitTool.Units.Current}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Current>
  nameWithType: IEquatable<Current>
  fullName: System.IEquatable<CircuitTool.Units.Current>
  nameWithType.vb: IEquatable(Of Current)
  fullName.vb: System.IEquatable(Of CircuitTool.Units.Current)
  name.vb: IEquatable(Of Current)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
- uid: System.IComparable{CircuitTool.Units.Current}
  commentId: T:System.IComparable{CircuitTool.Units.Current}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<Current>
  nameWithType: IComparable<Current>
  fullName: System.IComparable<CircuitTool.Units.Current>
  nameWithType.vb: IComparable(Of Current)
  fullName.vb: System.IComparable(Of CircuitTool.Units.Current)
  name.vb: IComparable(Of Current)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: CircuitTool.Units.Current.#ctor*
  commentId: Overload:CircuitTool.Units.Current.#ctor
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current__ctor_System_Double_CircuitTool_Units_CurrentUnit_
  name: Current
  nameWithType: Current.Current
  fullName: CircuitTool.Units.Current.Current
  nameWithType.vb: Current.New
  fullName.vb: CircuitTool.Units.Current.New
  name.vb: New
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: CircuitTool.Units.CurrentUnit
  commentId: T:CircuitTool.Units.CurrentUnit
  parent: CircuitTool.Units
  href: CircuitTool.Units.CurrentUnit.html
  name: CurrentUnit
  nameWithType: CurrentUnit
  fullName: CircuitTool.Units.CurrentUnit
- uid: CircuitTool.Units.Current.Amperes*
  commentId: Overload:CircuitTool.Units.Current.Amperes
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_Amperes
  name: Amperes
  nameWithType: Current.Amperes
  fullName: CircuitTool.Units.Current.Amperes
- uid: CircuitTool.Units.Current.Milliamperes*
  commentId: Overload:CircuitTool.Units.Current.Milliamperes
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_Milliamperes
  name: Milliamperes
  nameWithType: Current.Milliamperes
  fullName: CircuitTool.Units.Current.Milliamperes
- uid: CircuitTool.Units.Current.Microamperes*
  commentId: Overload:CircuitTool.Units.Current.Microamperes
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_Microamperes
  name: Microamperes
  nameWithType: Current.Microamperes
  fullName: CircuitTool.Units.Current.Microamperes
- uid: CircuitTool.Units.Current.GetValue*
  commentId: Overload:CircuitTool.Units.Current.GetValue
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_GetValue_CircuitTool_Units_CurrentUnit_
  name: GetValue
  nameWithType: Current.GetValue
  fullName: CircuitTool.Units.Current.GetValue
- uid: CircuitTool.Units.Current.op_Addition*
  commentId: Overload:CircuitTool.Units.Current.op_Addition
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Addition_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator +
  nameWithType: Current.operator +
  fullName: CircuitTool.Units.Current.operator +
  nameWithType.vb: Current.+
  fullName.vb: CircuitTool.Units.Current.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Addition*
    name: +
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Addition_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current
  commentId: T:CircuitTool.Units.Current
  parent: CircuitTool.Units
  href: CircuitTool.Units.Current.html
  name: Current
  nameWithType: Current
  fullName: CircuitTool.Units.Current
- uid: CircuitTool.Units.Current.op_Subtraction*
  commentId: Overload:CircuitTool.Units.Current.op_Subtraction
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Subtraction_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator -
  nameWithType: Current.operator -
  fullName: CircuitTool.Units.Current.operator -
  nameWithType.vb: Current.-
  fullName.vb: CircuitTool.Units.Current.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Subtraction*
    name: '-'
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Subtraction_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_Multiply*
  commentId: Overload:CircuitTool.Units.Current.op_Multiply
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Multiply_CircuitTool_Units_Current_System_Double_
  name: operator *
  nameWithType: Current.operator *
  fullName: CircuitTool.Units.Current.operator *
  nameWithType.vb: Current.*
  fullName.vb: CircuitTool.Units.Current.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Multiply*
    name: '*'
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Multiply_CircuitTool_Units_Current_System_Double_
- uid: CircuitTool.Units.Current.op_Division*
  commentId: Overload:CircuitTool.Units.Current.op_Division
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Division_CircuitTool_Units_Current_System_Double_
  name: operator /
  nameWithType: Current.operator /
  fullName: CircuitTool.Units.Current.operator /
  nameWithType.vb: Current./
  fullName.vb: CircuitTool.Units.Current./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Division*
    name: /
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Division_CircuitTool_Units_Current_System_Double_
- uid: CircuitTool.Units.Current.op_Equality*
  commentId: Overload:CircuitTool.Units.Current.op_Equality
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Equality_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator ==
  nameWithType: Current.operator ==
  fullName: CircuitTool.Units.Current.operator ==
  nameWithType.vb: Current.=
  fullName.vb: CircuitTool.Units.Current.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Equality*
    name: ==
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Equality_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: CircuitTool.Units.Current.op_Inequality*
  commentId: Overload:CircuitTool.Units.Current.op_Inequality
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Inequality_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator !=
  nameWithType: Current.operator !=
  fullName: CircuitTool.Units.Current.operator !=
  nameWithType.vb: Current.<>
  fullName.vb: CircuitTool.Units.Current.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_Inequality*
    name: '!='
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_Inequality_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_LessThan*
  commentId: Overload:CircuitTool.Units.Current.op_LessThan
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_LessThan_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator <
  nameWithType: Current.operator <
  fullName: CircuitTool.Units.Current.operator <
  nameWithType.vb: Current.<
  fullName.vb: CircuitTool.Units.Current.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_LessThan*
    name: <
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_LessThan_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_GreaterThan*
  commentId: Overload:CircuitTool.Units.Current.op_GreaterThan
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_GreaterThan_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator >
  nameWithType: Current.operator >
  fullName: CircuitTool.Units.Current.operator >
  nameWithType.vb: Current.>
  fullName.vb: CircuitTool.Units.Current.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_GreaterThan*
    name: '>'
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_GreaterThan_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_LessThanOrEqual*
  commentId: Overload:CircuitTool.Units.Current.op_LessThanOrEqual
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_LessThanOrEqual_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator <=
  nameWithType: Current.operator <=
  fullName: CircuitTool.Units.Current.operator <=
  nameWithType.vb: Current.<=
  fullName.vb: CircuitTool.Units.Current.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_LessThanOrEqual*
    name: <=
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_LessThanOrEqual_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_GreaterThanOrEqual*
  commentId: Overload:CircuitTool.Units.Current.op_GreaterThanOrEqual
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_GreaterThanOrEqual_CircuitTool_Units_Current_CircuitTool_Units_Current_
  name: operator >=
  nameWithType: Current.operator >=
  fullName: CircuitTool.Units.Current.operator >=
  nameWithType.vb: Current.>=
  fullName.vb: CircuitTool.Units.Current.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: CircuitTool.Units.Current.op_GreaterThanOrEqual*
    name: '>='
    href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_op_GreaterThanOrEqual_CircuitTool_Units_Current_CircuitTool_Units_Current_
- uid: CircuitTool.Units.Current.op_Implicit*
  commentId: Overload:CircuitTool.Units.Current.op_Implicit
  name: implicit operator
  nameWithType: Current.implicit operator
  fullName: CircuitTool.Units.Current.implicit operator
  nameWithType.vb: Current.CType
  fullName.vb: CircuitTool.Units.Current.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: CircuitTool.Units.Current.Equals*
  commentId: Overload:CircuitTool.Units.Current.Equals
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_Equals_CircuitTool_Units_Current_
  name: Equals
  nameWithType: Current.Equals
  fullName: CircuitTool.Units.Current.Equals
- uid: System.IEquatable{CircuitTool.Units.Current}.Equals(CircuitTool.Units.Current)
  commentId: M:System.IEquatable{CircuitTool.Units.Current}.Equals(CircuitTool.Units.Current)
  parent: System.IEquatable{CircuitTool.Units.Current}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Current)
  nameWithType: IEquatable<Current>.Equals(Current)
  fullName: System.IEquatable<CircuitTool.Units.Current>.Equals(CircuitTool.Units.Current)
  nameWithType.vb: IEquatable(Of Current).Equals(Current)
  fullName.vb: System.IEquatable(Of CircuitTool.Units.Current).Equals(CircuitTool.Units.Current)
  spec.csharp:
  - uid: System.IEquatable{CircuitTool.Units.Current}.Equals(CircuitTool.Units.Current)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{CircuitTool.Units.Current}.Equals(CircuitTool.Units.Current)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: CircuitTool.Units.Current.GetHashCode*
  commentId: Overload:CircuitTool.Units.Current.GetHashCode
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_GetHashCode
  name: GetHashCode
  nameWithType: Current.GetHashCode
  fullName: CircuitTool.Units.Current.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CircuitTool.Units.Current.CompareTo*
  commentId: Overload:CircuitTool.Units.Current.CompareTo
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_CompareTo_CircuitTool_Units_Current_
  name: CompareTo
  nameWithType: Current.CompareTo
  fullName: CircuitTool.Units.Current.CompareTo
- uid: System.IComparable{CircuitTool.Units.Current}.CompareTo(CircuitTool.Units.Current)
  commentId: M:System.IComparable{CircuitTool.Units.Current}.CompareTo(CircuitTool.Units.Current)
  parent: System.IComparable{CircuitTool.Units.Current}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(Current)
  nameWithType: IComparable<Current>.CompareTo(Current)
  fullName: System.IComparable<CircuitTool.Units.Current>.CompareTo(CircuitTool.Units.Current)
  nameWithType.vb: IComparable(Of Current).CompareTo(Current)
  fullName.vb: System.IComparable(Of CircuitTool.Units.Current).CompareTo(CircuitTool.Units.Current)
  spec.csharp:
  - uid: System.IComparable{CircuitTool.Units.Current}.CompareTo(CircuitTool.Units.Current)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
  spec.vb:
  - uid: System.IComparable{CircuitTool.Units.Current}.CompareTo(CircuitTool.Units.Current)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: CircuitTool.Units.Current
    name: Current
    href: CircuitTool.Units.Current.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: CircuitTool.Units.Current.ToString*
  commentId: Overload:CircuitTool.Units.Current.ToString
  href: CircuitTool.Units.Current.html#CircuitTool_Units_Current_ToString
  name: ToString
  nameWithType: Current.ToString
  fullName: CircuitTool.Units.Current.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
