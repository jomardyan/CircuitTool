<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CircuitTool</name>
    </assembly>
    <members>
        <member name="T:CircuitTool.ACVoltage">
            <summary>
            Represents an AC voltage with magnitude and phase
            </summary>
        </member>
        <member name="M:CircuitTool.ACVoltage.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new AC voltage from magnitude and phase
            </summary>
            <param name="magnitude">RMS magnitude in volts</param>
            <param name="phase">Phase angle in radians</param>
        </member>
        <member name="M:CircuitTool.ACVoltage.#ctor(System.Numerics.Complex)">
            <summary>
            Creates a new AC voltage from a complex number
            </summary>
            <param name="complex">Complex representation</param>
        </member>
        <member name="P:CircuitTool.ACVoltage.Magnitude">
            <summary>
            Gets the RMS magnitude in volts
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.Phase">
            <summary>
            Gets the phase angle in radians
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.PhaseDegrees">
            <summary>
            Gets the phase angle in degrees
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.Real">
            <summary>
            Gets the real component
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.Imaginary">
            <summary>
            Gets the imaginary component
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.Complex">
            <summary>
            Gets the complex number representation
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.Peak">
            <summary>
            Gets the peak voltage (magnitude * √2)
            </summary>
        </member>
        <member name="P:CircuitTool.ACVoltage.PeakToPeak">
            <summary>
            Gets the peak-to-peak voltage (peak * 2)
            </summary>
        </member>
        <member name="T:CircuitTool.ACCurrent">
            <summary>
            Represents an AC current with magnitude and phase
            </summary>
        </member>
        <member name="M:CircuitTool.ACCurrent.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new AC current from magnitude and phase
            </summary>
            <param name="magnitude">RMS magnitude in amperes</param>
            <param name="phase">Phase angle in radians</param>
        </member>
        <member name="M:CircuitTool.ACCurrent.#ctor(System.Numerics.Complex)">
            <summary>
            Creates a new AC current from a complex number
            </summary>
            <param name="complex">Complex representation</param>
        </member>
        <member name="P:CircuitTool.ACCurrent.Magnitude">
            <summary>
            Gets the RMS magnitude in amperes
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.Phase">
            <summary>
            Gets the phase angle in radians
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.PhaseDegrees">
            <summary>
            Gets the phase angle in degrees
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.Real">
            <summary>
            Gets the real component
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.Imaginary">
            <summary>
            Gets the imaginary component
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.Complex">
            <summary>
            Gets the complex number representation
            </summary>
        </member>
        <member name="P:CircuitTool.ACCurrent.Peak">
            <summary>
            Gets the peak current (magnitude * √2)
            </summary>
        </member>
        <member name="T:CircuitTool.Impedance">
            <summary>
            Represents complex impedance for AC circuit analysis
            </summary>
        </member>
        <member name="M:CircuitTool.Impedance.FromPolar(System.Double,System.Double)">
            <summary>
            Creates a new impedance from magnitude and phase
            </summary>
            <param name="magnitude">Magnitude in ohms</param>
            <param name="phase">Phase angle in radians</param>
        </member>
        <member name="M:CircuitTool.Impedance.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new impedance from resistance and reactance
            </summary>
            <param name="resistance">Resistance in ohms</param>
            <param name="reactance">Reactance in ohms</param>
        </member>
        <member name="M:CircuitTool.Impedance.#ctor(System.Numerics.Complex)">
            <summary>
            Creates a new impedance from a complex number
            </summary>
            <param name="complex">Complex representation</param>
        </member>
        <member name="P:CircuitTool.Impedance.Magnitude">
            <summary>
            Gets the magnitude in ohms
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.Phase">
            <summary>
            Gets the phase angle in radians
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.PhaseDegrees">
            <summary>
            Gets the phase angle in degrees
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.Resistance">
            <summary>
            Gets the resistance component in ohms
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.Reactance">
            <summary>
            Gets the reactance component in ohms
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.Complex">
            <summary>
            Gets the complex number representation
            </summary>
        </member>
        <member name="P:CircuitTool.Impedance.Admittance">
            <summary>
            Gets the admittance (1/Z)
            </summary>
        </member>
        <member name="M:CircuitTool.Impedance.Resistor(System.Double)">
            <summary>
            Creates impedance for a resistor
            </summary>
            <param name="resistance">Resistance in ohms</param>
        </member>
        <member name="M:CircuitTool.Impedance.Capacitor(System.Double,System.Double)">
            <summary>
            Creates impedance for a capacitor at given frequency
            </summary>
            <param name="capacitance">Capacitance in farads</param>
            <param name="frequency">Frequency in hertz</param>
        </member>
        <member name="M:CircuitTool.Impedance.Inductor(System.Double,System.Double)">
            <summary>
            Creates impedance for an inductor at given frequency
            </summary>
            <param name="inductance">Inductance in henries</param>
            <param name="frequency">Frequency in hertz</param>
        </member>
        <member name="M:CircuitTool.Impedance.Parallel(CircuitTool.Impedance,CircuitTool.Impedance)">
            <summary>
            Parallel combination of impedances
            </summary>
        </member>
        <member name="M:CircuitTool.Impedance.Series(CircuitTool.Impedance,CircuitTool.Impedance)">
            <summary>
            Series combination of impedances
            </summary>
        </member>
        <member name="T:CircuitTool.Admittance">
            <summary>
            Represents complex admittance for AC circuit analysis
            </summary>
        </member>
        <member name="M:CircuitTool.Admittance.#ctor(System.Numerics.Complex)">
            <summary>
            Creates a new admittance from a complex number
            </summary>
            <param name="complex">Complex representation</param>
        </member>
        <member name="P:CircuitTool.Admittance.Magnitude">
            <summary>
            Gets the magnitude in siemens
            </summary>
        </member>
        <member name="P:CircuitTool.Admittance.Conductance">
            <summary>
            Gets the conductance component in siemens
            </summary>
        </member>
        <member name="P:CircuitTool.Admittance.Susceptance">
            <summary>
            Gets the susceptance component in siemens
            </summary>
        </member>
        <member name="P:CircuitTool.Admittance.Complex">
            <summary>
            Gets the complex number representation
            </summary>
        </member>
        <member name="P:CircuitTool.Admittance.Impedance">
            <summary>
            Gets the impedance (1/Y)
            </summary>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.AdvancedPowerAnalysis">
            <summary>
            Advanced power analysis including three-phase systems and power quality
            </summary>
        </member>
        <member name="M:CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.CalculateThreePhasePower(CircuitTool.ACVoltage,CircuitTool.ACVoltage,CircuitTool.ACVoltage,CircuitTool.ACCurrent,CircuitTool.ACCurrent,CircuitTool.ACCurrent)">
            <summary>
            Calculates three-phase power values
            </summary>
            <param name="voltageA">Phase A voltage</param>
            <param name="voltageB">Phase B voltage</param>
            <param name="voltageC">Phase C voltage</param>
            <param name="currentA">Phase A current</param>
            <param name="currentB">Phase B current</param>
            <param name="currentC">Phase C current</param>
            <returns>Three-phase power analysis results</returns>
        </member>
        <member name="M:CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.CalculateBalancedThreePhasePower(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates balanced three-phase power from line values
            </summary>
            <param name="lineToLineVoltage">Line-to-line voltage (RMS)</param>
            <param name="lineCurrent">Line current (RMS)</param>
            <param name="powerFactor">Power factor</param>
            <param name="isLeading">True if leading power factor</param>
            <returns>Balanced three-phase power results</returns>
        </member>
        <member name="M:CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.AnalyzeHarmonicPower(CircuitTool.ACVoltage,CircuitTool.ACCurrent,CircuitTool.ACVoltage[],CircuitTool.ACCurrent[])">
            <summary>
            Analyzes harmonic content and calculates power quality metrics
            </summary>
            <param name="fundamentalVoltage">Fundamental voltage component</param>
            <param name="fundamentalCurrent">Fundamental current component</param>
            <param name="voltageHarmonics">Voltage harmonic components</param>
            <param name="currentHarmonics">Current harmonic components</param>
            <returns>Harmonic power analysis results</returns>
        </member>
        <member name="M:CircuitTool.PowerAnalysis.AdvancedPowerAnalysis.AnalyzePowerQuality(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Calculates power quality indices
            </summary>
            <param name="voltageWaveform">Voltage waveform samples</param>
            <param name="currentWaveform">Current waveform samples</param>
            <param name="nominalVoltage">Nominal voltage RMS value</param>
            <param name="nominalFrequency">Nominal frequency in Hz</param>
            <returns>Power quality analysis results</returns>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.ThreePhasePower">
            <summary>
            Three-phase power analysis results
            </summary>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.BalancedThreePhasePower">
            <summary>
            Balanced three-phase power results
            </summary>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.SequenceComponents">
            <summary>
            Sequence components for three-phase analysis
            </summary>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.HarmonicPowerAnalysis">
            <summary>
            Harmonic power analysis results
            </summary>
        </member>
        <member name="T:CircuitTool.PowerAnalysis.PowerQualityAnalysis">
            <summary>
            Power quality analysis results
            </summary>
        </member>
        <member name="T:CircuitTool.EMCCalculator">
            <summary>
            Provides electromagnetic compatibility (EMC) calculations
            </summary>
        </member>
        <member name="M:CircuitTool.EMCCalculator.ElectricFieldStrength(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the electric field strength at a given distance from a radiating source
            </summary>
            <param name="power">Radiated power in watts</param>
            <param name="distance">Distance from source in meters</param>
            <param name="antennaGain">Antenna gain in linear scale (default 1 for isotropic)</param>
            <returns>Electric field strength in V/m</returns>
        </member>
        <member name="M:CircuitTool.EMCCalculator.ShieldingEffectiveness(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates shielding effectiveness of a conductive enclosure
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <param name="thickness">Shield thickness in meters</param>
            <param name="conductivity">Material conductivity in S/m</param>
            <param name="permeability">Relative permeability (default 1 for non-magnetic materials)</param>
            <returns>Shielding effectiveness in dB</returns>
        </member>
        <member name="M:CircuitTool.EMCCalculator.FCCClassBLimit(System.Double,System.Double)">
            <summary>
            Calculates the maximum allowed radiated emission for FCC Class B devices
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <param name="measurementDistance">Measurement distance in meters (typically 3m or 10m)</param>
            <returns>Maximum allowed field strength in dB(μV/m)</returns>
        </member>
        <member name="M:CircuitTool.EMCCalculator.LoopInductance(System.Double,System.Double)">
            <summary>
            Calculates the loop inductance for EMI analysis
            </summary>
            <param name="loopArea">Loop area in m²</param>
            <param name="wireRadius">Wire radius in meters</param>
            <returns>Loop inductance in henries</returns>
        </member>
        <member name="M:CircuitTool.EMCCalculator.CommonModeChokeImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates common-mode choke impedance
            </summary>
            <param name="inductance">Choke inductance in henries</param>
            <param name="frequency">Frequency in Hz</param>
            <param name="resistanceDC">DC resistance in ohms</param>
            <returns>Complex impedance magnitude in ohms</returns>
        </member>
        <member name="T:CircuitTool.SignalIntegrityCalculator">
            <summary>
            Provides calculations for signal integrity analysis
            </summary>
        </member>
        <member name="M:CircuitTool.SignalIntegrityCalculator.MicrostripImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the characteristic impedance of a microstrip transmission line
            </summary>
            <param name="traceWidth">Trace width in meters</param>
            <param name="dielectricThickness">Dielectric thickness in meters</param>
            <param name="dielectricConstant">Relative dielectric constant</param>
            <returns>Characteristic impedance in ohms</returns>
        </member>
        <member name="M:CircuitTool.SignalIntegrityCalculator.PropagationDelay(System.Double,System.Double)">
            <summary>
            Calculates the propagation delay of a transmission line
            </summary>
            <param name="length">Line length in meters</param>
            <param name="effectiveDielectric">Effective dielectric constant</param>
            <returns>Propagation delay in seconds</returns>
        </member>
        <member name="M:CircuitTool.SignalIntegrityCalculator.CrosstalkCoupling(System.Double,System.Double,System.Double)">
            <summary>
            Calculates crosstalk coupling coefficient between parallel traces
            </summary>
            <param name="traceSpacing">Spacing between traces in meters</param>
            <param name="traceWidth">Trace width in meters</param>
            <param name="dielectricHeight">Height above ground plane in meters</param>
            <returns>Coupling coefficient (0-1)</returns>
        </member>
        <member name="M:CircuitTool.SignalIntegrityCalculator.RiseTimeDegradation(System.Double,System.Double)">
            <summary>
            Calculates the rise time degradation due to transmission line effects
            </summary>
            <param name="originalRiseTime">Original rise time in seconds</param>
            <param name="propagationDelay">Propagation delay in seconds</param>
            <returns>Degraded rise time in seconds</returns>
        </member>
        <member name="T:CircuitTool.ThermalCalculator">
            <summary>
            Provides thermal analysis calculations for electronic components
            </summary>
        </member>
        <member name="M:CircuitTool.ThermalCalculator.JunctionTemperature(System.Double,System.Double,System.Double)">
            <summary>
            Calculates junction temperature of a component
            </summary>
            <param name="powerDissipation">Power dissipation in watts</param>
            <param name="thermalResistanceJunctionToAmbient">Thermal resistance from junction to ambient in °C/W</param>
            <param name="ambientTemperature">Ambient temperature in °C</param>
            <returns>Junction temperature in °C</returns>
        </member>
        <member name="M:CircuitTool.ThermalCalculator.RequiredHeatSinkThermalResistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the required heat sink thermal resistance
            </summary>
            <param name="maxJunctionTemp">Maximum allowable junction temperature in °C</param>
            <param name="ambientTemp">Ambient temperature in °C</param>
            <param name="powerDissipation">Power dissipation in watts</param>
            <param name="thermalResistanceJunctionToCase">Junction-to-case thermal resistance in °C/W</param>
            <returns>Required heat sink thermal resistance in °C/W</returns>
        </member>
        <member name="M:CircuitTool.ThermalCalculator.ThermalTimeConstant(System.Double,System.Double)">
            <summary>
            Calculates thermal time constant for transient analysis
            </summary>
            <param name="thermalCapacitance">Thermal capacitance in J/°C</param>
            <param name="thermalResistance">Thermal resistance in °C/W</param>
            <returns>Thermal time constant in seconds</returns>
        </member>
        <member name="M:CircuitTool.ThermalCalculator.ConvectiveHeatTransfer(System.Double,System.Double,System.Double)">
            <summary>
            Calculates convective heat transfer coefficient
            </summary>
            <param name="airVelocity">Air velocity in m/s</param>
            <param name="characteristicLength">Characteristic length in meters</param>
            <param name="temperatureDifference">Temperature difference in °C</param>
            <returns>Heat transfer coefficient in W/(m²·°C)</returns>
        </member>
        <member name="T:CircuitTool.Analysis.ToleranceAnalysis">
            <summary>
            Provides tolerance and error analysis for electrical circuits
            </summary>
        </member>
        <member name="M:CircuitTool.Analysis.ToleranceAnalysis.WorstCaseAnalysis(System.Double[],System.Double[],System.Func{System.Double[],System.Double})">
            <summary>
            Performs worst-case analysis for circuit parameters
            </summary>
            <param name="nominalValues">Nominal component values</param>
            <param name="tolerances">Component tolerances (as fractions)</param>
            <param name="calculator">Function to calculate circuit response</param>
            <returns>Worst-case analysis results</returns>
        </member>
        <member name="M:CircuitTool.Analysis.ToleranceAnalysis.SensitivityAnalysis(System.Double[],System.Func{System.Double[],System.Double},System.Double)">
            <summary>
            Calculates sensitivity of output to each component
            </summary>
            <param name="nominalValues">Nominal component values</param>
            <param name="calculator">Function to calculate circuit response</param>
            <param name="deltaPercent">Percentage change for sensitivity calculation</param>
            <returns>Sensitivity analysis results</returns>
        </member>
        <member name="M:CircuitTool.Analysis.ToleranceAnalysis.StatisticalAnalysis(System.Double[],System.Double[],System.Func{System.Double[],System.Double})">
            <summary>
            Calculates statistical analysis using component tolerances
            </summary>
            <param name="nominalValues">Nominal component values</param>
            <param name="tolerances">Component tolerances (as fractions)</param>
            <param name="calculator">Function to calculate circuit response</param>
            <returns>Statistical analysis results</returns>
        </member>
        <member name="M:CircuitTool.Analysis.ToleranceAnalysis.DesignCentering(System.Double[],System.Double[],System.Func{System.Double[],System.Double},System.Double,System.Int32)">
            <summary>
            Performs design centering to minimize sensitivity
            </summary>
            <param name="initialValues">Initial component values</param>
            <param name="tolerances">Component tolerances</param>
            <param name="calculator">Function to calculate circuit response</param>
            <param name="targetValue">Target output value</param>
            <param name="maxIterations">Maximum optimization iterations</param>
            <returns>Design centering results</returns>
        </member>
        <member name="T:CircuitTool.Analysis.WorstCaseResult">
            <summary>
            Results from worst-case analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.SensitivityResult">
            <summary>
            Results from sensitivity analysis
            </summary>
        </member>
        <member name="P:CircuitTool.Analysis.SensitivityResult.MostSensitiveComponent">
            <summary>
            Gets the index of the component with highest sensitivity
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.StatisticalResult">
            <summary>
            Results from statistical analysis
            </summary>
        </member>
        <member name="P:CircuitTool.Analysis.StatisticalResult.ThreeSigmaBounds">
            <summary>
            Gets the 3-sigma bounds (99.7% confidence)
            </summary>
        </member>
        <member name="P:CircuitTool.Analysis.StatisticalResult.SixSigmaBounds">
            <summary>
            Gets the 6-sigma bounds (99.9999% confidence)
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.DesignCenteringResult">
            <summary>
            Results from design centering optimization
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.StandardTolerances">
            <summary>
            Component tolerance standards for common component types
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.StandardTolerances.Resistor">
            <summary>
            Standard resistor tolerances
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.StandardTolerances.Capacitor">
            <summary>
            Standard capacitor tolerances
            </summary>
        </member>
        <member name="T:CircuitTool.Analysis.StandardTolerances.Inductor">
            <summary>
            Standard inductor tolerances
            </summary>
        </member>
        <member name="T:CircuitTool.ACCircuitCalculator">
            <summary>
            Provides calculations for AC circuit analysis and characteristics.
            </summary>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.ImpedanceMagnitude(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the impedance magnitude of an RLC circuit using Z = √(R² + (XL - XC)²).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductiveReactance">Inductive reactance in ohms (Ω).</param>
            <param name="capacitiveReactance">Capacitive reactance in ohms (Ω).</param>
            <returns>Impedance magnitude in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.PhaseAngle(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the phase angle of an RLC circuit using φ = arctan((XL - XC) / R).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductiveReactance">Inductive reactance in ohms (Ω).</param>
            <param name="capacitiveReactance">Capacitive reactance in ohms (Ω).</param>
            <returns>Phase angle in degrees.</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.PowerFactor(System.Double,System.Double)">
            <summary>
            Calculates the power factor using cos(φ) = R / Z.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="impedanceMagnitude">Impedance magnitude in ohms (Ω).</param>
            <returns>Power factor (unitless, between 0 and 1).</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.PeakToRMS(System.Double)">
            <summary>
            Calculates the RMS value from peak value (RMS = Peak / √2).
            </summary>
            <param name="peakValue">Peak value.</param>
            <returns>RMS value.</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.RMSToPeak(System.Double)">
            <summary>
            Calculates the peak value from RMS value (Peak = RMS × √2).
            </summary>
            <param name="rmsValue">RMS value.</param>
            <returns>Peak value.</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.PeakToAverage(System.Double)">
            <summary>
            Calculates the average value of a sinusoidal waveform (Average = 2 × Peak / π).
            </summary>
            <param name="peakValue">Peak value.</param>
            <returns>Average value.</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.PeakToPeakToPeak(System.Double)">
            <summary>
            Calculates the peak-to-peak value from peak value (Peak-to-Peak = 2 × Peak).
            </summary>
            <param name="peakValue">Peak value.</param>
            <returns>Peak-to-peak value.</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.FormFactor(System.Double,System.Double)">
            <summary>
            Calculates the form factor of a waveform (Form Factor = RMS / Average).
            </summary>
            <param name="rmsValue">RMS value.</param>
            <param name="averageValue">Average value.</param>
            <returns>Form factor (unitless).</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.CrestFactor(System.Double,System.Double)">
            <summary>
            Calculates the crest factor of a waveform (Crest Factor = Peak / RMS).
            </summary>
            <param name="peakValue">Peak value.</param>
            <param name="rmsValue">RMS value.</param>
            <returns>Crest factor (unitless).</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.QualityFactor(System.Double,System.Double)">
            <summary>
            Calculates the quality factor (Q) of a resonant circuit using Q = XL / R.
            </summary>
            <param name="inductiveReactance">Inductive reactance in ohms (Ω).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <returns>Quality factor (unitless).</returns>
        </member>
        <member name="M:CircuitTool.ACCircuitCalculator.Bandwidth(System.Double,System.Double)">
            <summary>
            Calculates the bandwidth of a resonant circuit using BW = f0 / Q.
            </summary>
            <param name="resonantFrequency">Resonant frequency in hertz (Hz).</param>
            <param name="qualityFactor">Quality factor (unitless).</param>
            <returns>Bandwidth in hertz (Hz).</returns>
        </member>
        <member name="T:CircuitTool.AntennaCalculator">
            <summary>
            Provides calculations for antenna design and analysis
            </summary>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.QuarterWaveLength(System.Double,System.Nullable{System.Double})">
            <summary>
            Calculates the physical length of a quarter-wave antenna
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <param name="velocityFactor">Velocity factor (default varies by frequency: 1.0 for >1GHz, 0.95 for lower frequencies)</param>
            <returns>Physical length in meters</returns>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.HalfWaveLength(System.Double,System.Nullable{System.Double})">
            <summary>
            Calculates the physical length of a half-wave antenna
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <param name="velocityFactor">Velocity factor (default varies by frequency: 1.0 for >1GHz, 0.95 for lower frequencies)</param>
            <returns>Physical length in meters</returns>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.DipoleImpedance(System.Double,System.Double)">
            <summary>
            Calculates the characteristic impedance of a dipole antenna
            </summary>
            <param name="wireRadius">Wire radius in meters</param>
            <param name="frequency">Frequency in Hz</param>
            <returns>Characteristic impedance in ohms</returns>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.AntennaGain(System.Double,System.Double)">
            <summary>
            Calculates antenna gain in dB for a given directivity and efficiency
            </summary>
            <param name="directivity">Directivity in linear scale</param>
            <param name="efficiency">Efficiency (0-1)</param>
            <returns>Gain in dB</returns>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.CalculateVSWR(System.Double)">
            <summary>
            Calculates the VSWR (Voltage Standing Wave Ratio) from reflection coefficient
            </summary>
            <param name="reflectionCoefficient">Reflection coefficient magnitude (0-1)</param>
            <returns>VSWR</returns>
        </member>
        <member name="M:CircuitTool.AntennaCalculator.EffectiveRadiatedPower(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the effective radiated power (ERP)
            </summary>
            <param name="transmitterPower">Transmitter power in watts</param>
            <param name="antennaGainDb">Antenna gain in dB</param>
            <param name="feedlineLossDb">Feedline loss in dB</param>
            <returns>ERP in watts</returns>
        </member>
        <member name="T:CircuitTool.BeginnerCalculators">
            <summary>
            Popular calculators for electronics beginners
            </summary>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.BatteryLifeCalculator(System.Double,System.Double)">
            <summary>
            Calculates battery life for simple circuits
            </summary>
            <param name="batteryCapacity">Battery capacity in mAh</param>
            <param name="loadCurrent">Load current in mA</param>
            <returns>Battery life in hours</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.WireGaugeCalculator(System.Double,System.Double)">
            <summary>
            Calculates wire gauge (AWG) needed for a given current
            </summary>
            <param name="current">Current in Amperes</param>
            <param name="safetyFactor">Safety factor (default 1.5)</param>
            <returns>Recommended AWG wire gauge</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.InductorTurnsCalculator(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the number of turns for a basic inductor
            </summary>
            <param name="inductance">Desired inductance in microhenries (µH)</param>
            <param name="coreDiameter">Core diameter in mm</param>
            <param name="coreLength">Core length in mm</param>
            <param name="permeability">Core permeability (default 1 for air core)</param>
            <returns>Number of turns needed</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.RCTimeConstantCapacitor(System.Double,System.Double)">
            <summary>
            Calculates capacitor value for RC time constant
            </summary>
            <param name="resistance">Resistance in Ohms</param>
            <param name="timeConstant">Desired time constant in seconds</param>
            <returns>Capacitor value in Farads</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.RCOscillatorFrequency(System.Double,System.Double)">
            <summary>
            Calculates frequency for RC oscillator circuit
            </summary>
            <param name="resistance">Resistance in Ohms</param>
            <param name="capacitance">Capacitance in Farads</param>
            <returns>Oscillation frequency in Hz</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.PowerRatioToDecibels(System.Double)">
            <summary>
            Calculates decibel (dB) from power ratio
            </summary>
            <param name="powerRatio">Power ratio (Pout/Pin)</param>
            <returns>Decibel value</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.VoltageRatioToDecibels(System.Double)">
            <summary>
            Calculates decibel (dB) from voltage ratio
            </summary>
            <param name="voltageRatio">Voltage ratio (Vout/Vin)</param>
            <returns>Decibel value</returns>
        </member>
        <member name="M:CircuitTool.BeginnerCalculators.TransformerTurnsRatio(System.Double,System.Double)">
            <summary>
            Calculates transformer turns ratio
            </summary>
            <param name="primaryVoltage">Primary voltage</param>
            <param name="secondaryVoltage">Secondary voltage</param>
            <returns>Turns ratio (Ns/Np)</returns>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter">
            <summary>
            Comprehensive calculator for capacitance unit conversions and related calculations
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit">
            <summary>
            Capacitance units enumeration
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceConversionResult">
            <summary>
            Capacitance conversion result
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter.CapacitorEnergyChargeResult">
            <summary>
            Energy and charge calculation result
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.ConvertCapacitance(System.Double,CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit,CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit)">
            <summary>
            Convert capacitance between units
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.GetBestUnit(System.Double)">
            <summary>
            Get the best unit for displaying a capacitance value
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateCharge(System.Double,System.Double)">
            <summary>
            Calculate charge stored in capacitor: Q = C × V
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateEnergy(System.Double,System.Double)">
            <summary>
            Calculate energy stored in capacitor: E = 0.5 × C × V²
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateVoltage(System.Double,System.Double)">
            <summary>
            Calculate voltage from charge and capacitance: V = Q / C
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateCapacitance(System.Double,System.Double)">
            <summary>
            Calculate capacitance from charge and voltage: C = Q / V
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.AnalyzeCapacitor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Comprehensive capacitor energy and charge analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter.ChargingTimeResult">
            <summary>
            Calculate capacitor charging time to reach a percentage of final voltage
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateChargingTime(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate RC charging characteristics
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.CalculateDischargeTime(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate capacitor discharge characteristics
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitanceUnitConverter.ESRAnalysisResult">
            <summary>
            Calculate equivalent series resistance (ESR) effects
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.AnalyzeESR(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Analyze ESR effects on capacitor performance
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.ConvertToFarads(System.Double,CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit)">
            <summary>
            Convert any unit to Farads
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.ConvertFromFarads(System.Double,CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit)">
            <summary>
            Convert from Farads to any unit
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.FormatCapacitance(System.Double,CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit)">
            <summary>
            Format capacitance value with appropriate unit symbol
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitanceUnitConverter.GetUnitSymbol(CircuitTool.Calculators.CapacitanceUnitConverter.CapacitanceUnit)">
            <summary>
            Get unit symbol for display
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator">
            <summary>
            Calculator for decoding and encoding capacitor codes (ceramic, electrolytic, tantalum)
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.CapacitorCodeType">
            <summary>
            Capacitor code types
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.VoltageCode">
            <summary>
            Capacitor voltage rating codes
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.TempCoeffCode">
            <summary>
            Temperature coefficient codes
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.CapacitorCodeResult">
            <summary>
            Capacitor code decode result
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitorCodeCalculator.DecodeCapacitorCode(System.String)">
            <summary>
            Decode capacitor code
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.CapacitorEncodingResult">
            <summary>
            Encode capacitance value to standard codes
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitorCodeCalculator.EncodeCapacitance(System.Double)">
            <summary>
            Encode capacitance to various code formats
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitorCodeCalculator.DecodeVoltageRating(System.Char)">
            <summary>
            Decode voltage rating from letter code
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitorCodeCalculator.GetTempCoefficientDescription(System.String)">
            <summary>
            Get temperature coefficient description
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.CapacitorCodeCalculator.CapacitorImpedanceResult">
            <summary>
            Calculate capacitor impedance at frequency
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.CapacitorCodeCalculator.CalculateImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculate capacitor impedance characteristics
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ComponentCalculator">
            <summary>
            Provides calculations for resistors, capacitors, and inductors.
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ModbusCommunicationCalculator">
            <summary>
            Calculator for Modbus communication parameters and frame analysis
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateCharacterTime(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate character time for given baud rate
            </summary>
            <param name="baudRate">Baud rate in bps</param>
            <param name="dataBits">Number of data bits (typically 8)</param>
            <param name="stopBits">Number of stop bits (1 or 2)</param>
            <param name="parity">Whether parity bit is used</param>
            <returns>Character time in microseconds</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateFrameTimeout(System.Int32)">
            <summary>
            Calculate frame timeout (3.5 character times)
            </summary>
            <param name="baudRate">Baud rate in bps</param>
            <returns>Frame timeout in microseconds</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateCharacterTimeout(System.Int32)">
            <summary>
            Calculate character timeout (1.5 character times)
            </summary>
            <param name="baudRate">Baud rate in bps</param>
            <returns>Character timeout in microseconds</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateCRC16(System.Byte[])">
            <summary>
            Calculate CRC16 for Modbus RTU
            </summary>
            <param name="data">Data bytes</param>
            <returns>CRC16 value</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateLRC(System.Byte[])">
            <summary>
            Calculate LRC (Longitudinal Redundancy Check) for Modbus ASCII
            </summary>
            <param name="data">Data bytes</param>
            <returns>LRC value</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateTransmissionTime(System.Int32,System.Int32)">
            <summary>
            Calculate total frame transmission time
            </summary>
            <param name="frameLength">Frame length in bytes</param>
            <param name="baudRate">Baud rate in bps</param>
            <returns>Transmission time in milliseconds</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateMaxThroughput(System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate maximum theoretical throughput
            </summary>
            <param name="frameLength">Average frame length in bytes</param>
            <param name="baudRate">Baud rate in bps</param>
            <param name="responseTime">Device response time in milliseconds</param>
            <returns>Maximum frames per second</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.ConvertAddress(System.Int32,CircuitTool.Calculators.ModbusAddressFormat,CircuitTool.Calculators.ModbusAddressFormat)">
            <summary>
            Convert between different Modbus address formats
            </summary>
            <param name="address">Input address</param>
            <param name="fromFormat">Source format</param>
            <param name="toFormat">Target format</param>
            <returns>Converted address</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.GetRegisterCount(CircuitTool.Calculators.ModbusDataType)">
            <summary>
            Calculate register count needed for data type
            </summary>
            <param name="dataType">Data type</param>
            <returns>Number of 16-bit registers required</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.AnalyzeNetwork(System.Collections.Generic.List{CircuitTool.Calculators.ModbusDevice},System.Int32)">
            <summary>
            Calculate network loading analysis
            </summary>
            <param name="devices">List of Modbus devices</param>
            <param name="baudRate">Network baud rate</param>
            <returns>Network analysis results</returns>
        </member>
        <member name="M:CircuitTool.Calculators.ModbusCommunicationCalculator.CalculateRS485Power(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate power consumption for RS485 network
            </summary>
            <param name="deviceCount">Number of devices on network</param>
            <param name="transmitCurrent">Transmit current per device (mA)</param>
            <param name="receiveCurrent">Receive current per device (mA)</param>
            <param name="dutyCycle">Transmission duty cycle (0-1)</param>
            <param name="voltage">Supply voltage (V)</param>
            <returns>Total network power consumption (mW)</returns>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator">
            <summary>
            Calculator for resistor color code encoding and decoding
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor">
            <summary>
            Resistor color bands
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.ToleranceColor">
            <summary>
            Resistor tolerance values
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.TempCoeffColor">
            <summary>
            Temperature coefficient colors
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColorResult">
            <summary>
            Result of resistor color code calculation
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.Decode4Band(CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor)">
            <summary>
            Decode 4-band resistor color code
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.Decode5Band(CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor)">
            <summary>
            Decode 5-band resistor color code
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.Decode6Band(CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor,CircuitTool.Calculators.ResistorColorCodeCalculator.ResistorColor)">
            <summary>
            Decode 6-band resistor color code (includes temperature coefficient)
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.EncodeToColorCode(System.Double,System.Double)">
            <summary>
            Encode resistance value to 4-band color code
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.EncodeToColorCode5Band(System.Double,System.Double)">
            <summary>
            Encode resistance value to 5-band color code for higher precision
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.StandardResistorResult">
            <summary>
            Get nearest standard resistor value (E12, E24, E96 series)
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.FindNearestStandardValue(System.Double,System.String)">
            <summary>
            Find nearest standard resistor value
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.ResistorColorCodeCalculator.PowerRatingResult">
            <summary>
            Calculate power rating required for resistor
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.ResistorColorCodeCalculator.CalculatePowerRating(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate required power rating for resistor
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator">
            <summary>
            Calculator for UART communication parameters and timing analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator.UARTConfig">
            <summary>
            Configuration for UART communication
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator.UARTTimingResult">
            <summary>
            UART timing analysis results
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator.UARTBufferAnalysis">
            <summary>
            UART buffer analysis results
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator.UARTCableAnalysis">
            <summary>
            Cable length analysis for UART
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.CalculateUARTTiming(CircuitTool.Calculators.UARTCommunicationCalculator.UARTConfig)">
            <summary>
            Calculate UART timing parameters
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.AnalyzeUARTBuffer(CircuitTool.Calculators.UARTCommunicationCalculator.UARTConfig,System.Double,System.Double,System.Int32)">
            <summary>
            Analyze UART buffer requirements
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.AnalyzeCableLength(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Analyze cable length constraints for UART
            </summary>
        </member>
        <member name="T:CircuitTool.Calculators.UARTCommunicationCalculator.UARTErrorAnalysis">
            <summary>
            Calculate UART error probability
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.AnalyzeUARTErrors(CircuitTool.Calculators.UARTCommunicationCalculator.UARTConfig,System.Double,System.Double,System.Int32)">
            <summary>
            Analyze UART error rates
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.GenerateUARTRecommendations(CircuitTool.Calculators.UARTCommunicationCalculator.UARTConfig,System.Double,System.Boolean,System.Double)">
            <summary>
            Generate UART configuration recommendations
            </summary>
        </member>
        <member name="M:CircuitTool.Calculators.UARTCommunicationCalculator.OptimizeUARTConfiguration(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Calculate optimal UART configuration for given requirements
            </summary>
        </member>
        <member name="T:CircuitTool.CapacitorCalculator">
            <summary>
            Provides easy-to-use methods for capacitor circuit calculations, including reactance, energy, time constants, and more.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double xc = CapacitorCalculator.CapacitiveReactance(1000, 0.000001); // 159.15 Ohms
            double energy = CapacitorCalculator.EnergyStored(0.001, 5); // 0.0125 J
            double tau = CapacitorCalculator.TimeConstant(1000, 0.000001); // 0.001 s
            double cSeries = CapacitorCalculator.SeriesCapacitance(new[] {0.000001, 0.000002});
            double cParallel = CapacitorCalculator.ParallelCapacitance(new[] {0.000001, 0.000002});
            double vCharge = CapacitorCalculator.ChargingVoltage(5, 0.001, 0.002);
            double vDischarge = CapacitorCalculator.DischargingVoltage(5, 0.001, 0.002);
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.CapacitiveReactance(System.Double,System.Double)">
            <summary>
            Calculates capacitive reactance using the formula Xc = 1 / (2πfC).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Capacitive reactance in ohms (Ω).</returns>
            <example>
            double xc = CapacitorCalculator.CapacitiveReactance(1000, 0.000001); // 159.15 Ohms
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.EnergyStored(System.Double,System.Double)">
            <summary>
            Calculates the energy stored in a capacitor using the formula E = 0.5 × C × V².
            </summary>
            <param name="capacitance">Capacitance in farads (F).</param>
            <param name="voltage">Voltage across the capacitor in volts (V).</param>
            <returns>Energy stored in joules (J).</returns>
            <example>
            double energy = CapacitorCalculator.EnergyStored(0.001, 5); // 0.0125 J
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.TimeConstant(System.Double,System.Double)">
            <summary>
            Calculates the time constant for an RC circuit using the formula τ = R × C.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Time constant in seconds (s).</returns>
            <example>
            double tau = CapacitorCalculator.TimeConstant(1000, 0.000001); // 0.001 s
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.SeriesCapacitance(System.Double[])">
            <summary>
            Calculates total capacitance for capacitors in series using the formula 1/Ctotal = 1/C1 + 1/C2 + ...
            </summary>
            <param name="capacitances">Array of capacitance values in farads (F).</param>
            <returns>Total capacitance in farads (F).</returns>
            <example>
            double cSeries = CapacitorCalculator.SeriesCapacitance(new[] {0.000001, 0.000002});
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.ParallelCapacitance(System.Double[])">
            <summary>
            Calculates total capacitance for capacitors in parallel using the formula Ctotal = C1 + C2 + ...
            </summary>
            <param name="capacitances">Array of capacitance values in farads (F).</param>
            <returns>Total capacitance in farads (F).</returns>
            <example>
            double cParallel = CapacitorCalculator.ParallelCapacitance(new[] {0.000001, 0.000002});
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.ChargingVoltage(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the charging voltage of a capacitor at time t using V(t) = Vsource × (1 - e^(-t/τ)).
            </summary>
            <param name="sourceVoltage">Source voltage in volts (V).</param>
            <param name="timeConstant">Time constant τ in seconds (s).</param>
            <param name="time">Time in seconds (s).</param>
            <returns>Capacitor voltage at time t in volts (V).</returns>
            <example>
            double vCharge = CapacitorCalculator.ChargingVoltage(5, 0.001, 0.002);
            </example>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.DischargingVoltage(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the discharging voltage of a capacitor at time t using V(t) = Vinitial × e^(-t/τ).
            </summary>
            <param name="initialVoltage">Initial voltage in volts (V).</param>
            <param name="timeConstant">Time constant τ in seconds (s).</param>
            <param name="time">Time in seconds (s).</param>
            <returns>Capacitor voltage at time t in volts (V).</returns>
            <example>
            double vDischarge = CapacitorCalculator.DischargingVoltage(5, 0.001, 0.002);
            </example>
        </member>
        <member name="T:CircuitTool.CapacitorCalculator.CapacitorChargeEnergyResult">
            <summary>
            Comprehensive capacitor charge and energy analysis
            </summary>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.CalculateChargeAndEnergy(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Enhanced charge and energy calculator with physical properties
            </summary>
        </member>
        <member name="T:CircuitTool.CapacitorCalculator.CapacitorBankResult">
            <summary>
            Capacitor bank analysis for series and parallel combinations
            </summary>
        </member>
        <member name="T:CircuitTool.CapacitorCalculator.CapacitorInBank">
            <summary>
            Individual capacitor in a bank
            </summary>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.AnalyzeSeriesCapacitorBank(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Analyze series capacitor bank
            </summary>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.AnalyzeParallelCapacitorBank(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Analyze parallel capacitor bank
            </summary>
        </member>
        <member name="T:CircuitTool.CapacitorCalculator.RippleCurrentResult">
            <summary>
            Calculate capacitor ripple current handling
            </summary>
        </member>
        <member name="M:CircuitTool.CapacitorCalculator.AnalyzeRippleCurrent(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Analyze capacitor ripple current capability
            </summary>
        </member>
        <member name="T:CircuitTool.DigitalCalculator">
            <summary>
            Provides calculations for digital circuit design and analysis.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double propDelay = DigitalCalculator.PropagationDelay(5e-9, 3e-12, 1000); // Propagation delay
            double risetime = DigitalCalculator.RiseTime(100e-12, 50e-12); // Rise time calculation
            double power = DigitalCalculator.DynamicPower(3.3, 1e-12, 100e6); // Dynamic power consumption
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.PropagationDelay(System.Double,System.Double,System.Double)">
            <summary>
            Calculates propagation delay for a digital gate.
            </summary>
            <param name="intrinsicDelay">Intrinsic delay of the gate in seconds.</param>
            <param name="loadCapacitance">Load capacitance in farads (F).</param>
            <param name="driveStrength">Drive strength in ohms (Ω).</param>
            <returns>Total propagation delay in seconds.</returns>
            <example>
            double propDelay = DigitalCalculator.PropagationDelay(5e-9, 3e-12, 1000); // Propagation delay
            </example>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.RiseTime(System.Double,System.Double)">
            <summary>
            Calculates rise time for a digital signal.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Rise time (10% to 90%) in seconds.</returns>
            <example>
            double risetime = DigitalCalculator.RiseTime(100e-12, 50e-12); // Rise time calculation
            </example>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.FallTime(System.Double,System.Double)">
            <summary>
            Calculates fall time for a digital signal.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Fall time (90% to 10%) in seconds.</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.DynamicPower(System.Double,System.Double,System.Double)">
            <summary>
            Calculates dynamic power consumption in CMOS circuits.
            </summary>
            <param name="voltage">Supply voltage in volts (V).</param>
            <param name="capacitance">Load capacitance in farads (F).</param>
            <param name="frequency">Switching frequency in Hz.</param>
            <returns>Dynamic power consumption in watts (W).</returns>
            <example>
            double power = DigitalCalculator.DynamicPower(3.3, 1e-12, 100e6); // Dynamic power consumption
            </example>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.StaticPower(System.Double,System.Double)">
            <summary>
            Calculates static power consumption due to leakage current.
            </summary>
            <param name="voltage">Supply voltage in volts (V).</param>
            <param name="leakageCurrent">Leakage current in amperes (A).</param>
            <returns>Static power consumption in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.MaxFrequency(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the maximum operating frequency based on propagation delay.
            </summary>
            <param name="propagationDelay">Propagation delay in seconds.</param>
            <param name="setupTime">Setup time in seconds.</param>
            <param name="holdTime">Hold time in seconds.</param>
            <returns>Maximum operating frequency in Hz.</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.Fanout(System.Double,System.Double)">
            <summary>
            Calculates the fanout capability of a digital gate.
            </summary>
            <param name="outputCurrent">Output drive current in amperes (A).</param>
            <param name="inputCurrent">Input current requirement per gate in amperes (A).</param>
            <returns>Maximum fanout (number of gates that can be driven).</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.NoiseMargin(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates noise margin for a digital circuit.
            </summary>
            <param name="outputHighVoltage">Output high voltage (VOH) in volts.</param>
            <param name="inputHighThreshold">Input high threshold (VIH) in volts.</param>
            <param name="outputLowVoltage">Output low voltage (VOL) in volts.</param>
            <param name="inputLowThreshold">Input low threshold (VIL) in volts.</param>
            <returns>Tuple containing (NoiseMarginHigh, NoiseMarginLow) in volts.</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.CharacteristicImpedance(System.Double,System.Double)">
            <summary>
            Calculates characteristic impedance for a digital transmission line.
            </summary>
            <param name="inductance">Inductance per unit length (H/m).</param>
            <param name="capacitance">Capacitance per unit length (F/m).</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.DigitalCalculator.MinimumTraceWidth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the minimum trace width for a given current carrying capacity.
            </summary>
            <param name="current">Current in amperes (A).</param>
            <param name="temperatureRise">Allowed temperature rise in Celsius.</param>
            <param name="copperThickness">Copper thickness in ounces (1 oz = 35 μm).</param>
            <returns>Minimum trace width in meters.</returns>
        </member>
        <member name="T:CircuitTool.ElectricityBillCalculator">
            <summary>
            Provides a simple method to calculate electricity bills.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double bill = ElectricityBillCalculator.CalculateBill(150, 0.12); // $18.00
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.ElectricityBillCalculator.CalculateBill(System.Double,System.Double)">
            <summary>
            Calculates the total electricity bill.
            </summary>
            <param name="kWh">The total energy consumed in kilowatt-hours (kWh).</param>
            <param name="ratePerKWh">The rate per kilowatt-hour (e.g., 0.12 for $0.12/kWh).</param>
            <returns>The total bill amount.</returns>
        </member>
        <member name="T:CircuitTool.EMICalculator">
            <summary>
            Provides calculations for Electromagnetic Interference (EMI) and Electromagnetic Compatibility (EMC) analysis.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double field = EMICalculator.NearFieldStrength(1.0, 0.1); // Near field strength
            double shielding = EMICalculator.ShieldingEffectiveness(0.001, 1e6, 100); // SE calculation
            double cutoff = EMICalculator.WaveguideCutoff(0.02, 0.01); // Waveguide cutoff frequency
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.EMICalculator.NearFieldStrength(System.Double,System.Double)">
            <summary>
            Calculates near-field electric field strength from current.
            </summary>
            <param name="current">Current in amperes (A).</param>
            <param name="distance">Distance from source in meters (m).</param>
            <returns>Electric field strength in V/m.</returns>
            <example>
            double field = EMICalculator.NearFieldStrength(1.0, 0.1); // Near field strength
            </example>
        </member>
        <member name="M:CircuitTool.EMICalculator.ShieldingEffectiveness(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates shielding effectiveness of a metallic enclosure.
            </summary>
            <param name="thickness">Shield thickness in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="conductivity">Conductivity in S/m (default: copper).</param>
            <param name="relativePermeability">Relative permeability (default: 1).</param>
            <returns>Shielding effectiveness in dB.</returns>
            <example>
            double shielding = EMICalculator.ShieldingEffectiveness(0.001, 1e6, 100); // SE calculation
            </example>
        </member>
        <member name="M:CircuitTool.EMICalculator.SkinDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates skin depth in a conductor.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="conductivity">Conductivity in S/m (default: copper).</param>
            <param name="relativePermeability">Relative permeability (default: 1).</param>
            <returns>Skin depth in meters.</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.Crosstalk(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates crosstalk between parallel traces.
            </summary>
            <param name="length">Trace length in meters.</param>
            <param name="spacing">Trace spacing in meters.</param>
            <param name="height">Height above ground plane in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <returns>Crosstalk in dB.</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.WaveguideCutoff(System.Double,System.Double)">
            <summary>
            Calculates waveguide cutoff frequency for rectangular apertures.
            </summary>
            <param name="width">Aperture width in meters.</param>
            <param name="height">Aperture height in meters.</param>
            <returns>Cutoff frequency in Hz.</returns>
            <example>
            double cutoff = EMICalculator.WaveguideCutoff(0.02, 0.01); // Waveguide cutoff frequency
            </example>
        </member>
        <member name="M:CircuitTool.EMICalculator.EvanescentModeAttenuation(System.Double,System.Double,System.Double)">
            <summary>
            Calculates attenuation below cutoff frequency (evanescent mode).
            </summary>
            <param name="frequency">Operating frequency in Hz.</param>
            <param name="cutoffFrequency">Cutoff frequency in Hz.</param>
            <param name="length">Aperture depth in meters.</param>
            <returns>Attenuation in dB.</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.RequiredApertureSize(System.Double,System.Double,System.Double)">
            <summary>
            Calculates required aperture size for given shielding effectiveness.
            </summary>
            <param name="targetSE">Target shielding effectiveness in dB.</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="depth">Aperture depth in meters.</param>
            <returns>Maximum aperture dimension in meters.</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.RadiatedEmissions(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates radiated emissions from a current loop.
            </summary>
            <param name="current">Current in amperes (A).</param>
            <param name="loopArea">Loop area in square meters (m²).</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="distance">Distance from loop in meters (m).</param>
            <returns>Electric field strength in V/m.</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.CommonModeChokeImpedance(System.Double,System.Double)">
            <summary>
            Calculates common mode choke impedance.
            </summary>
            <param name="inductance">Choke inductance in henries (H).</param>
            <param name="frequency">Frequency in Hz.</param>
            <returns>Impedance magnitude in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.FerriteBeadImpedance(System.Double,System.Double)">
            <summary>
            Calculates ferrite bead impedance approximation.
            </summary>
            <param name="impedanceAt100MHz">Impedance at 100 MHz in ohms (Ω).</param>
            <param name="frequency">Operating frequency in Hz.</param>
            <returns>Approximate impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.EMICalculator.DifferentialModeFilterAttenuation(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates differential mode filter attenuation.
            </summary>
            <param name="inductance">Filter inductance in henries (H).</param>
            <param name="capacitance">Filter capacitance in farads (F).</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="sourceImpedance">Source impedance in ohms (Ω) (default: 50Ω).</param>
            <param name="loadImpedance">Load impedance in ohms (Ω) (default: 50Ω).</param>
            <returns>Attenuation in dB.</returns>
        </member>
        <member name="T:CircuitTool.FilterCalculator">
            <summary>
            Provides calculations for electronic filter design and analysis.
            </summary>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCLowPassCutoffFrequency(System.Double,System.Double)">
            <summary>
            Calculates the cutoff frequency of an RC low-pass filter using fc = 1 / (2πRC).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Cutoff frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCHighPassCutoffFrequency(System.Double,System.Double)">
            <summary>
            Calculates the cutoff frequency of an RC high-pass filter using fc = 1 / (2πRC).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Cutoff frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RLLowPassCutoffFrequency(System.Double,System.Double)">
            <summary>
            Calculates the cutoff frequency of an RL low-pass filter using fc = R / (2πL).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <returns>Cutoff frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RLHighPassCutoffFrequency(System.Double,System.Double)">
            <summary>
            Calculates the cutoff frequency of an RL high-pass filter using fc = R / (2πL).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <returns>Cutoff frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.GainInDecibels(System.Double,System.Double)">
            <summary>
            Calculates the gain of a filter in decibels using Gain(dB) = 20 × log10(Vout/Vin).
            </summary>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <returns>Gain in decibels (dB).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCLowPassPhaseShift(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the phase shift of an RC low-pass filter using φ = -arctan(2πfRC).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Phase shift in degrees.</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCHighPassPhaseShift(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the phase shift of an RC high-pass filter using φ = arctan(1/(2πfRC)).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Phase shift in degrees.</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCLowPassMagnitudeResponse(System.Double,System.Double)">
            <summary>
            Calculates the magnitude response of an RC low-pass filter using |H(f)| = 1 / √(1 + (f/fc)²).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="cutoffFrequency">Cutoff frequency in hertz (Hz).</param>
            <returns>Magnitude response (unitless, between 0 and 1).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RCHighPassMagnitudeResponse(System.Double,System.Double)">
            <summary>
            Calculates the magnitude response of an RC high-pass filter using |H(f)| = (f/fc) / √(1 + (f/fc)²).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="cutoffFrequency">Cutoff frequency in hertz (Hz).</param>
            <returns>Magnitude response (unitless, between 0 and 1).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RequiredCapacitanceForCutoff(System.Double,System.Double)">
            <summary>
            Calculates the required capacitance for a desired RC filter cutoff frequency.
            </summary>
            <param name="cutoffFrequency">Desired cutoff frequency in hertz (Hz).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <returns>Required capacitance in farads (F).</returns>
        </member>
        <member name="M:CircuitTool.FilterCalculator.RequiredResistanceForCutoff(System.Double,System.Double)">
            <summary>
            Calculates the required resistance for a desired RC filter cutoff frequency.
            </summary>
            <param name="cutoffFrequency">Desired cutoff frequency in hertz (Hz).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Required resistance in ohms (Ω).</returns>
        </member>
        <member name="T:CircuitTool.InductorCalculator">
            <summary>
            Provides calculations for inductor circuits and characteristics.
            </summary>
        </member>
        <member name="M:CircuitTool.InductorCalculator.InductiveReactance(System.Double,System.Double)">
            <summary>
            Calculates inductive reactance using the formula XL = 2πfL.
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <returns>Inductive reactance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.EnergyStored(System.Double,System.Double)">
            <summary>
            Calculates the energy stored in an inductor using the formula E = 0.5 × L × I².
            </summary>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="current">Current through the inductor in amperes (A).</param>
            <returns>Energy stored in joules (J).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.TimeConstant(System.Double,System.Double)">
            <summary>
            Calculates the time constant for an RL circuit using the formula τ = L / R.
            </summary>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <returns>Time constant in seconds (s).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.SeriesInductance(System.Double[])">
            <summary>
            Calculates total inductance for inductors in series using the formula Ltotal = L1 + L2 + ...
            </summary>
            <param name="inductances">Array of inductance values in henries (H).</param>
            <returns>Total inductance in henries (H).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.ParallelInductance(System.Double[])">
            <summary>
            Calculates total inductance for inductors in parallel using the formula 1/Ltotal = 1/L1 + 1/L2 + ...
            </summary>
            <param name="inductances">Array of inductance values in henries (H).</param>
            <returns>Total inductance in henries (H).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.CurrentBuildup(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the current buildup in an inductor at time t using I(t) = Ifinal × (1 - e^(-t/τ)).
            </summary>
            <param name="finalCurrent">Final steady-state current in amperes (A).</param>
            <param name="timeConstant">Time constant τ in seconds (s).</param>
            <param name="time">Time in seconds (s).</param>
            <returns>Inductor current at time t in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.CurrentDecay(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the current decay in an inductor at time t using I(t) = Iinitial × e^(-t/τ).
            </summary>
            <param name="initialCurrent">Initial current in amperes (A).</param>
            <param name="timeConstant">Time constant τ in seconds (s).</param>
            <param name="time">Time in seconds (s).</param>
            <returns>Inductor current at time t in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.InductorCalculator.ResonantFrequency(System.Double,System.Double)">
            <summary>
            Calculates the resonant frequency of an LC circuit using f = 1 / (2π√(LC)).
            </summary>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Resonant frequency in hertz (Hz).</returns>
        </member>
        <member name="T:CircuitTool.LEDCalculator">
            <summary>
            Provides easy-to-use methods for LED circuit calculations, including resistor values, power, and brightness.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double resistor = LEDCalculator.CalculateResistorValue(5, 2, 0.02); // 150 Ohms
            double power = LEDCalculator.CalculateLEDPower(5, 0.02); // 0.1W
            double brightness = LEDCalculator.CalculateBrightness(50); // 0.5 (50%)
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateResistorValue(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the required resistor value for an LED circuit using <c>R = (Vs - Vf) / I</c>.
            </summary>
            <param name="supplyVoltage">Supply voltage in volts (V).</param>
            <param name="ledVoltage">LED forward voltage in volts (V).</param>
            <param name="ledCurrent">Desired LED current in amperes (A).</param>
            <returns>Required resistor value in ohms (Ω).</returns>
            <example>
            double resistor = LEDCalculator.CalculateResistorValue(5, 2, 0.02); // 150 Ohms
            </example>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateLEDPower(System.Double,System.Double)">
            <summary>
            Calculates the power consumption of an LED circuit using <c>P = V × I</c>.
            </summary>
            <param name="supplyVoltage">Supply voltage in volts (V).</param>
            <param name="ledCurrent">LED current in amperes (A).</param>
            <returns>Power consumption in watts (W).</returns>
            <example>
            double power = LEDCalculator.CalculateLEDPower(5, 0.02); // 0.1W
            </example>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateBrightness(System.Double)">
            <summary>
            Calculates the brightness ratio when dimming an LED with PWM.
            </summary>
            <param name="dutyCycle">PWM duty cycle (0-100%).</param>
            <returns>Brightness ratio (0-1).</returns>
            <example>
            double brightness = LEDCalculator.CalculateBrightness(75); // 0.75
            </example>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateSeriesResistor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Calculates resistor value for multiple LEDs in series
            </summary>
            <param name="supplyVoltage">Supply voltage (V)</param>
            <param name="ledVoltage">LED forward voltage (V)</param>
            <param name="numLEDs">Number of LEDs in series</param>
            <param name="ledCurrent">Desired LED current (A)</param>
            <returns>Required resistor value in Ohms</returns>
        </member>
        <member name="T:CircuitTool.LEDCalculator.LEDArrayResult">
            <summary>
            LED array configuration result
            </summary>
        </member>
        <member name="T:CircuitTool.LEDCalculator.LEDSpec">
            <summary>
            LED specifications for calculations
            </summary>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateLEDArray(System.Double,System.Int32,CircuitTool.LEDCalculator.LEDSpec,System.Double)">
            <summary>
            Calculate optimal LED array configuration
            </summary>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateArrayResistor(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate resistor for specific LED configuration
            </summary>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateLEDCurrent(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate LED current with known resistor
            </summary>
        </member>
        <member name="T:CircuitTool.LEDCalculator.LEDThermalResult">
            <summary>
            LED thermal analysis result
            </summary>
        </member>
        <member name="M:CircuitTool.LEDCalculator.AnalyzeLEDThermal(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Analyze LED thermal characteristics
            </summary>
        </member>
        <member name="T:CircuitTool.LEDCalculator.CommonLEDs">
            <summary>
            Common LED specifications database
            </summary>
        </member>
        <member name="T:CircuitTool.LEDCalculator.LEDStripResult">
            <summary>
            Calculate LED strip resistor values
            </summary>
        </member>
        <member name="M:CircuitTool.LEDCalculator.CalculateLEDStripResistors(System.Double,System.Int32,CircuitTool.LEDCalculator.LEDSpec,System.Int32,System.Double)">
            <summary>
            Calculate resistors for LED strip segments
            </summary>
        </member>
        <member name="T:CircuitTool.NoiseCalculator">
            <summary>
            Provides calculations for noise analysis in electronic circuits.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double thermal = NoiseCalculator.ThermalNoise(1000, 10000, 300); // Thermal noise
            double shot = NoiseCalculator.ShotNoise(1e-3, 1000); // Shot noise
            double total = NoiseCalculator.TotalNoise(new[] {1e-9, 2e-9, 1.5e-9}); // Total noise
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.ThermalNoise(System.Double,System.Double,System.Double)">
            <summary>
            Calculates thermal (Johnson) noise voltage.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="bandwidth">Bandwidth in Hz.</param>
            <param name="temperature">Temperature in Kelvin (default: 290K).</param>
            <returns>RMS noise voltage in volts (V).</returns>
            <example>
            double thermal = NoiseCalculator.ThermalNoise(1000, 10000, 300); // Thermal noise
            </example>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.ShotNoise(System.Double,System.Double)">
            <summary>
            Calculates shot noise current.
            </summary>
            <param name="current">DC current in amperes (A).</param>
            <param name="bandwidth">Bandwidth in Hz.</param>
            <returns>RMS noise current in amperes (A).</returns>
            <example>
            double shot = NoiseCalculator.ShotNoise(1e-3, 1000); // Shot noise
            </example>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.FlickerNoise(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates flicker (1/f) noise voltage.
            </summary>
            <param name="current">DC current in amperes (A).</param>
            <param name="flickerCoefficient">Flicker noise coefficient (device dependent).</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="bandwidth">Bandwidth in Hz.</param>
            <returns>RMS noise voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.TotalNoise(System.Double[])">
            <summary>
            Calculates total noise from multiple uncorrelated noise sources.
            </summary>
            <param name="noiseSources">Array of RMS noise values in the same units.</param>
            <returns>Total RMS noise in the same units.</returns>
            <example>
            double total = NoiseCalculator.TotalNoise(new[] {1e-9, 2e-9, 1.5e-9}); // Total noise
            </example>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.NoiseFactorFromDb(System.Double)">
            <summary>
            Calculates noise factor (linear) from noise figure (dB).
            </summary>
            <param name="noiseFigureDb">Noise figure in dB.</param>
            <returns>Noise factor (linear).</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.NoiseFigureFromFactor(System.Double)">
            <summary>
            Calculates noise figure (dB) from noise factor (linear).
            </summary>
            <param name="noiseFactor">Noise factor (linear, ≥ 1).</param>
            <returns>Noise figure in dB.</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.CascadedNoiseFactor(System.Double[],System.Double[])">
            <summary>
            Calculates cascaded noise figure for multiple stages.
            </summary>
            <param name="noiseFactors">Array of noise factors (linear) for each stage.</param>
            <param name="gains">Array of power gains (linear) for each stage.</param>
            <returns>Overall noise factor (linear).</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.InputReferredNoiseVoltage(System.Double,System.Double)">
            <summary>
            Calculates input-referred noise voltage of an amplifier.
            </summary>
            <param name="outputNoiseVoltage">Output noise voltage in volts (V).</param>
            <param name="gain">Voltage gain (linear).</param>
            <returns>Input-referred noise voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.InputReferredNoiseCurrent(System.Double,System.Double)">
            <summary>
            Calculates input-referred noise current of an amplifier.
            </summary>
            <param name="outputNoiseCurrent">Output noise current in amperes (A).</param>
            <param name="gain">Current gain (linear).</param>
            <returns>Input-referred noise current in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.NoiseBandwidth(System.Double,System.Int32)">
            <summary>
            Calculates noise bandwidth from 3dB bandwidth.
            </summary>
            <param name="bandwidth3dB">3dB bandwidth in Hz.</param>
            <param name="filterOrder">Filter order (1 for single pole, 2 for second order, etc.).</param>
            <returns>Noise bandwidth in Hz.</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.SignalToNoiseRatio(System.Double,System.Double)">
            <summary>
            Calculates signal-to-noise ratio in dB.
            </summary>
            <param name="signalPower">Signal power in watts or any consistent unit.</param>
            <param name="noisePower">Noise power in the same unit as signal power.</param>
            <returns>SNR in dB.</returns>
        </member>
        <member name="M:CircuitTool.NoiseCalculator.EquivalentNoiseBandwidth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates equivalent noise bandwidth for a given filter response.
            </summary>
            <param name="dcGain">DC gain of the filter (linear).</param>
            <param name="totalNoisePower">Total integrated noise power.</param>
            <param name="noiseSpectralDensity">Noise spectral density at DC.</param>
            <returns>Equivalent noise bandwidth in Hz.</returns>
        </member>
        <member name="T:CircuitTool.OhmsLawCalculator">
            <summary>
            Provides calculations for Ohm's Law (V = I × R).
            </summary>
        </member>
        <member name="M:CircuitTool.OhmsLawCalculator.Voltage(System.Double,System.Double)">
            <summary>
            Calculates voltage using Ohm's Law (V = I × R).
            </summary>
            <param name="current">Current in amperes (A).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <returns>Voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.OhmsLawCalculator.Current(System.Double,System.Double)">
            <summary>
            Calculates current using Ohm's Law (I = V / R).
            </summary>
            <param name="voltage">Voltage in volts (V).</param>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <returns>Current in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.OhmsLawCalculator.Resistance(System.Double,System.Double)">
            <summary>
            Calculates resistance using Ohm's Law (R = V / I).
            </summary>
            <param name="voltage">Voltage in volts (V).</param>
            <param name="current">Current in amperes (A).</param>
            <returns>Resistance in ohms (Ω).</returns>
        </member>
        <member name="T:CircuitTool.OpAmpCalculator">
            <summary>
            Provides calculations for operational amplifier circuits and characteristics.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double gain = OpAmpCalculator.NonInvertingGain(10000, 1000); // Non-inverting gain
            double gain2 = OpAmpCalculator.InvertingGain(10000, 1000); // Inverting gain
            double bandwidth = OpAmpCalculator.GainBandwidthProduct(1e6, 100); // Closed-loop bandwidth
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.NonInvertingGain(System.Double,System.Double)">
            <summary>
            Calculates gain of a non-inverting amplifier.
            </summary>
            <param name="feedbackResistor">Feedback resistor (Rf) in ohms (Ω).</param>
            <param name="inputResistor">Input resistor (Rin) in ohms (Ω).</param>
            <returns>Voltage gain (linear).</returns>
            <example>
            double gain = OpAmpCalculator.NonInvertingGain(10000, 1000); // Non-inverting gain
            </example>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.InvertingGain(System.Double,System.Double)">
            <summary>
            Calculates gain of an inverting amplifier.
            </summary>
            <param name="feedbackResistor">Feedback resistor (Rf) in ohms (Ω).</param>
            <param name="inputResistor">Input resistor (Rin) in ohms (Ω).</param>
            <returns>Voltage gain magnitude (linear, positive value).</returns>
            <example>
            double gain = OpAmpCalculator.InvertingGain(10000, 1000); // Inverting gain
            </example>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.ClosedLoopBandwidth(System.Double,System.Double)">
            <summary>
            Calculates closed-loop bandwidth from gain-bandwidth product.
            </summary>
            <param name="gainBandwidthProduct">Gain-bandwidth product in Hz.</param>
            <param name="closedLoopGain">Closed-loop gain (linear).</param>
            <returns>Closed-loop bandwidth in Hz.</returns>
            <example>
            double bandwidth = OpAmpCalculator.GainBandwidthProduct(1e6, 100); // Closed-loop bandwidth
            </example>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.DifferentialGain(System.Double,System.Double)">
            <summary>
            Calculates gain of a differential amplifier.
            </summary>
            <param name="feedbackResistor">Feedback resistor (Rf) in ohms (Ω).</param>
            <param name="inputResistor">Input resistor (Rin) in ohms (Ω).</param>
            <returns>Differential gain (linear).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.CMRR(System.Double,System.Double)">
            <summary>
            Calculates common-mode rejection ratio (CMRR) in dB.
            </summary>
            <param name="differentialGain">Differential mode gain (linear).</param>
            <param name="commonModeGain">Common mode gain (linear).</param>
            <returns>CMRR in dB.</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.NonInvertingInputImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates input impedance of a non-inverting amplifier.
            </summary>
            <param name="opAmpInputImpedance">Op-amp input impedance in ohms (Ω).</param>
            <param name="openLoopGain">Open-loop gain (linear).</param>
            <param name="closedLoopGain">Closed-loop gain (linear).</param>
            <returns>Input impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.OutputImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates output impedance of an op-amp circuit.
            </summary>
            <param name="opAmpOutputImpedance">Op-amp output impedance in ohms (Ω).</param>
            <param name="openLoopGain">Open-loop gain (linear).</param>
            <param name="feedbackFactor">Feedback factor (β).</param>
            <returns>Output impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.SlewRateLimit(System.Double,System.Double)">
            <summary>
            Calculates slew rate limitation for sinusoidal signals.
            </summary>
            <param name="slewRate">Slew rate in V/s.</param>
            <param name="amplitude">Peak amplitude in volts (V).</param>
            <returns>Maximum frequency without slew rate limiting in Hz.</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.StabilityMargins(System.Double,System.Double)">
            <summary>
            Calculates gain and phase margins for stability analysis.
            </summary>
            <param name="openLoopGain">Open-loop gain at crossover frequency (linear).</param>
            <param name="phaseMargin">Phase margin in degrees.</param>
            <returns>Tuple containing (GainMargin in dB, PhaseMargin in degrees).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.IntegratorOutput(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates integrator circuit output for DC input.
            </summary>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <param name="inputResistor">Input resistor in ohms (Ω).</param>
            <param name="feedbackCapacitor">Feedback capacitor in farads (F).</param>
            <param name="time">Time in seconds (s).</param>
            <returns>Output voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.DifferentiatorOutput(System.Double,System.Double,System.Double)">
            <summary>
            Calculates differentiator circuit output for step input.
            </summary>
            <param name="inputCapacitor">Input capacitor in farads (F).</param>
            <param name="feedbackResistor">Feedback resistor in ohms (Ω).</param>
            <param name="inputVoltageStep">Input voltage step in volts (V).</param>
            <returns>Initial output voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.SallenKeyCutoffFrequency(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates Sallen-Key filter cutoff frequency.
            </summary>
            <param name="r1">First resistor in ohms (Ω).</param>
            <param name="r2">Second resistor in ohms (Ω).</param>
            <param name="c1">First capacitor in farads (F).</param>
            <param name="c2">Second capacitor in farads (F).</param>
            <returns>Cutoff frequency in Hz.</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.MultipleFeedbackCutoffFrequency(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates multiple feedback filter cutoff frequency.
            </summary>
            <param name="r1">Input resistor in ohms (Ω).</param>
            <param name="r2">Feedback resistor in ohms (Ω).</param>
            <param name="c1">Input capacitor in farads (F).</param>
            <param name="c2">Feedback capacitor in farads (F).</param>
            <returns>Cutoff frequency in Hz.</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.InstrumentationAmplifierGain(System.Double,System.Double)">
            <summary>
            Calculates instrumentation amplifier gain.
            </summary>
            <param name="gainResistor">Gain setting resistor in ohms (Ω).</param>
            <param name="internalResistor">Internal resistor value in ohms (Ω) - typically 50kΩ.</param>
            <returns>Instrumentation amplifier gain (linear).</returns>
        </member>
        <member name="M:CircuitTool.OpAmpCalculator.InputReferredOffset(System.Double,System.Double)">
            <summary>
            Calculates offset voltage referred to input.
            </summary>
            <param name="outputOffset">Output offset voltage in volts (V).</param>
            <param name="gain">Amplifier gain (linear).</param>
            <returns>Input-referred offset voltage in volts (V).</returns>
        </member>
        <member name="T:CircuitTool.OptoelectronicsCalculator">
            <summary>
            Provides calculations for optoelectronic components and fiber optic systems.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double current = OptoelectronicsCalculator.PhotodiodeCurrent(1e-3, 0.8); // Photodiode current
            double power = OptoelectronicsCalculator.LEDPower(20e-3, 1.8, 0.15); // LED optical power
            double na = OptoelectronicsCalculator.NumericalAperture(1.46, 1.45); // Fiber NA
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.PhotodiodeCurrent(System.Double,System.Double)">
            <summary>
            Calculates photodiode current from optical power.
            </summary>
            <param name="opticalPower">Incident optical power in watts (W).</param>
            <param name="responsivity">Photodiode responsivity in A/W.</param>
            <returns>Photodiode current in amperes (A).</returns>
            <example>
            double current = OptoelectronicsCalculator.PhotodiodeCurrent(1e-3, 0.8); // Photodiode current
            </example>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.Responsivity(System.Double,System.Double)">
            <summary>
            Calculates responsivity from quantum efficiency and wavelength.
            </summary>
            <param name="quantumEfficiency">Quantum efficiency (0-1).</param>
            <param name="wavelength">Wavelength in meters.</param>
            <returns>Responsivity in A/W.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.LEDPower(System.Double,System.Double,System.Double)">
            <summary>
            Calculates LED optical power output.
            </summary>
            <param name="current">Forward current in amperes (A).</param>
            <param name="voltage">Forward voltage in volts (V).</param>
            <param name="efficiency">Wall-plug efficiency (0-1).</param>
            <returns>Optical power output in watts (W).</returns>
            <example>
            double power = OptoelectronicsCalculator.LEDPower(20e-3, 1.8, 0.15); // LED optical power
            </example>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.NumericalAperture(System.Double,System.Double)">
            <summary>
            Calculates numerical aperture of an optical fiber.
            </summary>
            <param name="coreIndex">Refractive index of the core.</param>
            <param name="claddingIndex">Refractive index of the cladding.</param>
            <returns>Numerical aperture (dimensionless).</returns>
            <example>
            double na = OptoelectronicsCalculator.NumericalAperture(1.46, 1.45); // Fiber NA
            </example>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.AcceptanceAngle(System.Double,System.Double)">
            <summary>
            Calculates acceptance angle of an optical fiber.
            </summary>
            <param name="numericalAperture">Numerical aperture of the fiber.</param>
            <param name="externalMediumIndex">Refractive index of external medium (default: air = 1.0).</param>
            <returns>Half-angle of acceptance cone in radians.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.FiberAttenuation(System.Double,System.Double,System.Double)">
            <summary>
            Calculates attenuation in optical fiber.
            </summary>
            <param name="inputPower">Input optical power in watts (W).</param>
            <param name="outputPower">Output optical power in watts (W).</param>
            <param name="length">Fiber length in kilometers.</param>
            <returns>Attenuation in dB/km.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.OutputPower(System.Double,System.Double,System.Double)">
            <summary>
            Calculates optical power from attenuation.
            </summary>
            <param name="inputPower">Input optical power in watts (W).</param>
            <param name="attenuation">Attenuation in dB/km.</param>
            <param name="length">Fiber length in kilometers.</param>
            <returns>Output optical power in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.NoiseEquivalentPower(System.Double,System.Double)">
            <summary>
            Calculates photodetector noise equivalent power (NEP).
            </summary>
            <param name="noiseCurrentDensity">Noise current density in A/√Hz.</param>
            <param name="responsivity">Photodetector responsivity in A/W.</param>
            <returns>Noise equivalent power in W/√Hz.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.Detectivity(System.Double,System.Double)">
            <summary>
            Calculates detectivity (D*) of a photodetector.
            </summary>
            <param name="area">Detector area in square meters (m²).</param>
            <param name="noiseEquivalentPower">Noise equivalent power in W/√Hz.</param>
            <returns>Detectivity in cm⋅Hz^(1/2)/W.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.ModalDispersion(System.Double,System.Double,System.Double)">
            <summary>
            Calculates modal dispersion in multimode fiber.
            </summary>
            <param name="coreIndex">Core refractive index.</param>
            <param name="claddingIndex">Cladding refractive index.</param>
            <param name="length">Fiber length in kilometers.</param>
            <returns>Modal dispersion in nanoseconds.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.ChromaticDispersion(System.Double,System.Double,System.Double)">
            <summary>
            Calculates chromatic dispersion broadening.
            </summary>
            <param name="dispersionParameter">Dispersion parameter in ps/(nm⋅km).</param>
            <param name="spectralWidth">Source spectral width in nm.</param>
            <param name="length">Fiber length in kilometers.</param>
            <returns>Pulse broadening in picoseconds.</returns>
        </member>
        <member name="M:CircuitTool.OptoelectronicsCalculator.LinkBudget(System.Double,System.Double,System.Double)">
            <summary>
            Calculates link budget for fiber optic system.
            </summary>
            <param name="transmitterPower">Transmitter power in dBm.</param>
            <param name="receiverSensitivity">Receiver sensitivity in dBm.</param>
            <param name="systemMargin">System margin in dB.</param>
            <returns>Available loss budget in dB.</returns>
        </member>
        <member name="T:CircuitTool.PhysicsCircuitCalculators">
            <summary>
            Provides additional calculators for electrical engineering and physics, including impedance, resonance, Q factor, and more.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double xl = PhysicsCircuitCalculators.InductiveReactance(1000, 0.01); // 62.83 Ohms
            double zrlc = PhysicsCircuitCalculators.SeriesRLCImpedance(100, 0.01, 0.000001, 1000); // 100.0 Ohms
            double fres = PhysicsCircuitCalculators.ResonantFrequencyLC(0.01, 0.000001); // 1591.55 Hz
            double q = PhysicsCircuitCalculators.QFactor(1000, 0.01, 100); // 0.628
            double energyL = PhysicsCircuitCalculators.EnergyStoredInductor(0.01, 2); // 0.02 J
            double pf = PhysicsCircuitCalculators.PowerFactor(100, 80); // 0.8
            double rms = PhysicsCircuitCalculators.RMS(new[] {1.0, 2.0, 3.0}); // 2.16
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.InductiveReactance(System.Double,System.Double)">
            <summary>
            Calculates inductive reactance (Xl = 2πfL).
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <returns>Inductive reactance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.SeriesRLImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates impedance of a series RL circuit (Z = sqrt(R^2 + (Xl)^2)).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <returns>Impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.SeriesRCImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates impedance of a series RC circuit (Z = sqrt(R^2 + (Xc)^2)).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <returns>Impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.SeriesRLCImpedance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates impedance of a series RLC circuit (Z = sqrt(R^2 + (Xl - Xc)^2)).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <returns>Impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.ResonantFrequencyLC(System.Double,System.Double)">
            <summary>
            Calculates resonant frequency for an LC circuit (f = 1 / (2π√(LC))).
            </summary>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Resonant frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.QFactor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates Q factor for a series RLC circuit (Q = 1/R * sqrt(L/C)).
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="capacitance">Capacitance in farads (F).</param>
            <returns>Q factor (dimensionless).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.EnergyStoredInductor(System.Double,System.Double)">
            <summary>
            Calculates the energy stored in an inductor (E = 0.5 × L × I²).
            </summary>
            <param name="inductance">Inductance in henries (H).</param>
            <param name="current">Current in amperes (A).</param>
            <returns>Energy in joules (J).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.PowerFactor(System.Double,System.Double)">
            <summary>
            Calculates the power factor (PF = real power / apparent power).
            </summary>
            <param name="realPower">Real power in watts (W).</param>
            <param name="apparentPower">Apparent power in volt-amperes (VA).</param>
            <returns>Power factor (0 to 1).</returns>
        </member>
        <member name="M:CircuitTool.PhysicsCircuitCalculators.RMS(System.Double[])">
            <summary>
            Calculates the root mean square (RMS) value of a set of values.
            </summary>
            <param name="values">Array of values.</param>
            <returns>RMS value.</returns>
        </member>
        <member name="T:CircuitTool.PowerCalculator">
            <summary>
            Provides easy-to-use methods for common electrical power calculations.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double watts = PowerCalculator.Power(12, 2); // 24W
            double watts2 = PowerCalculator.PowerFromCurrentResistance(2, 10); // 40W
            double watts3 = PowerCalculator.PowerFromVoltageResistance(12, 6); // 24W
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.PowerCalculator.Power(System.Double,System.Double)">
            <summary>
            Calculates electrical power using the formula <c>P = V × I</c>.
            </summary>
            <param name="voltage">The voltage in volts (V).</param>
            <param name="current">The current in amperes (A).</param>
            <returns>The calculated power in watts (W).</returns>
            <example>
            double power = PowerCalculator.Power(5, 2); // 10W
            </example>
        </member>
        <member name="M:CircuitTool.PowerCalculator.PowerFromCurrentResistance(System.Double,System.Double)">
            <summary>
            Calculates electrical power using the formula <c>P = I² × R</c>.
            </summary>
            <param name="current">The current in amperes (A).</param>
            <param name="resistance">The resistance in ohms (Ω).</param>
            <returns>The calculated power in watts (W).</returns>
            <example>
            double power = PowerCalculator.PowerFromCurrentResistance(3, 4); // 36W
            </example>
        </member>
        <member name="M:CircuitTool.PowerCalculator.PowerFromVoltageResistance(System.Double,System.Double)">
            <summary>
            Calculates electrical power using the formula <c>P = V² / R</c>.
            </summary>
            <param name="voltage">The voltage in volts (V).</param>
            <param name="resistance">The resistance in ohms (Ω).</param>
            <returns>The calculated power in watts (W).</returns>
            <example>
            double power = PowerCalculator.PowerFromVoltageResistance(10, 5); // 20W
            </example>
        </member>
        <member name="T:CircuitTool.ResistorCalculator">
            <summary>
            Provides methods for resistor calculations, including Ohm's Law, series, and parallel combinations.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double r = ResistorCalculator.Resistance(10, 2); // 5 Ohms
            double series = ResistorCalculator.Series(10, 20, 30); // 60 Ohms
            double parallel = ResistorCalculator.Parallel(10, 20); // 6.67 Ohms
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.Resistance(System.Double,System.Double)">
            <summary>
            Calculates resistance using Ohm's Law: <c>R = V / I</c>.
            </summary>
            <param name="voltage">Voltage in volts (V).</param>
            <param name="current">Current in amperes (A).</param>
            <returns>Resistance in ohms (Ω).</returns>
            <example>
            double r = ResistorCalculator.Resistance(10, 2); // 5 Ohms
            </example>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.Series(System.Double[])">
            <summary>
            Calculates total resistance for resistors in series: <c>Rtotal = R1 + R2 + ...</c>
            </summary>
            <param name="resistors">Resistor values in ohms (Ω).</param>
            <returns>Total series resistance in ohms (Ω).</returns>
            <example>
            double total = ResistorCalculator.Series(10, 20, 30); // 60 Ohms
            </example>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.Parallel(System.Double[])">
            <summary>
            Calculates total resistance for resistors in parallel: <c>1/Rtotal = 1/R1 + 1/R2 + ...</c>
            </summary>
            <param name="resistors">Resistor values in ohms (Ω).</param>
            <returns>Total parallel resistance in ohms (Ω).</returns>
            <example>
            double total = ResistorCalculator.Parallel(10, 20); // 6.67 Ohms
            </example>
        </member>
        <member name="T:CircuitTool.ResistorCalculator.ResistorNetworkResult">
            <summary>
            Result of series/parallel resistor network analysis
            </summary>
        </member>
        <member name="T:CircuitTool.ResistorCalculator.ResistorAnalysis">
            <summary>
            Individual resistor analysis in a network
            </summary>
        </member>
        <member name="T:CircuitTool.ResistorCalculator.ResistorNetwork">
            <summary>
            Complex resistor network configuration
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.AnalyzeSeriesNetwork(System.Double[],System.Double,System.Double[])">
            <summary>
            Analyze series resistor network with applied voltage
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.AnalyzeParallelNetwork(System.Double[],System.Double,System.Double[])">
            <summary>
            Analyze parallel resistor network with applied voltage
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.SeriesParallelCombination(CircuitTool.ResistorCalculator.ResistorNetwork)">
            <summary>
            Calculate series-parallel combination resistance
            </summary>
        </member>
        <member name="T:CircuitTool.ResistorCalculator.ResistorCombinationResult">
            <summary>
            Find resistor combinations to achieve target resistance
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.FindResistorCombinations(System.Double,System.String,System.Int32)">
            <summary>
            Find best resistor combination for target value using standard values
            </summary>
        </member>
        <member name="T:CircuitTool.ResistorCalculator.VoltageDividerResult">
            <summary>
            Calculate voltage divider with load analysis
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.AnalyzeVoltageDivider(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Analyze voltage divider with load effects
            </summary>
        </member>
        <member name="M:CircuitTool.ResistorCalculator.GetStandardResistorValues(System.String)">
            <summary>
            Get standard resistor values for specified series
            </summary>
        </member>
        <member name="T:CircuitTool.RFCalculator">
            <summary>
            Provides calculations for RF (Radio Frequency) and microwave circuit design.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double wavelength = RFCalculator.Wavelength(2.4e9); // 0.125m for 2.4 GHz
            double vswr = RFCalculator.VSWR(0.5); // VSWR from reflection coefficient
            double rl = RFCalculator.ReturnLoss(2.0); // Return loss from VSWR
            double pl = RFCalculator.PathLoss(2.4e9, 100); // Free space path loss
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.RFCalculator.Wavelength(System.Double)">
            <summary>
            Calculates wavelength from frequency using λ = c/f.
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <returns>Wavelength in meters (m).</returns>
            <example>
            double wavelength = RFCalculator.Wavelength(2.4e9); // 0.125m for 2.4 GHz
            </example>
        </member>
        <member name="M:CircuitTool.RFCalculator.Frequency(System.Double)">
            <summary>
            Calculates frequency from wavelength using f = c/λ.
            </summary>
            <param name="wavelength">Wavelength in meters (m).</param>
            <returns>Frequency in hertz (Hz).</returns>
        </member>
        <member name="M:CircuitTool.RFCalculator.VSWR(System.Double)">
            <summary>
            Calculates VSWR (Voltage Standing Wave Ratio) from reflection coefficient.
            </summary>
            <param name="reflectionCoefficient">Reflection coefficient magnitude (0-1).</param>
            <returns>VSWR value.</returns>
            <example>
            double vswr = RFCalculator.VSWR(0.5); // VSWR from reflection coefficient
            </example>
        </member>
        <member name="M:CircuitTool.RFCalculator.ReflectionCoefficient(System.Double)">
            <summary>
            Calculates reflection coefficient from VSWR.
            </summary>
            <param name="vswr">VSWR value (≥ 1).</param>
            <returns>Reflection coefficient magnitude.</returns>
        </member>
        <member name="M:CircuitTool.RFCalculator.ReturnLoss(System.Double)">
            <summary>
            Calculates return loss from VSWR in dB.
            </summary>
            <param name="vswr">VSWR value (≥ 1).</param>
            <returns>Return loss in dB.</returns>
            <example>
            double rl = RFCalculator.ReturnLoss(2.0); // Return loss from VSWR
            </example>
        </member>
        <member name="M:CircuitTool.RFCalculator.PathLoss(System.Double,System.Double)">
            <summary>
            Calculates free space path loss using Friis formula.
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="distance">Distance in meters (m).</param>
            <returns>Path loss in dB.</returns>
            <example>
            double pl = RFCalculator.PathLoss(2.4e9, 100); // Free space path loss
            </example>
        </member>
        <member name="M:CircuitTool.RFCalculator.SkinDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates skin depth for a conductor at given frequency.
            </summary>
            <param name="frequency">Frequency in hertz (Hz).</param>
            <param name="conductivity">Conductivity in S/m (default: copper).</param>
            <param name="permeability">Relative permeability (default: 1 for non-magnetic).</param>
            <returns>Skin depth in meters (m).</returns>
        </member>
        <member name="M:CircuitTool.RFCalculator.CharacteristicImpedance(System.Double,System.Double)">
            <summary>
            Calculates characteristic impedance of a transmission line.
            </summary>
            <param name="inductancePerLength">Inductance per unit length (H/m).</param>
            <param name="capacitancePerLength">Capacitance per unit length (F/m).</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
        </member>
        <member name="T:CircuitTool.SignalProcessingCalculator">
            <summary>
            Provides calculations for signal processing applications.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double snr = SignalProcessingCalculator.SNR(100, 10); // 20 dB
            double thd = SignalProcessingCalculator.THD(100, new[] {5.0, 3.0, 2.0}); // Total Harmonic Distortion
            double bw = SignalProcessingCalculator.NoiseBandwidth(1000, 0.707); // Noise bandwidth
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.SNR(System.Double,System.Double)">
            <summary>
            Calculates Signal-to-Noise Ratio (SNR) in dB.
            </summary>
            <param name="signalPower">Signal power in watts or any unit.</param>
            <param name="noisePower">Noise power in the same unit as signal power.</param>
            <returns>SNR in dB.</returns>
            <example>
            double snr = SignalProcessingCalculator.SNR(100, 10); // 20 dB
            </example>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.SINAD(System.Double,System.Double)">
            <summary>
            Calculates Signal-to-Noise and Distortion Ratio (SINAD) in dB.
            </summary>
            <param name="signalPower">Signal power in watts or any unit.</param>
            <param name="noiseAndDistortionPower">Combined noise and distortion power.</param>
            <returns>SINAD in dB.</returns>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.THD(System.Double,System.Double[])">
            <summary>
            Calculates Total Harmonic Distortion (THD) as a percentage.
            </summary>
            <param name="fundamentalAmplitude">Amplitude of the fundamental frequency.</param>
            <param name="harmonicAmplitudes">Array of harmonic amplitudes.</param>
            <returns>THD as a percentage.</returns>
            <example>
            double thd = SignalProcessingCalculator.THD(100, new[] {5.0, 3.0, 2.0}); // Total Harmonic Distortion
            </example>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.DynamicRange(System.Double,System.Double)">
            <summary>
            Calculates the dynamic range in dB.
            </summary>
            <param name="maxSignal">Maximum signal level.</param>
            <param name="noiseFloor">Noise floor level.</param>
            <returns>Dynamic range in dB.</returns>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.ENOB(System.Double)">
            <summary>
            Calculates the effective number of bits (ENOB) for an ADC.
            </summary>
            <param name="sinad">SINAD value in dB.</param>
            <returns>Effective number of bits.</returns>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.NoiseBandwidth(System.Double,System.Double)">
            <summary>
            Calculates noise bandwidth for a given filter.
            </summary>
            <param name="centerFrequency">Center frequency in Hz.</param>
            <param name="qualityFactor">Quality factor (Q) of the filter.</param>
            <returns>Noise bandwidth in Hz.</returns>
            <example>
            double bw = SignalProcessingCalculator.NoiseBandwidth(1000, 0.707); // Noise bandwidth
            </example>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.SettlingTime(System.Double,System.Double)">
            <summary>
            Calculates the settling time for a step response.
            </summary>
            <param name="timeConstant">Time constant in seconds.</param>
            <param name="accuracyPercent">Desired accuracy as a percentage (e.g., 1 for 1%).</param>
            <returns>Settling time in seconds.</returns>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.JohnsonNoise(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the Johnson noise voltage for a resistor.
            </summary>
            <param name="resistance">Resistance in ohms (Ω).</param>
            <param name="bandwidth">Bandwidth in Hz.</param>
            <param name="temperature">Temperature in Kelvin (default: 290K).</param>
            <returns>RMS noise voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.SignalProcessingCalculator.SlewRate(System.Double,System.Double)">
            <summary>
            Calculates the slew rate required for a given frequency and amplitude.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="amplitude">Peak amplitude in volts.</param>
            <returns>Required slew rate in V/s.</returns>
        </member>
        <member name="T:CircuitTool.TransformerCalculator">
            <summary>
            Provides calculations for transformer design and characteristics.
            </summary>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.SecondaryVoltage(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the secondary voltage using the transformer ratio Vs = Vp × (Ns / Np).
            </summary>
            <param name="primaryVoltage">Primary voltage in volts (V).</param>
            <param name="primaryTurns">Number of primary turns.</param>
            <param name="secondaryTurns">Number of secondary turns.</param>
            <returns>Secondary voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.PrimaryCurrent(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the primary current using the transformer ratio Ip = Is × (Ns / Np).
            </summary>
            <param name="secondaryCurrent">Secondary current in amperes (A).</param>
            <param name="primaryTurns">Number of primary turns.</param>
            <param name="secondaryTurns">Number of secondary turns.</param>
            <returns>Primary current in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.TurnsRatio(System.Double,System.Double)">
            <summary>
            Calculates the turns ratio of a transformer (Np / Ns).
            </summary>
            <param name="primaryTurns">Number of primary turns.</param>
            <param name="secondaryTurns">Number of secondary turns.</param>
            <returns>Turns ratio (unitless).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.VoltageRatio(System.Double,System.Double)">
            <summary>
            Calculates the voltage ratio of a transformer (Vp / Vs).
            </summary>
            <param name="primaryVoltage">Primary voltage in volts (V).</param>
            <param name="secondaryVoltage">Secondary voltage in volts (V).</param>
            <returns>Voltage ratio (unitless).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.Efficiency(System.Double,System.Double)">
            <summary>
            Calculates the transformer efficiency using η = (Pout / Pin) × 100%.
            </summary>
            <param name="outputPower">Output power in watts (W).</param>
            <param name="inputPower">Input power in watts (W).</param>
            <returns>Efficiency as a percentage (%).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.PowerLoss(System.Double,System.Double)">
            <summary>
            Calculates the power losses in a transformer.
            </summary>
            <param name="inputPower">Input power in watts (W).</param>
            <param name="outputPower">Output power in watts (W).</param>
            <returns>Power losses in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.Regulation(System.Double,System.Double)">
            <summary>
            Calculates the regulation of a transformer using Regulation = ((Vnl - Vfl) / Vfl) × 100%.
            </summary>
            <param name="noLoadVoltage">No-load voltage in volts (V).</param>
            <param name="fullLoadVoltage">Full-load voltage in volts (V).</param>
            <returns>Regulation as a percentage (%).</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.RequiredSecondaryTurns(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the required number of secondary turns for a desired voltage.
            </summary>
            <param name="primaryVoltage">Primary voltage in volts (V).</param>
            <param name="secondaryVoltage">Desired secondary voltage in volts (V).</param>
            <param name="primaryTurns">Number of primary turns.</param>
            <returns>Required number of secondary turns.</returns>
        </member>
        <member name="M:CircuitTool.TransformerCalculator.ApparentPower(System.Double,System.Double)">
            <summary>
            Calculates the apparent power rating of a transformer.
            </summary>
            <param name="voltage">Voltage in volts (V).</param>
            <param name="current">Current in amperes (A).</param>
            <returns>Apparent power in volt-amperes (VA).</returns>
        </member>
        <member name="T:CircuitTool.TransmissionLineCalculator">
            <summary>
            Provides calculations for transmission line analysis and design.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double z0 = TransmissionLineCalculator.CharacteristicImpedance(100e-9, 100e-12); // 31.6 ohms
            double vel = TransmissionLineCalculator.PropagationVelocity(2.2); // Velocity factor
            double delay = TransmissionLineCalculator.PropagationDelay(0.1, 2.2); // Time delay
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.CharacteristicImpedance(System.Double,System.Double)">
            <summary>
            Calculates characteristic impedance of a transmission line.
            </summary>
            <param name="inductancePerLength">Inductance per unit length (H/m).</param>
            <param name="capacitancePerLength">Capacitance per unit length (F/m).</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
            <example>
            double z0 = TransmissionLineCalculator.CharacteristicImpedance(100e-9, 100e-12); // 31.6 ohms
            </example>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.PropagationVelocity(System.Double,System.Double)">
            <summary>
            Calculates propagation velocity in a transmission line.
            </summary>
            <param name="relativePermittivity">Relative permittivity (εr) of the dielectric.</param>
            <param name="relativePermeability">Relative permeability (μr) of the material (default: 1).</param>
            <returns>Propagation velocity in m/s.</returns>
            <example>
            double vel = TransmissionLineCalculator.PropagationVelocity(2.2); // Velocity factor
            </example>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.PropagationDelay(System.Double,System.Double,System.Double)">
            <summary>
            Calculates propagation delay for a transmission line.
            </summary>
            <param name="length">Length of the transmission line in meters.</param>
            <param name="relativePermittivity">Relative permittivity (εr) of the dielectric.</param>
            <param name="relativePermeability">Relative permeability (μr) of the material (default: 1).</param>
            <returns>Propagation delay in seconds.</returns>
            <example>
            double delay = TransmissionLineCalculator.PropagationDelay(0.1, 2.2); // Time delay
            </example>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.CoaxialImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates coaxial cable characteristic impedance.
            </summary>
            <param name="outerDiameter">Outer conductor inner diameter in meters.</param>
            <param name="innerDiameter">Inner conductor diameter in meters.</param>
            <param name="relativePermittivity">Relative permittivity of dielectric (default: 1).</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.MicrostripImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates microstrip characteristic impedance (simple formula).
            </summary>
            <param name="width">Trace width in meters.</param>
            <param name="height">Dielectric height in meters.</param>
            <param name="relativePermittivity">Relative permittivity of substrate.</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.StriplineImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates stripline characteristic impedance.
            </summary>
            <param name="width">Trace width in meters.</param>
            <param name="height">Dielectric height in meters.</param>
            <param name="relativePermittivity">Relative permittivity of substrate.</param>
            <returns>Characteristic impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.ReflectionCoefficient(System.Double,System.Double)">
            <summary>
            Calculates reflection coefficient at a load.
            </summary>
            <param name="loadImpedance">Load impedance in ohms (Ω).</param>
            <param name="characteristicImpedance">Characteristic impedance of line in ohms (Ω).</param>
            <returns>Complex reflection coefficient magnitude.</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.InputImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates input impedance of a transmission line.
            </summary>
            <param name="loadImpedance">Load impedance in ohms (Ω).</param>
            <param name="characteristicImpedance">Characteristic impedance in ohms (Ω).</param>
            <param name="electricalLength">Electrical length in radians.</param>
            <returns>Input impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.ElectricalLength(System.Double,System.Double,System.Double)">
            <summary>
            Calculates electrical length from physical length.
            </summary>
            <param name="physicalLength">Physical length in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="relativePermittivity">Relative permittivity of dielectric.</param>
            <returns>Electrical length in radians.</returns>
        </member>
        <member name="M:CircuitTool.TransmissionLineCalculator.TransmissionLoss(System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates losses in a transmission line.
            </summary>
            <param name="length">Length of transmission line in meters.</param>
            <param name="attenuationConstant">Attenuation constant in Np/m or dB/m.</param>
            <param name="inDecibels">True if attenuation constant is in dB/m, false if in Np/m.</param>
            <returns>Total loss in dB.</returns>
        </member>
        <member name="T:CircuitTool.WattsVoltsAmpsOhmsCalculator">
            <summary>
            Provides quick conversions between watts, volts, amps, and ohms.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double w = WattsVoltsAmpsOhmsCalculator.Watts(12, 2); // 24W
            double v = WattsVoltsAmpsOhmsCalculator.Volts(24, 2); // 12V
            double a = WattsVoltsAmpsOhmsCalculator.Amps(24, 12); // 2A
            double r = WattsVoltsAmpsOhmsCalculator.Ohms(12, 2); // 6 Ohms
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.WattsVoltsAmpsOhmsCalculator.Watts(System.Double,System.Double)">
            <summary>
            Calculates power in watts from volts and amps: <c>W = V × A</c>.
            </summary>
            <param name="volts">Voltage in volts (V).</param>
            <param name="amps">Current in amperes (A).</param>
            <returns>Power in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.WattsVoltsAmpsOhmsCalculator.Volts(System.Double,System.Double)">
            <summary>
            Calculates voltage from watts and amps: <c>V = W / A</c>.
            </summary>
            <param name="watts">Power in watts (W).</param>
            <param name="amps">Current in amperes (A).</param>
            <returns>Voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.WattsVoltsAmpsOhmsCalculator.Amps(System.Double,System.Double)">
            <summary>
            Calculates current from watts and volts: <c>A = W / V</c>.
            </summary>
            <param name="watts">Power in watts (W).</param>
            <param name="volts">Voltage in volts (V).</param>
            <returns>Current in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.WattsVoltsAmpsOhmsCalculator.Ohms(System.Double,System.Double)">
            <summary>
            Calculates resistance from volts and amps: <c>R = V / A</c>.
            </summary>
            <param name="volts">Voltage in volts (V).</param>
            <param name="amps">Current in amperes (A).</param>
            <returns>Resistance in ohms (Ω).</returns>
        </member>
        <member name="T:CircuitTool.WirelessCalculator">
            <summary>
            Provides calculations for wireless communication systems and protocols.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double linkBudget = WirelessCalculator.LinkBudget(20, -90, 5); // Link budget calculation
            double bitrate = WirelessCalculator.ShannonCapacity(1e6, 20); // Shannon capacity
            double ber = WirelessCalculator.BERFromEbN0(10, ModulationType.BPSK); // Bit error rate
            </code>
            </remarks>
        </member>
        <member name="T:CircuitTool.WirelessCalculator.ModulationType">
            <summary>
            Modulation types for BER calculations.
            </summary>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.LinkBudget(System.Double,System.Double,System.Double)">
            <summary>
            Calculates link budget for wireless communication.
            </summary>
            <param name="transmitPowerDbm">Transmit power in dBm.</param>
            <param name="receiverSensitivityDbm">Receiver sensitivity in dBm.</param>
            <param name="systemMarginDb">System margin in dB.</param>
            <returns>Available path loss budget in dB.</returns>
            <example>
            double linkBudget = WirelessCalculator.LinkBudget(20, -90, 5); // Link budget calculation
            </example>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.ShannonCapacity(System.Double,System.Double)">
            <summary>
            Calculates Shannon channel capacity.
            </summary>
            <param name="bandwidth">Channel bandwidth in Hz.</param>
            <param name="snrDb">Signal-to-noise ratio in dB.</param>
            <returns>Maximum data rate in bits per second.</returns>
            <example>
            double bitrate = WirelessCalculator.ShannonCapacity(1e6, 20); // Shannon capacity
            </example>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.BERFromEbN0(System.Double,CircuitTool.WirelessCalculator.ModulationType)">
            <summary>
            Calculates bit error rate (BER) from Eb/N0.
            </summary>
            <param name="ebN0Db">Energy per bit to noise spectral density ratio in dB.</param>
            <param name="modulation">Modulation type.</param>
            <returns>Bit error rate.</returns>
            <example>
            double ber = WirelessCalculator.BERFromEbN0(10, ModulationType.BPSK); // Bit error rate
            </example>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.EbN0FromBER(System.Double,CircuitTool.WirelessCalculator.ModulationType)">
            <summary>
            Calculates required Eb/N0 for target BER.
            </summary>
            <param name="targetBer">Target bit error rate.</param>
            <param name="modulation">Modulation type.</param>
            <returns>Required Eb/N0 in dB.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.AntennaGainForEIRP(System.Double,System.Double)">
            <summary>
            Calculates antenna gain required for a given EIRP.
            </summary>
            <param name="eirpDbm">Effective Isotropic Radiated Power in dBm.</param>
            <param name="transmitPowerDbm">Transmit power in dBm.</param>
            <returns>Required antenna gain in dBi.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.ReceivedSignalStrength(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates received signal strength (RSS) using Friis equation.
            </summary>
            <param name="transmitPowerDbm">Transmit power in dBm.</param>
            <param name="transmitGainDbi">Transmit antenna gain in dBi.</param>
            <param name="receiveGainDbi">Receive antenna gain in dBi.</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="distance">Distance in meters.</param>
            <returns>Received signal strength in dBm.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.DataRate(System.Double,System.Int32)">
            <summary>
            Calculates data rate from symbol rate and modulation order.
            </summary>
            <param name="symbolRate">Symbol rate in symbols per second.</param>
            <param name="bitsPerSymbol">Bits per symbol (log2 of modulation order).</param>
            <returns>Data rate in bits per second.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.SpectralEfficiency(System.Double,System.Double)">
            <summary>
            Calculates spectral efficiency.
            </summary>
            <param name="dataRate">Data rate in bits per second.</param>
            <param name="bandwidth">Bandwidth in Hz.</param>
            <returns>Spectral efficiency in bits per second per Hz.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.ProcessingGain(System.Double,System.Double)">
            <summary>
            Calculates processing gain for spread spectrum systems.
            </summary>
            <param name="chipRate">Chip rate in chips per second.</param>
            <param name="dataRate">Data rate in bits per second.</param>
            <returns>Processing gain in dB.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.FadeMargin(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates fade margin for wireless link.
            </summary>
            <param name="linkMargin">Available link margin in dB.</param>
            <param name="requiredAvailability">Required availability percentage (e.g., 99.9).</param>
            <param name="frequency">Frequency in GHz.</param>
            <param name="distance">Distance in km.</param>
            <returns>Fade margin in dB.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.VSWRFromReturnLoss(System.Double)">
            <summary>
            Calculates VSWR from return loss.
            </summary>
            <param name="returnLossDb">Return loss in dB.</param>
            <returns>VSWR value.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.Erfc(System.Double)">
            <summary>
            Complementary error function approximation.
            </summary>
            <param name="x">Input value.</param>
            <returns>Complementary error function value.</returns>
        </member>
        <member name="M:CircuitTool.WirelessCalculator.InverseErfc(System.Double)">
            <summary>
            Inverse complementary error function approximation.
            </summary>
            <param name="y">Input value (0 &lt; y &lt; 2).</param>
            <returns>Inverse complementary error function value.</returns>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.Component">
            <summary>
            Represents a circuit component
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Component.GetImpedance(System.Double)">
            <summary>
            Gets the impedance of this component at the specified frequency
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <returns>Complex impedance</returns>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.Component.Tolerance">
            <summary>
            Gets component tolerance for Monte Carlo analysis
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.Resistor">
            <summary>
            Represents a resistor component
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.Capacitor">
            <summary>
            Represents a capacitor component
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.Inductor">
            <summary>
            Represents an inductor component
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.ConnectionType">
            <summary>
            Represents how components are connected
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.ComponentConnection">
            <summary>
            Represents a connection between components
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.CircuitBuilder">
            <summary>
            Fluent API for building circuits
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.New">
            <summary>
            Starts building a new circuit
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.AddResistor(System.Double,System.String)">
            <summary>
            Adds a resistor to the circuit
            </summary>
            <param name="resistance">Resistance in ohms</param>
            <param name="name">Optional component name</param>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.AddCapacitor(System.Double,System.String)">
            <summary>
            Adds a capacitor to the circuit
            </summary>
            <param name="capacitance">Capacitance in farads</param>
            <param name="name">Optional component name</param>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.AddInductor(System.Double,System.String)">
            <summary>
            Adds an inductor to the circuit
            </summary>
            <param name="inductance">Inductance in henries</param>
            <param name="name">Optional component name</param>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.InSeriesWith">
            <summary>
            Sets the last added component to be in series with the next component
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.InParallelWith">
            <summary>
            Sets the last added component to be in parallel with the next component
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.WithTolerance(System.Double)">
            <summary>
            Sets component tolerance for all components
            </summary>
            <param name="tolerance">Tolerance as a fraction (e.g., 0.05 for 5%)</param>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.WithComponentTolerance(System.Double)">
            <summary>
            Sets tolerance for the last added component
            </summary>
            <param name="tolerance">Tolerance as a fraction (e.g., 0.05 for 5%)</param>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.CircuitBuilder.Build">
            <summary>
            Builds the circuit and returns the total impedance calculation
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.Circuit">
            <summary>
            Represents a complete circuit with analysis capabilities
            </summary>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.Circuit.Components">
            <summary>
            Gets all components in the circuit
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.CalculateImpedance(System.Double)">
            <summary>
            Calculates the total impedance of the circuit at the specified frequency
            </summary>
            <param name="frequency">Frequency in Hz</param>
            <returns>Total circuit impedance</returns>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.AnalyzeResponse(CircuitTool.ACVoltage,System.Double)">
            <summary>
            Calculates circuit response for a given input voltage
            </summary>
            <param name="inputVoltage">Input voltage (AC)</param>
            <param name="frequency">Frequency in Hz</param>
            <returns>Circuit response</returns>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.GetFrequencyResponse(System.Double,System.Double,System.Int32)">
            <summary>
            Performs frequency sweep analysis
            </summary>
            <param name="startFreq">Start frequency in Hz</param>
            <param name="stopFreq">Stop frequency in Hz</param>
            <param name="points">Number of points</param>
            <returns>Frequency response</returns>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.CalculateResonantFrequency">
            <summary>
            Calculates resonant frequency for RLC circuits
            </summary>
            <returns>Resonant frequency in Hz, or null if not applicable</returns>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.GetNominalValues">
            <summary>
            Gets component nominal values for Monte Carlo analysis
            </summary>
        </member>
        <member name="M:CircuitTool.CircuitBuilder.Circuit.GetTolerances">
            <summary>
            Gets component tolerances for Monte Carlo analysis
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.CircuitResponse">
            <summary>
            Represents the response of a circuit to an input signal
            </summary>
        </member>
        <member name="T:CircuitTool.CircuitBuilder.ComplexPower">
            <summary>
            Represents complex power (apparent, real, and reactive power)
            </summary>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.ComplexPower.RealPower">
            <summary>
            Real power in watts
            </summary>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.ComplexPower.ReactivePower">
            <summary>
            Reactive power in VARs
            </summary>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.ComplexPower.ApparentPower">
            <summary>
            Apparent power in VA
            </summary>
        </member>
        <member name="P:CircuitTool.CircuitBuilder.ComplexPower.PowerFactor">
            <summary>
            Power factor
            </summary>
        </member>
        <member name="T:CircuitTool.DocumentationExamples">
            <summary>
            Interactive documentation examples demonstrating common use cases
            </summary>
        </member>
        <member name="T:CircuitTool.DocumentationExamples.BasicOhmsLaw">
            <summary>
            Basic Ohm's Law calculations example
            </summary>
        </member>
        <member name="T:CircuitTool.DocumentationExamples.CircuitBuilding">
            <summary>
            Circuit building example using basic calculations
            </summary>
        </member>
        <member name="T:CircuitTool.DocumentationExamples.ACAnalysis">
            <summary>
            AC circuit analysis example
            </summary>
        </member>
        <member name="T:CircuitTool.DocumentationExamples.EnergyCalculations">
            <summary>
            Energy calculation example
            </summary>
        </member>
        <member name="M:CircuitTool.DocumentationExamples.RunAllExamples">
            <summary>
            Runs all documentation examples
            </summary>
        </member>
        <member name="T:CircuitTool.InteractiveTutorials">
            <summary>
            Interactive tutorial system
            </summary>
        </member>
        <member name="T:CircuitTool.UseCaseTemplates">
            <summary>
            Common use case templates for quick implementation
            </summary>
        </member>
        <member name="T:CircuitTool.UseCaseTemplates.VoltageDividerDesign">
            <summary>
            Template for designing a voltage divider
            </summary>
        </member>
        <member name="T:CircuitTool.UseCaseTemplates.FilterDesign">
            <summary>
            Template for RC filter design
            </summary>
        </member>
        <member name="T:CircuitTool.UseCaseTemplates.LEDResistorCalculator">
            <summary>
            Template for LED current limiting resistor
            </summary>
        </member>
        <member name="T:CircuitTool.Electromagnetics.ElectromagneticsCalculator">
            <summary>
            Provides calculations for electromagnetic field analysis and antenna design.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double efield = ElectromagneticsCalculator.ElectricFieldStrength(100, 1000); // Electric field
            double power = ElectromagneticsCalculator.PowerDensity(377, 1.0); // Power density
            double gain = ElectromagneticsCalculator.AntennaGain(10, 0.8); // Antenna gain
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.ElectricFieldStrength(System.Double,System.Double,System.Double)">
            <summary>
            Calculates electric field strength from power and distance.
            </summary>
            <param name="power">Transmitted power in watts (W).</param>
            <param name="distance">Distance from source in meters (m).</param>
            <param name="gain">Antenna gain (linear, not dB). Default is 1 (isotropic).</param>
            <returns>Electric field strength in V/m.</returns>
            <example>
            double efield = ElectromagneticsCalculator.ElectricFieldStrength(100, 1000); // Electric field
            </example>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.MagneticFieldStrength(System.Double,System.Double)">
            <summary>
            Calculates magnetic field strength from electric field.
            </summary>
            <param name="electricField">Electric field strength in V/m.</param>
            <param name="impedance">Wave impedance in ohms (default: free space).</param>
            <returns>Magnetic field strength in A/m.</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.PowerDensity(System.Double,System.Double)">
            <summary>
            Calculates power density from electric field.
            </summary>
            <param name="impedance">Wave impedance in ohms.</param>
            <param name="electricField">Electric field strength in V/m.</param>
            <returns>Power density in W/m².</returns>
            <example>
            double power = ElectromagneticsCalculator.PowerDensity(377, 1.0); // Power density
            </example>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.FarFieldDistance(System.Double,System.Double)">
            <summary>
            Calculates far-field distance for an antenna.
            </summary>
            <param name="antennaSize">Largest dimension of antenna in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <returns>Far-field distance in meters.</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.AntennaGain(System.Double,System.Double)">
            <summary>
            Calculates antenna gain from directivity and efficiency.
            </summary>
            <param name="directivity">Directivity (linear, not dB).</param>
            <param name="efficiency">Antenna efficiency (0-1).</param>
            <returns>Antenna gain (linear).</returns>
            <example>
            double gain = ElectromagneticsCalculator.AntennaGain(10, 0.8); // Antenna gain
            </example>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.EffectiveAperture(System.Double,System.Double)">
            <summary>
            Calculates effective aperture of an antenna.
            </summary>
            <param name="gain">Antenna gain (linear, not dB).</param>
            <param name="frequency">Frequency in Hz.</param>
            <returns>Effective aperture in square meters (m²).</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.DipoleLength(System.Double,System.Double)">
            <summary>
            Calculates resonant length of a dipole antenna.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="velocityFactor">Velocity factor (default: 0.95 for wire in air).</param>
            <returns>Resonant length in meters.</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.ShortDipoleRadiationResistance(System.Double,System.Double)">
            <summary>
            Calculates radiation resistance of a short dipole.
            </summary>
            <param name="length">Antenna length in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <returns>Radiation resistance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.SkinDepth(System.Double,System.Double,System.Double)">
            <summary>
            Calculates skin depth in a conductor.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="conductivity">Conductivity in S/m (default: copper).</param>
            <param name="relativePermeability">Relative permeability (default: 1).</param>
            <returns>Skin depth in meters.</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.WaveImpedance(System.Double,System.Double)">
            <summary>
            Calculates wave impedance in a medium.
            </summary>
            <param name="relativePermittivity">Relative permittivity.</param>
            <param name="relativePermeability">Relative permeability (default: 1).</param>
            <returns>Wave impedance in ohms (Ω).</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.FriisTransmission(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates Friis transmission formula for power received.
            </summary>
            <param name="transmittedPower">Transmitted power in watts (W).</param>
            <param name="transmitGain">Transmit antenna gain (linear).</param>
            <param name="receiveGain">Receive antenna gain (linear).</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="distance">Distance between antennas in meters.</param>
            <returns>Received power in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.LoopInductance(System.Double,System.Double)">
            <summary>
            Calculates loop antenna inductance.
            </summary>
            <param name="radius">Loop radius in meters.</param>
            <param name="wireRadius">Wire radius in meters.</param>
            <returns>Inductance in henries (H).</returns>
        </member>
        <member name="M:CircuitTool.Electromagnetics.ElectromagneticsCalculator.MonopoleImpedance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates monopole antenna impedance.
            </summary>
            <param name="height">Monopole height in meters.</param>
            <param name="frequency">Frequency in Hz.</param>
            <param name="groundRadius">Ground plane radius in meters (if applicable).</param>
            <returns>Input impedance in ohms (Ω).</returns>
        </member>
        <member name="T:CircuitTool.ArduinoTools">
            <summary>
            Provides Arduino-specific calculations and utilities
            </summary>
        </member>
        <member name="M:CircuitTool.ArduinoTools.AnalogToVoltage(System.Int32,System.Double)">
            <summary>
            Converts analog reading to voltage for Arduino Uno (10-bit ADC, 5V reference)
            </summary>
            <param name="analogReading">Analog reading value (0-1023)</param>
            <param name="referenceVoltage">Reference voltage (default 5V for Arduino Uno)</param>
            <returns>Voltage value</returns>
        </member>
        <member name="M:CircuitTool.ArduinoTools.VoltageToAnalog(System.Double,System.Double)">
            <summary>
            Converts voltage to analog reading for Arduino Uno
            </summary>
            <param name="voltage">Voltage value</param>
            <param name="referenceVoltage">Reference voltage (default 5V for Arduino Uno)</param>
            <returns>Analog reading value (0-1023)</returns>
        </member>
        <member name="M:CircuitTool.ArduinoTools.ServoAngleToPulseWidth(System.Double)">
            <summary>
            Calculates delay time between servo pulses for specific angle
            </summary>
            <param name="angle">Servo angle in degrees (0-180)</param>
            <returns>Pulse width in microseconds</returns>
        </member>
        <member name="M:CircuitTool.ArduinoTools.CalculateCurrentConsumption(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculates current consumption for Arduino projects
            </summary>
            <param name="cpuCurrent">CPU current consumption (mA)</param>
            <param name="digitalPins">Number of active digital pins</param>
            <param name="analogPins">Number of active analog pins</param>
            <param name="additionalCurrent">Additional current from external components (mA)</param>
            <returns>Total current consumption in mA</returns>
        </member>
        <member name="M:CircuitTool.ArduinoTools.CalculatePWMFrequency(System.Int32,System.Double)">
            <summary>
            Calculates PWM frequency for Arduino Timer
            </summary>
            <param name="prescaler">Timer prescaler value</param>
            <param name="clockFrequency">Arduino clock frequency in Hz (default 16MHz)</param>
            <returns>PWM frequency in Hz</returns>
        </member>
        <member name="T:CircuitTool.CommunicationProtocolTools">
            <summary>
            Provides tools and calculators for various hardware communication protocols
            </summary>
        </member>
        <member name="T:CircuitTool.CommunicationProtocolTools.I2CConfig">
            <summary>
            I2C communication parameters
            </summary>
        </member>
        <member name="T:CircuitTool.CommunicationProtocolTools.SPIConfig">
            <summary>
            SPI communication parameters
            </summary>
        </member>
        <member name="T:CircuitTool.CommunicationProtocolTools.SPIMode">
            <summary>
            SPI communication modes
            </summary>
        </member>
        <member name="T:CircuitTool.CommunicationProtocolTools.UARTConfig">
            <summary>
            UART communication parameters
            </summary>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.CalculateI2CPullUpResistors(CircuitTool.CommunicationProtocolTools.I2CConfig)">
            <summary>
            Calculates optimal I2C pull-up resistor values
            </summary>
            <param name="config">I2C configuration</param>
            <returns>Recommended pull-up resistance range</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.CalculateI2CTiming(CircuitTool.CommunicationProtocolTools.I2CConfig)">
            <summary>
            Calculates I2C bus timing parameters
            </summary>
            <param name="config">I2C configuration</param>
            <returns>Timing parameters in nanoseconds</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.CalculateMaxSPIFrequency(CircuitTool.CommunicationProtocolTools.SPIConfig)">
            <summary>
            Calculates maximum SPI clock frequency based on cable length and capacitance
            </summary>
            <param name="config">SPI configuration</param>
            <returns>Maximum recommended clock frequency</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.CalculateUARTBitErrorRate(CircuitTool.CommunicationProtocolTools.UARTConfig,System.Double)">
            <summary>
            Calculates UART bit error rate based on clock accuracy
            </summary>
            <param name="config">UART configuration</param>
            <param name="clockAccuracyPpm">Clock accuracy in parts per million</param>
            <returns>Estimated bit error rate</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.GenerateI2CScannerCode(System.Int32,System.Int32)">
            <summary>
            Generates I2C device scanning code for Arduino
            </summary>
            <param name="startAddress">Start address for scanning (default 8)</param>
            <param name="endAddress">End address for scanning (default 119)</param>
            <returns>Arduino I2C scanner code</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.GenerateSPITestCode(CircuitTool.CommunicationProtocolTools.SPIConfig,System.Int32)">
            <summary>
            Generates SPI communication test code for Arduino
            </summary>
            <param name="config">SPI configuration</param>
            <param name="chipSelectPin">Chip select pin number</param>
            <returns>Arduino SPI test code</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.CalculateSPIClockDivider(System.Int32)">
            <summary>
            Calculates Arduino SPI clock divider for given frequency
            </summary>
            <param name="desiredFrequency">Desired SPI frequency</param>
            <returns>Clock divider value</returns>
        </member>
        <member name="M:CircuitTool.CommunicationProtocolTools.GenerateProtocolComparison(CircuitTool.CommunicationProtocolTools.I2CConfig,CircuitTool.CommunicationProtocolTools.SPIConfig,CircuitTool.CommunicationProtocolTools.UARTConfig)">
            <summary>
            Generates protocol comparison report
            </summary>
            <param name="i2cConfig">I2C configuration</param>
            <param name="spiConfig">SPI configuration</param>
            <param name="uartConfig">UART configuration</param>
            <returns>Comparison report</returns>
        </member>
        <member name="T:CircuitTool.ComPortTools">
            <summary>
            Provides comprehensive COM port utilities for hardware communication and monitoring
            </summary>
        </member>
        <member name="F:CircuitTool.ComPortTools.CommonBaudRates">
            <summary>
            Common baud rates for serial communication
            </summary>
        </member>
        <member name="F:CircuitTool.ComPortTools.ArduinoBaudRates">
            <summary>
            Arduino standard baud rates
            </summary>
        </member>
        <member name="F:CircuitTool.ComPortTools.ESP32BaudRates">
            <summary>
            ESP32 standard baud rates
            </summary>
        </member>
        <member name="T:CircuitTool.ComPortTools.SerialParity">
            <summary>
            Serial port parity options
            </summary>
        </member>
        <member name="T:CircuitTool.ComPortTools.SerialStopBits">
            <summary>
            Serial port stop bits options
            </summary>
        </member>
        <member name="T:CircuitTool.ComPortTools.SerialHandshake">
            <summary>
            Serial port handshake options
            </summary>
        </member>
        <member name="T:CircuitTool.ComPortTools.SerialConfig">
            <summary>
            Serial port configuration
            </summary>
        </member>
        <member name="T:CircuitTool.ComPortTools.SerialPortInfo">
            <summary>
            Serial port information
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.GetAvailablePorts">
            <summary>
            Gets all available COM ports with detailed information
            </summary>
            <returns>List of available serial ports</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.DetectDeviceType(System.String,System.String)">
            <summary>
            Detects likely device type based on port information
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.TestPortAvailability(System.String,System.Int32,System.Int32)">
            <summary>
            Tests if a port is available and responsive
            </summary>
            <param name="portName">COM port name</param>
            <param name="baudRate">Baud rate to test</param>
            <param name="timeoutMs">Timeout in milliseconds</param>
            <returns>True if port is available and responsive</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.ConvertParity(CircuitTool.ComPortTools.SerialParity)">
            <summary>
            Converts custom parity enum to System.IO.Ports.Parity
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.ConvertStopBits(CircuitTool.ComPortTools.SerialStopBits)">
            <summary>
            Converts custom stop bits enum to System.IO.Ports.StopBits
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.ConvertHandshake(CircuitTool.ComPortTools.SerialHandshake)">
            <summary>
            Converts custom handshake enum to System.IO.Ports.Handshake
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.AutoDetectBaudRate(System.String,System.Int32[],System.Int32)">
            <summary>
            Auto-detects the correct baud rate for a device
            </summary>
            <param name="portName">COM port name</param>
            <param name="testBaudRates">Array of baud rates to test</param>
            <param name="testTimeMs">Time to test each baud rate</param>
            <returns>Detected baud rate or -1 if none found</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.MonitorPort(CircuitTool.ComPortTools.SerialConfig,System.Int32,System.Action{System.String})">
            <summary>
            Monitors a COM port and logs data
            </summary>
            <param name="config">Serial port configuration</param>
            <param name="durationSeconds">Duration to monitor in seconds</param>
            <param name="dataCallback">Callback for received data</param>
            <returns>Monitoring results</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.TestATCommands(System.String,System.Int32)">
            <summary>
            Sends AT commands to test modem/ESP devices
            </summary>
            <param name="portName">COM port name</param>
            <param name="baudRate">Baud rate</param>
            <returns>AT command test results</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.GenerateArduinoSerialCode(System.Int32,System.Boolean)">
            <summary>
            Generates Arduino serial monitor code
            </summary>
            <param name="baudRate">Serial baud rate</param>
            <param name="includeDebug">Include debug output</param>
            <returns>Arduino code</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.GenerateESP32SerialCode(System.Int32,System.Boolean)">
            <summary>
            Generates ESP32 serial communication code
            </summary>
            <param name="baudRate">Serial baud rate</param>
            <param name="includeWiFi">Include WiFi status in output</param>
            <returns>ESP32 code</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.CalculateBufferSizes(System.Int32,System.Double,System.Int32)">
            <summary>
            Calculates optimal buffer sizes for serial communication
            </summary>
            <param name="baudRate">Baud rate</param>
            <param name="expectedDataRate">Expected data rate in bytes/second</param>
            <param name="latencyMs">Maximum acceptable latency in milliseconds</param>
            <returns>Recommended buffer sizes</returns>
        </member>
        <member name="M:CircuitTool.ComPortTools.NextPowerOfTwo(System.Int32)">
            <summary>
            Finds the next power of 2 greater than or equal to the input
            </summary>
        </member>
        <member name="M:CircuitTool.ComPortTools.GenerateDiagnosticReport">
            <summary>
            Generates COM port diagnostic report
            </summary>
            <returns>Comprehensive diagnostic report</returns>
        </member>
        <member name="T:CircuitTool.ESP32Tools">
            <summary>
            Provides ESP32-specific calculations and utilities
            </summary>
        </member>
        <member name="M:CircuitTool.ESP32Tools.AnalogToVoltage(System.Int32,System.Double)">
            <summary>
            Converts analog reading to voltage for ESP32 (12-bit ADC, 3.3V reference)
            </summary>
            <param name="analogReading">Analog reading value (0-4095)</param>
            <param name="referenceVoltage">Reference voltage (default 3.3V for ESP32)</param>
            <returns>Voltage value</returns>
        </member>
        <member name="M:CircuitTool.ESP32Tools.VoltageToAnalog(System.Double,System.Double)">
            <summary>
            Converts voltage to analog reading for ESP32
            </summary>
            <param name="voltage">Voltage value</param>
            <param name="referenceVoltage">Reference voltage (default 3.3V for ESP32)</param>
            <returns>Analog reading value (0-4095)</returns>
        </member>
        <member name="M:CircuitTool.ESP32Tools.CalculateWiFiPowerConsumption(CircuitTool.WiFiMode)">
            <summary>
            Calculates WiFi power consumption based on operation mode
            </summary>
            <param name="mode">WiFi operation mode</param>
            <returns>Current consumption in mA</returns>
        </member>
        <member name="M:CircuitTool.ESP32Tools.CalculateTotalCurrentConsumption(System.Int32,CircuitTool.WiFiMode,System.Boolean,System.Double)">
            <summary>
            Calculates total ESP32 current consumption
            </summary>
            <param name="cpuFrequency">CPU frequency in MHz</param>
            <param name="wifiMode">WiFi operation mode</param>
            <param name="bluetoothActive">Whether Bluetooth is active</param>
            <param name="additionalCurrent">Additional current from external components (mA)</param>
            <returns>Total current consumption in mA</returns>
        </member>
        <member name="M:CircuitTool.ESP32Tools.CalculateBatteryLife(System.Double,System.Double,System.Double)">
            <summary>
            Calculates battery life for ESP32 projects
            </summary>
            <param name="batteryCapacity">Battery capacity in mAh</param>
            <param name="averageCurrent">Average current consumption in mA</param>
            <param name="efficiency">Battery efficiency factor (0.7-0.9)</param>
            <returns>Battery life in hours</returns>
        </member>
        <member name="M:CircuitTool.ESP32Tools.CalculateTouchThreshold(System.Int32,System.Double)">
            <summary>
            Calculates ESP32 touch sensor threshold
            </summary>
            <param name="baselineReading">Baseline touch reading</param>
            <param name="sensitivity">Sensitivity factor (0.1-0.9, higher = more sensitive)</param>
            <returns>Touch threshold value</returns>
        </member>
        <member name="T:CircuitTool.WiFiMode">
            <summary>
            ESP32 WiFi operation modes
            </summary>
        </member>
        <member name="T:CircuitTool.HardwareDebuggingTools">
            <summary>
            Provides hardware debugging and troubleshooting tools for embedded systems
            </summary>
        </member>
        <member name="T:CircuitTool.HardwareDebuggingTools.ProblemCategory">
            <summary>
            Common hardware problem categories
            </summary>
        </member>
        <member name="T:CircuitTool.HardwareDebuggingTools.DebugResult">
            <summary>
            Debugging test result
            </summary>
        </member>
        <member name="T:CircuitTool.HardwareDebuggingTools.HardwareConfig">
            <summary>
            Hardware configuration for debugging
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.PerformDiagnostics(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Performs comprehensive hardware diagnostic tests
            </summary>
            <param name="config">Hardware configuration</param>
            <param name="symptoms">Observed symptoms</param>
            <returns>List of diagnostic results</returns>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.TestPowerSupply(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Tests power supply related issues
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.TestClockAndTiming(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Tests clock and timing related issues
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.TestCommunication(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Tests communication related issues
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.TestSignalIntegrity(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Tests signal integrity issues
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.TestThermal(CircuitTool.HardwareDebuggingTools.HardwareConfig,System.Collections.Generic.List{System.String})">
            <summary>
            Tests thermal related issues
            </summary>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.GenerateArduinoDiagnosticSketch(System.Collections.Generic.List{System.String})">
            <summary>
            Generates Arduino diagnostic sketch
            </summary>
            <param name="includeTests">List of tests to include</param>
            <returns>Arduino diagnostic code</returns>
        </member>
        <member name="M:CircuitTool.HardwareDebuggingTools.GenerateTroubleshootingGuide(System.Collections.Generic.List{System.String})">
            <summary>
            Generates troubleshooting guide based on symptoms
            </summary>
            <param name="symptoms">List of observed symptoms</param>
            <returns>Troubleshooting guide</returns>
        </member>
        <member name="T:CircuitTool.MotorControlCalculator">
            <summary>
            Provides specialized calculations for DC motor control and analysis
            </summary>
        </member>
        <member name="T:CircuitTool.MotorControlCalculator.MotorType">
            <summary>
            Motor types for different calculation methods
            </summary>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateHBridgeCurrent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates H-bridge current requirements for DC motor
            </summary>
            <param name="motorVoltage">Motor rated voltage</param>
            <param name="motorCurrent">Motor rated current</param>
            <param name="stallCurrent">Motor stall current</param>
            <param name="safetyFactor">Safety factor (typically 1.5-2.0)</param>
            <returns>Required H-bridge current rating</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateMotorDriverThermal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates motor driver heat sink requirements
            </summary>
            <param name="motorCurrent">Motor current in amperes</param>
            <param name="driverRdsOn">Driver MOSFET RDS(on) in ohms</param>
            <param name="ambientTemp">Ambient temperature in °C</param>
            <param name="maxJunctionTemp">Maximum junction temperature in °C</param>
            <returns>Required thermal resistance in °C/W</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateStepperResolution(System.Int32,System.Int32,System.Double)">
            <summary>
            Calculates stepper motor step resolution
            </summary>
            <param name="stepsPerRevolution">Motor steps per revolution</param>
            <param name="microsteps">Microstepping factor</param>
            <param name="gearRatio">Gear reduction ratio (1 = no gears)</param>
            <returns>Angular resolution in degrees per step</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateEncoderResolution(System.Double,System.Double)">
            <summary>
            Calculates encoder resolution requirements
            </summary>
            <param name="desiredAccuracy">Desired position accuracy in degrees</param>
            <param name="gearRatio">Gear reduction ratio</param>
            <returns>Required encoder pulses per revolution</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculatePIDGains(System.Double,System.Double,System.Double)">
            <summary>
            Calculates PID controller gains for motor position control
            </summary>
            <param name="motorInertia">Motor + load inertia in kg⋅m²</param>
            <param name="motorTorqueConstant">Motor torque constant in Nm/A</param>
            <param name="desiredBandwidth">Desired closed-loop bandwidth in Hz</param>
            <returns>PID gains (Kp, Ki, Kd)</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateRampTime(System.Double,System.Double)">
            <summary>
            Calculates motor acceleration/deceleration ramp
            </summary>
            <param name="targetSpeed">Target speed in RPM</param>
            <param name="acceleration">Acceleration in RPM/s</param>
            <returns>Ramp time in seconds</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateRegenerativePower(System.Double,System.Double,System.Double)">
            <summary>
            Calculates regenerative braking power
            </summary>
            <param name="motorSpeed">Motor speed in RPM</param>
            <param name="motorTorque">Braking torque in Nm</param>
            <param name="efficiency">Motor efficiency (0-1)</param>
            <returns>Regenerated power in watts</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.CalculateCurrentLimit(CircuitTool.MotorControlCalculator.MotorType,System.Double,System.Double,System.Double)">
            <summary>
            Calculates current limit for motor protection
            </summary>
            <param name="motorType">Type of motor</param>
            <param name="ratedCurrent">Motor rated current</param>
            <param name="thermalTimeConstant">Motor thermal time constant in seconds</param>
            <param name="operationTime">Expected operation time in seconds</param>
            <returns>Safe current limit</returns>
        </member>
        <member name="M:CircuitTool.MotorControlCalculator.GenerateControlCode(CircuitTool.MotorControlCalculator.MotorType,System.String)">
            <summary>
            Generates motor control code template
            </summary>
            <param name="motorType">Type of motor</param>
            <param name="controlInterface">Control interface (PWM, SPI, etc.)</param>
            <returns>Code template string</returns>
        </member>
        <member name="T:CircuitTool.PCBDesignCalculator">
            <summary>
            Provides calculations and utilities for PCB design and layout
            </summary>
        </member>
        <member name="T:CircuitTool.PCBDesignCalculator.PCBStackup">
            <summary>
            PCB layer stackup types
            </summary>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateTraceWidth(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates trace width for current carrying capacity
            </summary>
            <param name="current">Current in amperes</param>
            <param name="copperThickness">Copper thickness in oz (typically 1 or 2)</param>
            <param name="temperatureRise">Allowable temperature rise in °C</param>
            <param name="isInternal">True if trace is internal layer</param>
            <returns>Required trace width in mils</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateViaCurrent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates via current carrying capacity
            </summary>
            <param name="viaDiameter">Via barrel diameter in mils</param>
            <param name="viaLength">Via length (PCB thickness) in mils</param>
            <param name="copperThickness">Plating thickness in mils</param>
            <param name="temperatureRise">Allowable temperature rise in °C</param>
            <returns>Maximum current capacity in amperes</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateDifferentialImpedance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates differential pair impedance for high-speed signals
            </summary>
            <param name="traceWidth">Trace width in mils</param>
            <param name="traceSpacing">Spacing between traces in mils</param>
            <param name="dielectricHeight">Height above ground plane in mils</param>
            <param name="dielectricConstant">PCB dielectric constant (typically 4.2-4.8)</param>
            <returns>Differential impedance in ohms</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateConductorResistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates PCB conductor resistance
            </summary>
            <param name="length">Conductor length in inches</param>
            <param name="width">Conductor width in mils</param>
            <param name="thickness">Copper thickness in oz</param>
            <param name="temperature">Operating temperature in °C</param>
            <returns>Resistance in ohms</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculatePCBCapacitance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates PCB capacitance between layers
            </summary>
            <param name="area">Overlap area in square inches</param>
            <param name="dielectricThickness">Dielectric thickness in mils</param>
            <param name="dielectricConstant">Dielectric constant</param>
            <returns>Capacitance in picofarads</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateMinimumAnnularRing(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates minimum annular ring for vias
            </summary>
            <param name="drillDiameter">Drill diameter in mils</param>
            <param name="pcbClass">PCB class (1, 2, or 3)</param>
            <param name="layerCount">Number of layers</param>
            <returns>Minimum annular ring in mils</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateSolderMaskExpansion(System.Double,System.Double)">
            <summary>
            Calculates solder mask expansion
            </summary>
            <param name="padDimension">Pad dimension in mils</param>
            <param name="pitchDistance">Component pitch in mils</param>
            <returns>Recommended solder mask expansion in mils</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.GenerateDesignRules(CircuitTool.PCBDesignCalculator.PCBStackup,System.Int32,System.Double)">
            <summary>
            Generates PCB design rules summary
            </summary>
            <param name="stackup">PCB layer stackup</param>
            <param name="pcbClass">PCB class</param>
            <param name="signalFrequency">Maximum signal frequency in MHz</param>
            <returns>Design rules text</returns>
        </member>
        <member name="M:CircuitTool.PCBDesignCalculator.CalculateThermalResistance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates PCB thermal resistance
            </summary>
            <param name="copperArea">Copper area in square inches</param>
            <param name="copperThickness">Copper thickness in oz</param>
            <param name="airflow">Air flow velocity in m/s (0 for natural convection)</param>
            <returns>Thermal resistance in °C/W</returns>
        </member>
        <member name="T:CircuitTool.PowerSupplyCalculator">
            <summary>
            Provides calculations and utilities for power supply design and analysis
            </summary>
        </member>
        <member name="T:CircuitTool.PowerSupplyCalculator.PSUTopology">
            <summary>
            Power supply topology types
            </summary>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateLinearRegulator(System.Double,System.Double,System.Double)">
            <summary>
            Calculates linear regulator heat dissipation and efficiency
            </summary>
            <param name="inputVoltage">Input voltage</param>
            <param name="outputVoltage">Output voltage</param>
            <param name="outputCurrent">Output current</param>
            <returns>Power dissipation and efficiency</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateBuckInductor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates buck converter inductor value
            </summary>
            <param name="inputVoltage">Input voltage</param>
            <param name="outputVoltage">Output voltage</param>
            <param name="outputCurrent">Output current</param>
            <param name="switchingFrequency">Switching frequency in Hz</param>
            <param name="currentRipple">Acceptable current ripple (0.1 = 10%)</param>
            <returns>Required inductor value in henries</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateBuckCapacitor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates buck converter output capacitor
            </summary>
            <param name="outputCurrent">Output current</param>
            <param name="switchingFrequency">Switching frequency in Hz</param>
            <param name="voltageRipple">Acceptable voltage ripple in volts</param>
            <param name="currentRipple">Inductor current ripple (0.1 = 10%)</param>
            <returns>Required capacitance in farads</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateBoostInductor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates boost converter inductor value
            </summary>
            <param name="inputVoltage">Input voltage</param>
            <param name="outputVoltage">Output voltage</param>
            <param name="outputCurrent">Output current</param>
            <param name="switchingFrequency">Switching frequency in Hz</param>
            <param name="currentRipple">Acceptable current ripple (0.1 = 10%)</param>
            <returns>Required inductor value in henries</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateFlybackTurnsRatio(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates flyback transformer turns ratio
            </summary>
            <param name="inputVoltageMin">Minimum input voltage</param>
            <param name="inputVoltageMax">Maximum input voltage</param>
            <param name="outputVoltage">Output voltage</param>
            <param name="forwardVoltageOutput">Output diode forward voltage</param>
            <param name="maxDutyCycle">Maximum duty cycle (typically 0.45)</param>
            <returns>Primary to secondary turns ratio</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.EstimateEfficiency(CircuitTool.PowerSupplyCalculator.PSUTopology,System.Double,System.Double,System.Double)">
            <summary>
            Calculates power supply efficiency at different loads
            </summary>
            <param name="topology">Power supply topology</param>
            <param name="inputVoltage">Input voltage</param>
            <param name="outputVoltage">Output voltage</param>
            <param name="loadPercentage">Load as percentage of maximum (0-1)</param>
            <returns>Estimated efficiency</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateCurrentSenseResistor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates current sense resistor value
            </summary>
            <param name="maxCurrent">Maximum current to sense</param>
            <param name="senseVoltage">Desired sense voltage (typically 0.1-0.5V)</param>
            <param name="tolerance">Resistor tolerance (0.01 = 1%)</param>
            <returns>Sense resistor value and power rating</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateEMIFilter(System.Double,System.Double,System.Double)">
            <summary>
            Calculates EMI filter components for switching power supply
            </summary>
            <param name="switchingFrequency">Switching frequency in Hz</param>
            <param name="inputCurrent">Input current</param>
            <param name="cableLength">Input cable length in meters</param>
            <returns>Common mode and differential mode filter values</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.CalculateHoldupTime(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates holdup time for power supply
            </summary>
            <param name="inputCapacitance">Input capacitance in farads</param>
            <param name="nominalVoltage">Nominal input voltage</param>
            <param name="minimumVoltage">Minimum operating voltage</param>
            <param name="outputPower">Output power in watts</param>
            <param name="efficiency">Power supply efficiency (0-1)</param>
            <returns>Holdup time in seconds</returns>
        </member>
        <member name="M:CircuitTool.PowerSupplyCalculator.GenerateDesignChecklist(CircuitTool.PowerSupplyCalculator.PSUTopology,System.Double,System.Boolean)">
            <summary>
            Generates power supply design checklist
            </summary>
            <param name="topology">Power supply topology</param>
            <param name="outputPower">Output power in watts</param>
            <param name="isIsolated">Whether isolation is required</param>
            <returns>Design checklist</returns>
        </member>
        <member name="T:CircuitTool.RaspberryPiTools">
            <summary>
            Provides calculations and utilities for Raspberry Pi projects
            </summary>
        </member>
        <member name="T:CircuitTool.RaspberryPiTools.GPIOPin">
            <summary>
            GPIO pin mapping for different Raspberry Pi models
            </summary>
        </member>
        <member name="T:CircuitTool.RaspberryPiTools.PWMConfig">
            <summary>
            PWM configuration settings
            </summary>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.CalculateLEDResistor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates current limiting resistor for LED connected to GPIO pin
            </summary>
            <param name="ledVoltage">LED forward voltage in volts</param>
            <param name="ledCurrent">LED forward current in amperes</param>
            <param name="gpioVoltage">GPIO output voltage (typically 3.3V)</param>
            <returns>Required resistor value in ohms</returns>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.CalculateMotorPWM(System.Double,System.Double,System.Double)">
            <summary>
            Calculates PWM settings for motor speed control
            </summary>
            <param name="motorVoltage">Motor rated voltage</param>
            <param name="supplyVoltage">Power supply voltage</param>
            <param name="speedPercentage">Desired speed as percentage (0-100)</param>
            <returns>PWM duty cycle (0-1)</returns>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.CalculatePullResistor(System.Double,System.Double,System.Double)">
            <summary>
            Calculates pull-up/pull-down resistor value for GPIO inputs
            </summary>
            <param name="inputVoltage">Input signal voltage</param>
            <param name="leakageCurrent">Maximum leakage current (typically 1µA)</param>
            <param name="noiseMargin">Desired noise margin voltage (typically 0.5V)</param>
            <returns>Recommended resistor value in ohms</returns>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.CalculatePowerConsumption(CircuitTool.RaspberryPiModel,System.Double)">
            <summary>
            Calculates power consumption for Raspberry Pi project
            </summary>
            <param name="piModel">Pi model power consumption</param>
            <param name="peripheralPower">Additional peripheral power in watts</param>
            <returns>Total power consumption in watts</returns>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.GenerateI2CScanCode">
            <summary>
            Generates I2C address scanning code
            </summary>
            <returns>Python code for I2C address scanning</returns>
        </member>
        <member name="M:CircuitTool.RaspberryPiTools.CalculateMaxSPIFrequency(System.Double,System.Double)">
            <summary>
            Calculates SPI clock frequency limits
            </summary>
            <param name="cableLength">SPI cable length in meters</param>
            <param name="loadCapacitance">Load capacitance in farads</param>
            <returns>Maximum safe SPI frequency in Hz</returns>
        </member>
        <member name="T:CircuitTool.RaspberryPiModel">
            <summary>
            Raspberry Pi model enumeration
            </summary>
        </member>
        <member name="T:CircuitTool.SensorInterfaceCalculator">
            <summary>
            Provides calculations and utilities for sensor interfacing and signal conditioning
            </summary>
        </member>
        <member name="T:CircuitTool.SensorInterfaceCalculator.SensorType">
            <summary>
            Common sensor types and their characteristics
            </summary>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.CalculateResistiveSensorDivider(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates voltage divider for resistive sensor conditioning
            </summary>
            <param name="sensorResistanceMin">Minimum sensor resistance</param>
            <param name="sensorResistanceMax">Maximum sensor resistance</param>
            <param name="supplyVoltage">Supply voltage</param>
            <param name="targetVoltageRange">Desired output voltage range</param>
            <returns>Reference resistor value and bias voltage</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.ThermistorTemperature(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates thermistor temperature from resistance using Steinhart-Hart equation
            </summary>
            <param name="resistance">Thermistor resistance in ohms</param>
            <param name="a">Steinhart-Hart coefficient A</param>
            <param name="b">Steinhart-Hart coefficient B</param>
            <param name="c">Steinhart-Hart coefficient C</param>
            <returns>Temperature in Celsius</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.RTDTemperature(System.Double,System.Double,System.Double)">
            <summary>
            Calculates RTD temperature from resistance
            </summary>
            <param name="resistance">RTD resistance in ohms</param>
            <param name="r0">RTD resistance at 0°C (typically 100Ω for PT100)</param>
            <param name="alpha">Temperature coefficient (0.00385 for PT100)</param>
            <returns>Temperature in Celsius</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.CalculateAmplifierGain(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Calculates amplifier gain for sensor signal conditioning
            </summary>
            <param name="sensorSignalMin">Minimum sensor signal voltage</param>
            <param name="sensorSignalMax">Maximum sensor signal voltage</param>
            <param name="adcReferenceVoltage">ADC reference voltage</param>
            <param name="adcResolution">ADC resolution in bits</param>
            <param name="utilizationFactor">Desired ADC range utilization (0-1)</param>
            <returns>Required amplifier gain</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.CalculateSensorFilter(System.Double,System.Double,System.Double)">
            <summary>
            Calculates low-pass filter for sensor noise reduction
            </summary>
            <param name="signalFrequency">Maximum signal frequency of interest</param>
            <param name="noiseFrequency">Noise frequency to attenuate</param>
            <param name="attenuationDb">Desired attenuation in dB</param>
            <returns>Filter resistance and capacitance values</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.StrainGaugeBridgeOutput(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates Wheatstone bridge output for strain gauge
            </summary>
            <param name="strain">Applied strain (µε)</param>
            <param name="gaugeFactor">Strain gauge factor (typically 2.0)</param>
            <param name="bridgeVoltage">Bridge excitation voltage</param>
            <param name="nominalResistance">Gauge nominal resistance</param>
            <returns>Bridge output voltage</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.CalculateADCResolution(System.Double,System.Double,System.Double)">
            <summary>
            Calculates ADC resolution requirements for sensor measurement
            </summary>
            <param name="sensorRange">Full-scale sensor output range</param>
            <param name="requiredAccuracy">Required measurement accuracy</param>
            <param name="noiseBits">Effective noise in LSBs (typically 1-3)</param>
            <returns>Required ADC resolution in bits</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.CalculateLinearCalibration(System.Double[],System.Double[])">
            <summary>
            Calculates sensor calibration coefficients (linear)
            </summary>
            <param name="rawValues">Array of raw sensor readings</param>
            <param name="referenceValues">Array of reference values</param>
            <returns>Calibration slope and offset</returns>
        </member>
        <member name="M:CircuitTool.SensorInterfaceCalculator.GenerateSensorCode(CircuitTool.SensorInterfaceCalculator.SensorType,System.String)">
            <summary>
            Generates sensor interface code template
            </summary>
            <param name="sensorType">Type of sensor</param>
            <param name="interface_">Interface type (Analog, I2C, SPI)</param>
            <returns>Code template</returns>
        </member>
        <member name="T:CircuitTool.Mathematics.WindowType">
            <summary>
            Window function types for spectral analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Mathematics.FourierTransform">
            <summary>
            Provides basic Fourier transform utilities for circuit analysis
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.DFT(System.Numerics.Complex[])">
            <summary>
            Computes the Discrete Fourier Transform (DFT) of a complex signal
            </summary>
            <param name="signal">Input signal</param>
            <returns>Frequency domain representation</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.IDFT(System.Numerics.Complex[])">
            <summary>
            Computes the Inverse Discrete Fourier Transform (IDFT)
            </summary>
            <param name="spectrum">Frequency domain representation</param>
            <returns>Time domain signal</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.DFT(System.Double[])">
            <summary>
            Computes the DFT of a real-valued signal
            </summary>
            <param name="signal">Real-valued input signal</param>
            <returns>Complex frequency domain representation</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.PowerSpectralDensity(System.Double[])">
            <summary>
            Computes power spectral density from a signal
            </summary>
            <param name="signal">Input signal</param>
            <returns>Power spectral density</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.ExtractHarmonics(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Extracts harmonic content from a periodic signal
            </summary>
            <param name="signal">Periodic signal samples</param>
            <param name="fundamentalFrequency">Fundamental frequency in Hz</param>
            <param name="sampleRate">Sample rate in Hz</param>
            <param name="maxHarmonics">Maximum number of harmonics to extract</param>
            <returns>Harmonic magnitudes and phases</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.CalculateTHD(System.Double[])">
            <summary>
            Calculates Total Harmonic Distortion (THD) from harmonic content
            </summary>
            <param name="harmonicMagnitudes">Harmonic magnitudes (fundamental at index 1)</param>
            <returns>THD as a ratio (0-1)</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.FourierTransform.ApplyWindow(System.Double[],CircuitTool.Mathematics.WindowType)">
            <summary>
            Applies a window function to reduce spectral leakage
            </summary>
            <param name="signal">Input signal</param>
            <param name="windowType">Type of window to apply</param>
            <returns>Windowed signal</returns>
        </member>
        <member name="T:CircuitTool.Mathematics.MatrixOperations">
            <summary>
            Provides matrix operations for circuit analysis, particularly for nodal analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix">
            <summary>
            Represents a complex matrix for AC circuit analysis
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.Identity(System.Int32)">
            <summary>
            Creates an identity matrix
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.op_Multiply(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,CircuitTool.Mathematics.MatrixOperations.ComplexMatrix)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.op_Addition(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,CircuitTool.Mathematics.MatrixOperations.ComplexMatrix)">
            <summary>
            Matrix addition
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.op_Subtraction(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,CircuitTool.Mathematics.MatrixOperations.ComplexMatrix)">
            <summary>
            Matrix subtraction
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.op_Multiply(System.Numerics.Complex,CircuitTool.Mathematics.MatrixOperations.ComplexMatrix)">
            <summary>
            Scalar multiplication
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.op_Multiply(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,System.Numerics.Complex)">
            <summary>
            Scalar multiplication
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.Transpose">
            <summary>
            Transposes the matrix
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.Determinant">
            <summary>
            Calculates the determinant (for square matrices only)
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.ComplexMatrix.SolveLinearSystem(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,System.Numerics.Complex[])">
            <summary>
            Solves the linear system Ax = b using Gaussian elimination
            </summary>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.CreateNodalAdmittanceMatrix(System.Numerics.Complex[],System.ValueTuple{System.Int32,System.Int32}[],System.Int32)">
            <summary>
            Creates a nodal admittance matrix for circuit analysis
            </summary>
            <param name="impedances">Array of impedance values</param>
            <param name="connections">Array of node connections (from, to)</param>
            <param name="numNodes">Number of nodes in the circuit</param>
            <returns>Nodal admittance matrix</returns>
        </member>
        <member name="M:CircuitTool.Mathematics.MatrixOperations.SolveNodalAnalysis(CircuitTool.Mathematics.MatrixOperations.ComplexMatrix,System.Numerics.Complex[])">
            <summary>
            Solves a nodal analysis problem
            </summary>
            <param name="admittanceMatrix">Nodal admittance matrix</param>
            <param name="currentVector">Current injection vector</param>
            <returns>Node voltages</returns>
        </member>
        <member name="T:CircuitTool.Async.AsyncCalculations">
            <summary>
            Provides asynchronous versions of complex electrical calculations
            </summary>
        </member>
        <member name="M:CircuitTool.Async.AsyncCalculations.MonteCarloAnalysisAsync(System.Double[],System.Double[],System.Int32,System.Func{System.Double[],System.Double},System.Threading.CancellationToken)">
            <summary>
            Performs Monte Carlo analysis of circuit with component tolerances asynchronously
            </summary>
            <param name="nominalValues">Nominal component values</param>
            <param name="tolerances">Component tolerances (e.g., 0.05 for 5%)</param>
            <param name="iterations">Number of Monte Carlo iterations</param>
            <param name="calculator">Function to calculate circuit response</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Monte Carlo analysis results</returns>
        </member>
        <member name="M:CircuitTool.Async.AsyncCalculations.FrequencySweepAsync(System.Double,System.Double,System.Int32,System.Func{System.Double,System.Numerics.Complex},System.Threading.CancellationToken)">
            <summary>
            Performs frequency sweep analysis asynchronously
            </summary>
            <param name="startFrequency">Start frequency in Hz</param>
            <param name="stopFrequency">Stop frequency in Hz</param>
            <param name="points">Number of frequency points</param>
            <param name="calculator">Function to calculate response at each frequency</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Frequency response results</returns>
        </member>
        <member name="M:CircuitTool.Async.AsyncCalculations.HarmonicAnalysisAsync(System.Double,System.Int32,System.Func{System.Double,System.Numerics.Complex},System.Threading.CancellationToken)">
            <summary>
            Performs harmonic analysis asynchronously
            </summary>
            <param name="fundamentalFrequency">Fundamental frequency in Hz</param>
            <param name="harmonics">Number of harmonics to analyze</param>
            <param name="calculator">Function to calculate response at each harmonic</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Harmonic analysis results</returns>
        </member>
        <member name="M:CircuitTool.Async.AsyncCalculations.ThermalAnalysisAsync(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Threading.CancellationToken)">
            <summary>
            Performs thermal analysis with iterative calculations asynchronously
            </summary>
            <param name="power">Power dissipation in watts</param>
            <param name="thermalResistance">Thermal resistance in °C/W</param>
            <param name="ambientTemperature">Ambient temperature in °C</param>
            <param name="temperatureCoefficient">Temperature coefficient</param>
            <param name="maxIterations">Maximum number of iterations</param>
            <param name="tolerance">Convergence tolerance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Thermal analysis results</returns>
        </member>
        <member name="T:CircuitTool.Async.MonteCarloResult">
            <summary>
            Results from Monte Carlo analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Async.FrequencyResponse">
            <summary>
            Results from frequency response analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Async.HarmonicAnalysis">
            <summary>
            Results from harmonic analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Async.ThermalResult">
            <summary>
            Results from thermal analysis
            </summary>
        </member>
        <member name="T:CircuitTool.Performance.BulkOperations">
            <summary>
            Provides memory-efficient bulk operations for circuit calculations
            </summary>
        </member>
        <member name="M:CircuitTool.Performance.BulkOperations.BulkParallelResistance(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Performs bulk parallel resistance calculations with minimal allocations
            </summary>
            <param name="resistanceSets">Sets of resistances to calculate in parallel</param>
            <returns>Equivalent parallel resistances</returns>
        </member>
        <member name="M:CircuitTool.Performance.BulkOperations.BulkFrequencyResponse(System.Double[],System.ValueTuple{System.Double,System.Double,System.Double}[])">
            <summary>
            Calculates frequency response for multiple circuits efficiently
            </summary>
            <param name="frequencies">Frequency points</param>
            <param name="circuits">Circuit parameters (R, L, C)</param>
            <returns>Frequency response magnitudes</returns>
        </member>
        <member name="M:CircuitTool.Performance.BulkOperations.BulkPowerCalculation(System.Double[],System.Double[],System.Double[])">
            <summary>
            Efficient batch processing of power calculations
            </summary>
            <param name="voltages">Voltage values</param>
            <param name="currents">Current values</param>
            <param name="phases">Phase angles in radians</param>
            <returns>Complex power values (real, reactive, apparent)</returns>
        </member>
        <member name="M:CircuitTool.Performance.BulkOperations.StreamingCalculation``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0[],``1[]},System.Int32)">
            <summary>
            Memory-efficient streaming calculation for large datasets
            </summary>
            <param name="data">Input data stream</param>
            <param name="calculator">Calculation function</param>
            <param name="batchSize">Size of processing batches</param>
            <returns>Results stream</returns>
        </member>
        <member name="T:CircuitTool.Performance.CalculationCache">
            <summary>
            Provides caching for expensive electrical calculations
            </summary>
        </member>
        <member name="P:CircuitTool.Performance.CalculationCache.MaxCacheSize">
            <summary>
            Gets or sets the maximum cache size
            </summary>
        </member>
        <member name="M:CircuitTool.Performance.CalculationCache.GetOrCompute``1(System.String,System.Func{``0})">
            <summary>
            Gets a cached result or computes and caches it
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="key">Cache key</param>
            <param name="factory">Function to compute the result if not cached</param>
            <returns>Cached or computed result</returns>
        </member>
        <member name="M:CircuitTool.Performance.CalculationCache.CreateKey(System.Object[])">
            <summary>
            Creates a cache key from multiple parameters
            </summary>
            <param name="parameters">Parameters to include in the key</param>
            <returns>Cache key string</returns>
        </member>
        <member name="M:CircuitTool.Performance.CalculationCache.Clear">
            <summary>
            Clears the entire cache
            </summary>
        </member>
        <member name="M:CircuitTool.Performance.CalculationCache.TrimCache">
            <summary>
            Removes old entries when cache size exceeds limit
            </summary>
        </member>
        <member name="T:CircuitTool.Performance.PerformanceMonitor">
            <summary>
            Performance monitoring and optimization utilities
            </summary>
        </member>
        <member name="M:CircuitTool.Performance.PerformanceMonitor.MeasureOperation``1(System.String,System.Func{``0})">
            <summary>
            Measures and records execution time for a function
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="operationName">Name of the operation for tracking</param>
            <param name="operation">Function to execute and measure</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:CircuitTool.Performance.PerformanceMonitor.GetStats(System.String)">
            <summary>
            Gets performance statistics for an operation
            </summary>
            <param name="operationName">Name of the operation</param>
            <returns>Performance statistics</returns>
        </member>
        <member name="M:CircuitTool.Performance.PerformanceMonitor.GetAllStats">
            <summary>
            Gets all performance statistics
            </summary>
            <returns>Dictionary of all performance metrics</returns>
        </member>
        <member name="M:CircuitTool.Performance.PerformanceMonitor.ClearStats">
            <summary>
            Clears all performance metrics
            </summary>
        </member>
        <member name="T:CircuitTool.Performance.VectorizedCalculations">
            <summary>
            Provides performance-optimized calculations using SIMD operations
            </summary>
        </member>
        <member name="M:CircuitTool.Performance.VectorizedCalculations.ParallelResistanceVectorized(System.Double[])">
            <summary>
            Calculates multiple parallel resistances using SIMD operations
            </summary>
            <param name="resistances">Array of resistance values</param>
            <returns>Equivalent parallel resistance</returns>
        </member>
        <member name="M:CircuitTool.Performance.VectorizedCalculations.RMSVectorized(System.Double[][])">
            <summary>
            Calculates RMS values for multiple signals using SIMD operations
            </summary>
            <param name="signals">Array of signal arrays</param>
            <returns>RMS values for each signal</returns>
        </member>
        <member name="M:CircuitTool.Performance.VectorizedCalculations.ImpedanceMagnitudesVectorized(System.Double[],System.Double[])">
            <summary>
            Vectorized impedance magnitude calculation for multiple AC circuits
            </summary>
            <param name="resistances">Array of resistance values</param>
            <param name="reactances">Array of reactance values</param>
            <returns>Array of impedance magnitudes</returns>
        </member>
        <member name="M:CircuitTool.Performance.VectorizedCalculations.RealPowerVectorized(System.Double[],System.Double[],System.Double[])">
            <summary>
            Vectorized power calculation for multiple circuits
            </summary>
            <param name="voltages">Array of voltage values</param>
            <param name="currents">Array of current values</param>
            <param name="powerFactors">Array of power factor values</param>
            <returns>Array of real power values</returns>
        </member>
        <member name="T:CircuitTool.PowerElectronics.MotorDriveCalculator">
            <summary>
            Provides calculations for motor drive and control systems.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double torque = MotorDriveCalculator.TorqueFromPower(750, 1800); // Motor torque
            double speed = MotorDriveCalculator.SynchronousSpeed(50, 4); // Synchronous speed
            double slip = MotorDriveCalculator.Slip(1800, 1750); // Motor slip
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.TorqueFromPower(System.Double,System.Double)">
            <summary>
            Calculates motor torque from power and speed.
            </summary>
            <param name="power">Mechanical power in watts (W).</param>
            <param name="speed">Rotational speed in RPM.</param>
            <returns>Torque in Newton-meters (N⋅m).</returns>
            <example>
            double torque = MotorDriveCalculator.TorqueFromPower(750, 1800); // Motor torque
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.PowerFromTorque(System.Double,System.Double)">
            <summary>
            Calculates mechanical power from torque and speed.
            </summary>
            <param name="torque">Torque in Newton-meters (N⋅m).</param>
            <param name="speed">Rotational speed in RPM.</param>
            <returns>Mechanical power in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.SynchronousSpeed(System.Double,System.Int32)">
            <summary>
            Calculates synchronous speed for AC motor.
            </summary>
            <param name="frequency">Supply frequency in Hz.</param>
            <param name="poles">Number of poles.</param>
            <returns>Synchronous speed in RPM.</returns>
            <example>
            double speed = MotorDriveCalculator.SynchronousSpeed(50, 4); // Synchronous speed
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.Slip(System.Double,System.Double)">
            <summary>
            Calculates motor slip.
            </summary>
            <param name="synchronousSpeed">Synchronous speed in RPM.</param>
            <param name="actualSpeed">Actual rotor speed in RPM.</param>
            <returns>Slip as a percentage.</returns>
            <example>
            double slip = MotorDriveCalculator.Slip(1800, 1750); // Motor slip
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.RotorFrequency(System.Double,System.Double)">
            <summary>
            Calculates rotor frequency for induction motor.
            </summary>
            <param name="slip">Slip as a percentage.</param>
            <param name="supplyFrequency">Supply frequency in Hz.</param>
            <returns>Rotor frequency in Hz.</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.Efficiency(System.Double,System.Double)">
            <summary>
            Calculates motor efficiency.
            </summary>
            <param name="mechanicalPower">Mechanical power output in watts (W).</param>
            <param name="electricalPower">Electrical power input in watts (W).</param>
            <returns>Efficiency as a percentage.</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.VHzRatio(System.Double,System.Double)">
            <summary>
            Calculates V/Hz ratio for variable frequency drive.
            </summary>
            <param name="voltage">Motor voltage in volts (V).</param>
            <param name="frequency">Motor frequency in Hz.</param>
            <returns>V/Hz ratio.</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.VoltageForConstantVHz(System.Double,System.Double,System.Double)">
            <summary>
            Calculates required voltage for constant V/Hz operation.
            </summary>
            <param name="baseVoltage">Base (rated) voltage in volts (V).</param>
            <param name="baseFrequency">Base (rated) frequency in Hz.</param>
            <param name="operatingFrequency">Operating frequency in Hz.</param>
            <returns>Required voltage in volts (V).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.StartingTorque(System.Double,System.Double,System.Double)">
            <summary>
            Calculates starting torque for induction motor.
            </summary>
            <param name="voltage">Applied voltage in volts (V).</param>
            <param name="ratedVoltage">Rated voltage in volts (V).</param>
            <param name="ratedStartingTorque">Rated starting torque in N⋅m.</param>
            <returns>Starting torque at applied voltage in N⋅m.</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.MotorCurrent(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates motor current from power and power factor.
            </summary>
            <param name="power">Mechanical power in watts (W).</param>
            <param name="voltage">Line voltage in volts (V).</param>
            <param name="efficiency">Motor efficiency (0-1).</param>
            <param name="powerFactor">Power factor (0-1).</param>
            <param name="isThreePhase">True for three-phase motor, false for single-phase.</param>
            <returns>Motor current in amperes (A).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.PWMFrequency(System.Double,System.Double)">
            <summary>
            Calculates PWM switching frequency for motor drive.
            </summary>
            <param name="fundamentalFrequency">Fundamental output frequency in Hz.</param>
            <param name="carrierRatio">Carrier to fundamental frequency ratio (typically 20-100).</param>
            <returns>PWM switching frequency in Hz.</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.MotorDriveCalculator.ModulationIndex(System.Double,System.Double)">
            <summary>
            Calculates modulation index for PWM inverter.
            </summary>
            <param name="outputVoltage">Peak output voltage in volts (V).</param>
            <param name="dcBusVoltage">DC bus voltage in volts (V).</param>
            <returns>Modulation index (0-1).</returns>
        </member>
        <member name="T:CircuitTool.PowerElectronics.SMPSCalculator">
            <summary>
            Provides calculations for switching mode power supplies (SMPS) design.
            </summary>
            <remarks>
            <para>Example usage:</para>
            <code>
            double duty = SMPSCalculator.DutyCycle(12, 5); // Buck converter duty cycle
            double ripple = SMPSCalculator.OutputRipple(100e-6, 1, 100e3); // Output voltage ripple
            double inductance = SMPSCalculator.MinimumInductance(5, 2, 100e3, 0.3); // CCM inductance
            </code>
            </remarks>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.BuckDutyCycle(System.Double,System.Double)">
            <summary>
            Calculates duty cycle for a buck converter.
            </summary>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <returns>Duty cycle (0-1).</returns>
            <example>
            double duty = SMPSCalculator.DutyCycle(12, 5); // Buck converter duty cycle
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.BoostDutyCycle(System.Double,System.Double)">
            <summary>
            Calculates duty cycle for a boost converter.
            </summary>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <returns>Duty cycle (0-1).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.BuckBoostDutyCycle(System.Double,System.Double)">
            <summary>
            Calculates duty cycle for a buck-boost converter.
            </summary>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <returns>Duty cycle (0-1).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.MinimumInductanceBuck(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates minimum inductance for continuous conduction mode (CCM).
            </summary>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <param name="outputCurrent">Output current in amperes (A).</param>
            <param name="switchingFrequency">Switching frequency in Hz.</param>
            <param name="currentRippleFactor">Current ripple factor (ΔI/I, typically 0.2-0.4).</param>
            <returns>Minimum inductance in henries (H).</returns>
            <example>
            double inductance = SMPSCalculator.MinimumInductance(5, 2, 100e3, 0.3); // CCM inductance
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.OutputCapacitance(System.Double,System.Double,System.Double)">
            <summary>
            Calculates output capacitance for desired voltage ripple.
            </summary>
            <param name="outputCurrent">Output current in amperes (A).</param>
            <param name="switchingFrequency">Switching frequency in Hz.</param>
            <param name="voltageRipple">Desired voltage ripple in volts (V).</param>
            <returns>Required output capacitance in farads (F).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.OutputRipple(System.Double,System.Double,System.Double)">
            <summary>
            Calculates output voltage ripple.
            </summary>
            <param name="outputCapacitance">Output capacitance in farads (F).</param>
            <param name="outputCurrent">Output current in amperes (A).</param>
            <param name="switchingFrequency">Switching frequency in Hz.</param>
            <returns>Output voltage ripple in volts (V).</returns>
            <example>
            double ripple = SMPSCalculator.OutputRipple(100e-6, 1, 100e3); // Output voltage ripple
            </example>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.SwitchingLoss(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates switching losses in a MOSFET.
            </summary>
            <param name="voltage">Drain-source voltage in volts (V).</param>
            <param name="current">Drain current in amperes (A).</param>
            <param name="switchingFrequency">Switching frequency in Hz.</param>
            <param name="riseTime">Rise time in seconds.</param>
            <param name="fallTime">Fall time in seconds.</param>
            <returns>Switching power loss in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.ConductionLoss(System.Double,System.Double,System.Double)">
            <summary>
            Calculates conduction losses in a MOSFET.
            </summary>
            <param name="current">RMS current in amperes (A).</param>
            <param name="onResistance">On-state resistance in ohms (Ω).</param>
            <param name="dutyCycle">Duty cycle (0-1).</param>
            <returns>Conduction power loss in watts (W).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.FlybackTurnsRatio(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates transformer turns ratio for flyback converter.
            </summary>
            <param name="inputVoltageMin">Minimum input voltage in volts (V).</param>
            <param name="outputVoltage">Output voltage in volts (V).</param>
            <param name="forwardDrop">Forward voltage drop of output diode in volts (V).</param>
            <param name="maxDutyCycle">Maximum allowable duty cycle (typically 0.45-0.5).</param>
            <returns>Transformer turns ratio (Np/Ns).</returns>
        </member>
        <member name="M:CircuitTool.PowerElectronics.SMPSCalculator.FlybackMagnetizingInductance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates magnetizing inductance for flyback converter.
            </summary>
            <param name="inputVoltage">Input voltage in volts (V).</param>
            <param name="dutyCycle">Duty cycle (0-1).</param>
            <param name="switchingFrequency">Switching frequency in Hz.</param>
            <param name="peakCurrent">Peak magnetizing current in amperes (A).</param>
            <returns>Magnetizing inductance in henries (H).</returns>
        </member>
        <member name="T:CircuitTool.Serialization.CircuitSerialization">
            <summary>
            Provides JSON serialization support for circuit configurations
            </summary>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitSerialization.ToJson(CircuitTool.CircuitBuilder.Circuit)">
            <summary>
            Serializes a circuit to JSON format
            </summary>
            <param name="circuit">Circuit to serialize</param>
            <returns>JSON representation of the circuit</returns>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitSerialization.FromJson(System.String)">
            <summary>
            Deserializes a circuit from JSON format
            </summary>
            <param name="json">JSON representation of the circuit</param>
            <returns>Reconstructed circuit</returns>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitSerialization.ToXml(CircuitTool.CircuitBuilder.Circuit)">
            <summary>
            Serializes a circuit to XML format
            </summary>
            <param name="circuit">Circuit to serialize</param>
            <returns>XML representation of the circuit</returns>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitSerialization.FromXml(System.String)">
            <summary>
            Deserializes a circuit from XML format
            </summary>
            <param name="xml">XML representation of the circuit</param>
            <returns>Reconstructed circuit</returns>
        </member>
        <member name="T:CircuitTool.Serialization.CircuitImportExport">
            <summary>
            Extensions for circuit import/export functionality
            </summary>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitImportExport.ExportToFile(CircuitTool.CircuitBuilder.Circuit,System.String,CircuitTool.Serialization.ExportFormat)">
            <summary>
            Exports circuit configuration to file
            </summary>
            <param name="circuit">Circuit to export</param>
            <param name="filePath">File path for export</param>
            <param name="format">Export format (JSON or XML)</param>
        </member>
        <member name="M:CircuitTool.Serialization.CircuitImportExport.ImportFromFile(System.String,CircuitTool.Serialization.ExportFormat)">
            <summary>
            Imports circuit configuration from file
            </summary>
            <param name="filePath">File path to import from</param>
            <param name="format">Import format (JSON or XML)</param>
            <returns>Imported circuit</returns>
        </member>
        <member name="T:CircuitTool.Serialization.ExportFormat">
            <summary>
            Export/Import format options
            </summary>
        </member>
        <member name="T:CircuitTool.Units.CapacitanceUnit">
            <summary>
            Represents capacitance measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Picofarads">
            <summary>Picofarads (pF)</summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Nanofarads">
            <summary>Nanofarads (nF)</summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Microfarads">
            <summary>Microfarads (μF)</summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Millifarads">
            <summary>Millifarads (mF)</summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Farads">
            <summary>Farads (F)</summary>
        </member>
        <member name="F:CircuitTool.Units.CapacitanceUnit.Kilofarads">
            <summary>Kilofarads (kF)</summary>
        </member>
        <member name="T:CircuitTool.Units.Capacitance">
            <summary>
            Represents a strongly-typed capacitance measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Capacitance.#ctor(System.Double,CircuitTool.Units.CapacitanceUnit)">
            <summary>
            Creates a new capacitance measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Farads">
            <summary>
            Gets the capacitance value in farads
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Picofarads">
            <summary>
            Gets the capacitance value in picofarads
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Nanofarads">
            <summary>
            Gets the capacitance value in nanofarads
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Microfarads">
            <summary>
            Gets the capacitance value in microfarads
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Millifarads">
            <summary>
            Gets the capacitance value in millifarads
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Capacitance.Kilofarads">
            <summary>
            Gets the capacitance value in kilofarads
            </summary>
        </member>
        <member name="T:CircuitTool.Units.CurrentUnit">
            <summary>
            Represents current measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.CurrentUnit.Nanoamperes">
            <summary>Nanoamperes (nA)</summary>
        </member>
        <member name="F:CircuitTool.Units.CurrentUnit.Microamperes">
            <summary>Microamperes (μA)</summary>
        </member>
        <member name="F:CircuitTool.Units.CurrentUnit.Milliamperes">
            <summary>Milliamperes (mA)</summary>
        </member>
        <member name="F:CircuitTool.Units.CurrentUnit.Amperes">
            <summary>Amperes (A)</summary>
        </member>
        <member name="F:CircuitTool.Units.CurrentUnit.Kiloamperes">
            <summary>Kiloamperes (kA)</summary>
        </member>
        <member name="T:CircuitTool.Units.Current">
            <summary>
            Represents a strongly-typed current measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Current.#ctor(System.Double,CircuitTool.Units.CurrentUnit)">
            <summary>
            Creates a new current measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Current.Amperes">
            <summary>
            Gets the current value in amperes
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Current.Milliamperes">
            <summary>
            Gets the current value in milliamperes
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Current.Microamperes">
            <summary>
            Gets the current value in microamperes
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Current.GetValue(CircuitTool.Units.CurrentUnit)">
            <summary>
            Gets the current value in the specified unit
            </summary>
            <param name="unit">The desired unit</param>
            <returns>The current value in the specified unit</returns>
        </member>
        <member name="T:CircuitTool.Units.FrequencyUnit">
            <summary>
            Represents frequency measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.FrequencyUnit.Hertz">
            <summary>Hertz (Hz)</summary>
        </member>
        <member name="F:CircuitTool.Units.FrequencyUnit.Kilohertz">
            <summary>Kilohertz (kHz)</summary>
        </member>
        <member name="F:CircuitTool.Units.FrequencyUnit.Megahertz">
            <summary>Megahertz (MHz)</summary>
        </member>
        <member name="F:CircuitTool.Units.FrequencyUnit.Gigahertz">
            <summary>Gigahertz (GHz)</summary>
        </member>
        <member name="F:CircuitTool.Units.FrequencyUnit.Terahertz">
            <summary>Terahertz (THz)</summary>
        </member>
        <member name="T:CircuitTool.Units.Frequency">
            <summary>
            Represents a strongly-typed frequency measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Frequency.#ctor(System.Double,CircuitTool.Units.FrequencyUnit)">
            <summary>
            Creates a new frequency measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Hertz">
            <summary>
            Gets the frequency value in hertz
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Kilohertz">
            <summary>
            Gets the frequency value in kilohertz
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Megahertz">
            <summary>
            Gets the frequency value in megahertz
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Gigahertz">
            <summary>
            Gets the frequency value in gigahertz
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Terahertz">
            <summary>
            Gets the frequency value in terahertz
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.AngularFrequency">
            <summary>
            Gets the angular frequency (ω = 2πf) in radians per second
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Frequency.Period">
            <summary>
            Gets the period (T = 1/f) in seconds
            </summary>
        </member>
        <member name="T:CircuitTool.Units.InductanceUnit">
            <summary>
            Represents inductance measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.InductanceUnit.Nanohenries">
            <summary>Nanohenries (nH)</summary>
        </member>
        <member name="F:CircuitTool.Units.InductanceUnit.Microhenries">
            <summary>Microhenries (μH)</summary>
        </member>
        <member name="F:CircuitTool.Units.InductanceUnit.Millihenries">
            <summary>Millihenries (mH)</summary>
        </member>
        <member name="F:CircuitTool.Units.InductanceUnit.Henries">
            <summary>Henries (H)</summary>
        </member>
        <member name="F:CircuitTool.Units.InductanceUnit.Kilohenries">
            <summary>Kilohenries (kH)</summary>
        </member>
        <member name="T:CircuitTool.Units.Inductance">
            <summary>
            Represents a strongly-typed inductance measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Inductance.#ctor(System.Double,CircuitTool.Units.InductanceUnit)">
            <summary>
            Creates a new inductance measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Inductance.Henries">
            <summary>
            Gets the inductance value in henries
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Inductance.Nanohenries">
            <summary>
            Gets the inductance value in nanohenries
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Inductance.Microhenries">
            <summary>
            Gets the inductance value in microhenries
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Inductance.Millihenries">
            <summary>
            Gets the inductance value in millihenries
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Inductance.Kilohenries">
            <summary>
            Gets the inductance value in kilohenries
            </summary>
        </member>
        <member name="T:CircuitTool.Units.PowerUnit">
            <summary>
            Represents power measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Nanowatts">
            <summary>Nanowatts (nW)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Microwatts">
            <summary>Microwatts (μW)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Milliwatts">
            <summary>Milliwatts (mW)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Watts">
            <summary>Watts (W)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Kilowatts">
            <summary>Kilowatts (kW)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Megawatts">
            <summary>Megawatts (MW)</summary>
        </member>
        <member name="F:CircuitTool.Units.PowerUnit.Gigawatts">
            <summary>Gigawatts (GW)</summary>
        </member>
        <member name="T:CircuitTool.Units.Power">
            <summary>
            Represents a strongly-typed power measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Power.#ctor(System.Double,CircuitTool.Units.PowerUnit)">
            <summary>
            Creates a new power measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Power.Watts">
            <summary>
            Gets the power value in watts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Milliwatts">
            <summary>
            Gets the power value in milliwatts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Kilowatts">
            <summary>
            Gets the power value in kilowatts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Megawatts">
            <summary>
            Gets the power value in megawatts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Gigawatts">
            <summary>
            Gets the power value in gigawatts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Microwatts">
            <summary>
            Gets the power value in microwatts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Power.Nanowatts">
            <summary>
            Gets the power value in nanowatts
            </summary>
        </member>
        <member name="T:CircuitTool.Units.ResistanceUnit">
            <summary>
            Represents resistance measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.ResistanceUnit.Milliohms">
            <summary>Milliohms (mΩ)</summary>
        </member>
        <member name="F:CircuitTool.Units.ResistanceUnit.Ohms">
            <summary>Ohms (Ω)</summary>
        </member>
        <member name="F:CircuitTool.Units.ResistanceUnit.Kiloohms">
            <summary>Kiloohms (kΩ)</summary>
        </member>
        <member name="F:CircuitTool.Units.ResistanceUnit.Megaohms">
            <summary>Megaohms (MΩ)</summary>
        </member>
        <member name="F:CircuitTool.Units.ResistanceUnit.Gigaohms">
            <summary>Gigaohms (GΩ)</summary>
        </member>
        <member name="T:CircuitTool.Units.Resistance">
            <summary>
            Represents a strongly-typed resistance measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Resistance.#ctor(System.Double,CircuitTool.Units.ResistanceUnit)">
            <summary>
            Creates a new resistance measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Resistance.Ohms">
            <summary>
            Gets the resistance value in ohms
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Resistance.Kiloohms">
            <summary>
            Gets the resistance value in kiloohms
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Resistance.Megaohms">
            <summary>
            Gets the resistance value in megaohms
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Resistance.GetValue(CircuitTool.Units.ResistanceUnit)">
            <summary>
            Gets the resistance value in the specified unit
            </summary>
            <param name="unit">The desired unit</param>
            <returns>The resistance value in the specified unit</returns>
        </member>
        <member name="T:CircuitTool.Units.TypedOhmsLawCalculator">
            <summary>
            Provides strongly-typed Ohm's Law calculations using units to prevent errors
            </summary>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculateVoltage(CircuitTool.Units.Current,CircuitTool.Units.Resistance)">
            <summary>
            Calculates voltage using Ohm's Law (V = I × R)
            </summary>
            <param name="current">Current</param>
            <param name="resistance">Resistance</param>
            <returns>Voltage</returns>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculateCurrent(CircuitTool.Units.Voltage,CircuitTool.Units.Resistance)">
            <summary>
            Calculates current using Ohm's Law (I = V / R)
            </summary>
            <param name="voltage">Voltage</param>
            <param name="resistance">Resistance</param>
            <returns>Current</returns>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculateResistance(CircuitTool.Units.Voltage,CircuitTool.Units.Current)">
            <summary>
            Calculates resistance using Ohm's Law (R = V / I)
            </summary>
            <param name="voltage">Voltage</param>
            <param name="current">Current</param>
            <returns>Resistance</returns>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculatePower(CircuitTool.Units.Voltage,CircuitTool.Units.Current)">
            <summary>
            Calculates power using P = V × I
            </summary>
            <param name="voltage">Voltage</param>
            <param name="current">Current</param>
            <returns>Power in watts</returns>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculatePower(CircuitTool.Units.Voltage,CircuitTool.Units.Resistance)">
            <summary>
            Calculates power using P = V² / R
            </summary>
            <param name="voltage">Voltage</param>
            <param name="resistance">Resistance</param>
            <returns>Power in watts</returns>
        </member>
        <member name="M:CircuitTool.Units.TypedOhmsLawCalculator.CalculatePower(CircuitTool.Units.Current,CircuitTool.Units.Resistance)">
            <summary>
            Calculates power using P = I² × R
            </summary>
            <param name="current">Current</param>
            <param name="resistance">Resistance</param>
            <returns>Power in watts</returns>
        </member>
        <member name="T:CircuitTool.Units.VoltageUnit">
            <summary>
            Represents voltage measurement units
            </summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Nanovolts">
            <summary>Nanovolts (nV)</summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Microvolts">
            <summary>Microvolts (μV)</summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Millivolts">
            <summary>Millivolts (mV)</summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Volts">
            <summary>Volts (V)</summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Kilovolts">
            <summary>Kilovolts (kV)</summary>
        </member>
        <member name="F:CircuitTool.Units.VoltageUnit.Megavolts">
            <summary>Megavolts (MV)</summary>
        </member>
        <member name="T:CircuitTool.Units.Voltage">
            <summary>
            Represents a strongly-typed voltage measurement with automatic unit conversion
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Voltage.#ctor(System.Double,CircuitTool.Units.VoltageUnit)">
            <summary>
            Creates a new voltage measurement
            </summary>
            <param name="value">The value in the specified unit</param>
            <param name="unit">The unit of measurement</param>
        </member>
        <member name="P:CircuitTool.Units.Voltage.Volts">
            <summary>
            Gets the voltage value in volts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Voltage.Millivolts">
            <summary>
            Gets the voltage value in millivolts
            </summary>
        </member>
        <member name="P:CircuitTool.Units.Voltage.Kilovolts">
            <summary>
            Gets the voltage value in kilovolts
            </summary>
        </member>
        <member name="M:CircuitTool.Units.Voltage.GetValue(CircuitTool.Units.VoltageUnit)">
            <summary>
            Gets the voltage value in the specified unit
            </summary>
            <param name="unit">The desired unit</param>
            <returns>The voltage value in the specified unit</returns>
        </member>
    </members>
</doc>
